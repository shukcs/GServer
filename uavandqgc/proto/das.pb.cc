// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: das.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "das.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace das {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PostHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckQueryParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckQueryParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigureParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckConfigurParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckConfigurParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDeviceException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDeviceException_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReportDeviceException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReportDeviceException_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDeviceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateDeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateDeviceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncDeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncDeviceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSyncDeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSyncDeviceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickoutDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickoutDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckKickoutDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckKickoutDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestIdentityAllocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestIdentityAllocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIdentityAllocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIdentityAllocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProgramUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProgramUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckProgramUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckProgramUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProgramDownload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProgramDownload_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckProgramDownload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckProgramDownload_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPositionAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPositionAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPositionAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPositionAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request3rdIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request3rdIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack3rdIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack3rdIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUavIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUavIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUavIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUavIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTrackerIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTrackerIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTrackerIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTrackerIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGVIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGVIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGVIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGVIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGSIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGSIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGSIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGSIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestIVIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestIVIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIVIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIVIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQQBotIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQQBotIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckQQBotIdentityAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckQQBotIdentityAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UavAttitude_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UavAttitude_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostOperationInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostOperationInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOperationInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOperationInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostOperationSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostOperationSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostOperationSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostOperationSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Outline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Outline_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParcelSurveyInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParcelSurveyInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostParcelSurveyInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostParcelSurveyInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostParcelSurveyInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostParcelSurveyInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestParcelSurveyInformations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestParcelSurveyInformations_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestParcelSurveyInformations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestParcelSurveyInformations_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParcelContracter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParcelContracter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParcelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParcelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostParcelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostParcelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostParcelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostParcelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestParcelDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestParcelDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestParcelDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestParcelDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteParcelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteParcelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDeleteParcelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDeleteParcelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncParcelDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncParcelDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSyncParcelDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSyncParcelDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CropInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PesticideInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PesticideInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostOperationDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostOperationDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostOperationDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostOperationDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOperationDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOperationDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestOperationDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestOperationDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteOperationDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteOperationDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDeleteOperationDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDeleteOperationDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncOperationDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncOperationDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSyncOperationDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSyncOperationDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostOperationRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostOperationRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostOperationRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostOperationRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUploadOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUploadOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestUploadOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestUploadOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUploadOperationRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUploadOperationRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRouteMissions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRouteMissions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestRouteMissions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestRouteMissions_reflection_ = NULL;
const ::google::protobuf::Descriptor* UavStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UavStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUavStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUavStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestUavStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestUavStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindUav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindUav_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestBindUav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestBindUav_reflection_ = NULL;
const ::google::protobuf::Descriptor* UavProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UavProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequestUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequestUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSyncUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSyncUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostUavProductInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostUavProductInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostControl2Uav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostControl2Uav_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostControl2Uav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostControl2Uav_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostStatus2GroundStation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostStatus2GroundStation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SurveryPrecision_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_das_2eproto() {
  protobuf_AddDesc_das_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "das.proto");
  GOOGLE_CHECK(file != NULL);
  PostHeartBeat_descriptor_ = file->message_type(0);
  static const int PostHeartBeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, id_),
  };
  PostHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostHeartBeat_descriptor_,
      PostHeartBeat::default_instance_,
      PostHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostHeartBeat));
  AckHeartBeat_descriptor_ = file->message_type(1);
  static const int AckHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, seqno_),
  };
  AckHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHeartBeat_descriptor_,
      AckHeartBeat::default_instance_,
      AckHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHeartBeat));
  ParameterDescription_descriptor_ = file->message_type(2);
  static const int ParameterDescription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, readonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, value_),
  };
  ParameterDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParameterDescription_descriptor_,
      ParameterDescription::default_instance_,
      ParameterDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParameterDescription));
  QueryParameters_descriptor_ = file->message_type(3);
  static const int QueryParameters_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryParameters, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryParameters, id_),
  };
  QueryParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryParameters_descriptor_,
      QueryParameters::default_instance_,
      QueryParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryParameters));
  AckQueryParameters_descriptor_ = file->message_type(4);
  static const int AckQueryParameters_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, pd_),
  };
  AckQueryParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckQueryParameters_descriptor_,
      AckQueryParameters::default_instance_,
      AckQueryParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckQueryParameters));
  ConfigureParameters_descriptor_ = file->message_type(5);
  static const int ConfigureParameters_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureParameters, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureParameters, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureParameters, pd_),
  };
  ConfigureParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigureParameters_descriptor_,
      ConfigureParameters::default_instance_,
      ConfigureParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigureParameters));
  AckConfigurParameters_descriptor_ = file->message_type(6);
  static const int AckConfigurParameters_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConfigurParameters, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConfigurParameters, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConfigurParameters, result_),
  };
  AckConfigurParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckConfigurParameters_descriptor_,
      AckConfigurParameters::default_instance_,
      AckConfigurParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConfigurParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConfigurParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckConfigurParameters));
  ReportDeviceException_descriptor_ = file->message_type(7);
  static const int ReportDeviceException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceException, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceException, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceException, desc_),
  };
  ReportDeviceException_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDeviceException_descriptor_,
      ReportDeviceException::default_instance_,
      ReportDeviceException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceException, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDeviceException, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDeviceException));
  AckReportDeviceException_descriptor_ = file->message_type(8);
  static const int AckReportDeviceException_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReportDeviceException, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReportDeviceException, result_),
  };
  AckReportDeviceException_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReportDeviceException_descriptor_,
      AckReportDeviceException::default_instance_,
      AckReportDeviceException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReportDeviceException, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReportDeviceException, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReportDeviceException));
  UpdateDeviceList_descriptor_ = file->message_type(9);
  static const int UpdateDeviceList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceList, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceList, id_),
  };
  UpdateDeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDeviceList_descriptor_,
      UpdateDeviceList::default_instance_,
      UpdateDeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDeviceList));
  AckUpdateDeviceList_descriptor_ = file->message_type(10);
  static const int AckUpdateDeviceList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDeviceList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDeviceList, result_),
  };
  AckUpdateDeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateDeviceList_descriptor_,
      AckUpdateDeviceList::default_instance_,
      AckUpdateDeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateDeviceList));
  SyncDeviceList_descriptor_ = file->message_type(11);
  static const int SyncDeviceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDeviceList, seqno_),
  };
  SyncDeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncDeviceList_descriptor_,
      SyncDeviceList::default_instance_,
      SyncDeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncDeviceList));
  AckSyncDeviceList_descriptor_ = file->message_type(12);
  static const int AckSyncDeviceList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncDeviceList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncDeviceList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncDeviceList, id_),
  };
  AckSyncDeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSyncDeviceList_descriptor_,
      AckSyncDeviceList::default_instance_,
      AckSyncDeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncDeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncDeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSyncDeviceList));
  KickoutDevice_descriptor_ = file->message_type(13);
  static const int KickoutDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutDevice, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutDevice, devid_),
  };
  KickoutDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickoutDevice_descriptor_,
      KickoutDevice::default_instance_,
      KickoutDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickoutDevice));
  AckKickoutDevice_descriptor_ = file->message_type(14);
  static const int AckKickoutDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickoutDevice, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickoutDevice, result_),
  };
  AckKickoutDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckKickoutDevice_descriptor_,
      AckKickoutDevice::default_instance_,
      AckKickoutDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickoutDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickoutDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckKickoutDevice));
  RequestIdentityAllocation_descriptor_ = file->message_type(15);
  static const int RequestIdentityAllocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdentityAllocation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdentityAllocation, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdentityAllocation, extradata_),
  };
  RequestIdentityAllocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestIdentityAllocation_descriptor_,
      RequestIdentityAllocation::default_instance_,
      RequestIdentityAllocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdentityAllocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdentityAllocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestIdentityAllocation));
  AckIdentityAllocation_descriptor_ = file->message_type(16);
  static const int AckIdentityAllocation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, extradata_),
  };
  AckIdentityAllocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIdentityAllocation_descriptor_,
      AckIdentityAllocation::default_instance_,
      AckIdentityAllocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIdentityAllocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIdentityAllocation));
  RequestProgramUpgrade_descriptor_ = file->message_type(17);
  static const int RequestProgramUpgrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, extradata_),
  };
  RequestProgramUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProgramUpgrade_descriptor_,
      RequestProgramUpgrade::default_instance_,
      RequestProgramUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProgramUpgrade));
  AckProgramUpgrade_descriptor_ = file->message_type(18);
  static const int AckProgramUpgrade_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, forced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, extradata_),
  };
  AckProgramUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckProgramUpgrade_descriptor_,
      AckProgramUpgrade::default_instance_,
      AckProgramUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckProgramUpgrade));
  RequestProgramDownload_descriptor_ = file->message_type(19);
  static const int RequestProgramDownload_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, extradata_),
  };
  RequestProgramDownload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProgramDownload_descriptor_,
      RequestProgramDownload::default_instance_,
      RequestProgramDownload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProgramDownload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProgramDownload));
  AckProgramDownload_descriptor_ = file->message_type(20);
  static const int AckProgramDownload_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, crc32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, extradata_),
  };
  AckProgramDownload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckProgramDownload_descriptor_,
      AckProgramDownload::default_instance_,
      AckProgramDownload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProgramDownload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckProgramDownload));
  RequestPositionAuthentication_descriptor_ = file->message_type(21);
  static const int RequestPositionAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPositionAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPositionAuthentication, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPositionAuthentication, pos_),
  };
  RequestPositionAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPositionAuthentication_descriptor_,
      RequestPositionAuthentication::default_instance_,
      RequestPositionAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPositionAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPositionAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPositionAuthentication));
  AckPositionAuthentication_descriptor_ = file->message_type(22);
  static const int AckPositionAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPositionAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPositionAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPositionAuthentication, devid_),
  };
  AckPositionAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPositionAuthentication_descriptor_,
      AckPositionAuthentication::default_instance_,
      AckPositionAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPositionAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPositionAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPositionAuthentication));
  Request3rdIdentityAuthentication_descriptor_ = file->message_type(23);
  static const int Request3rdIdentityAuthentication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, identification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, secretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, extradata_),
  };
  Request3rdIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request3rdIdentityAuthentication_descriptor_,
      Request3rdIdentityAuthentication::default_instance_,
      Request3rdIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request3rdIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request3rdIdentityAuthentication));
  Ack3rdIdentityAuthentication_descriptor_ = file->message_type(24);
  static const int Ack3rdIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack3rdIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack3rdIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack3rdIdentityAuthentication, extradata_),
  };
  Ack3rdIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack3rdIdentityAuthentication_descriptor_,
      Ack3rdIdentityAuthentication::default_instance_,
      Ack3rdIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack3rdIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack3rdIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack3rdIdentityAuthentication));
  RequestUavIdentityAuthentication_descriptor_ = file->message_type(25);
  static const int RequestUavIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavIdentityAuthentication, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavIdentityAuthentication, extradata_),
  };
  RequestUavIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUavIdentityAuthentication_descriptor_,
      RequestUavIdentityAuthentication::default_instance_,
      RequestUavIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUavIdentityAuthentication));
  AckUavIdentityAuthentication_descriptor_ = file->message_type(26);
  static const int AckUavIdentityAuthentication_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, extradata_),
  };
  AckUavIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUavIdentityAuthentication_descriptor_,
      AckUavIdentityAuthentication::default_instance_,
      AckUavIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUavIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUavIdentityAuthentication));
  RequestTrackerIdentityAuthentication_descriptor_ = file->message_type(27);
  static const int RequestTrackerIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackerIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackerIdentityAuthentication, trackerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackerIdentityAuthentication, extradata_),
  };
  RequestTrackerIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTrackerIdentityAuthentication_descriptor_,
      RequestTrackerIdentityAuthentication::default_instance_,
      RequestTrackerIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackerIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackerIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTrackerIdentityAuthentication));
  AckTrackerIdentityAuthentication_descriptor_ = file->message_type(28);
  static const int AckTrackerIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTrackerIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTrackerIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTrackerIdentityAuthentication, extradata_),
  };
  AckTrackerIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTrackerIdentityAuthentication_descriptor_,
      AckTrackerIdentityAuthentication::default_instance_,
      AckTrackerIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTrackerIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTrackerIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTrackerIdentityAuthentication));
  RequestGVIdentityAuthentication_descriptor_ = file->message_type(29);
  static const int RequestGVIdentityAuthentication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, extradata_),
  };
  RequestGVIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGVIdentityAuthentication_descriptor_,
      RequestGVIdentityAuthentication::default_instance_,
      RequestGVIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGVIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGVIdentityAuthentication));
  AckGVIdentityAuthentication_descriptor_ = file->message_type(30);
  static const int AckGVIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGVIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGVIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGVIdentityAuthentication, extradata_),
  };
  AckGVIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGVIdentityAuthentication_descriptor_,
      AckGVIdentityAuthentication::default_instance_,
      AckGVIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGVIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGVIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGVIdentityAuthentication));
  RequestGSIdentityAuthentication_descriptor_ = file->message_type(31);
  static const int RequestGSIdentityAuthentication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, extradata_),
  };
  RequestGSIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGSIdentityAuthentication_descriptor_,
      RequestGSIdentityAuthentication::default_instance_,
      RequestGSIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGSIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGSIdentityAuthentication));
  AckGSIdentityAuthentication_descriptor_ = file->message_type(32);
  static const int AckGSIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGSIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGSIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGSIdentityAuthentication, extradata_),
  };
  AckGSIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGSIdentityAuthentication_descriptor_,
      AckGSIdentityAuthentication::default_instance_,
      AckGSIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGSIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGSIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGSIdentityAuthentication));
  RequestIVIdentityAuthentication_descriptor_ = file->message_type(33);
  static const int RequestIVIdentityAuthentication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, extradata_),
  };
  RequestIVIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestIVIdentityAuthentication_descriptor_,
      RequestIVIdentityAuthentication::default_instance_,
      RequestIVIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIVIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestIVIdentityAuthentication));
  AckIVIdentityAuthentication_descriptor_ = file->message_type(34);
  static const int AckIVIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIVIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIVIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIVIdentityAuthentication, extradata_),
  };
  AckIVIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIVIdentityAuthentication_descriptor_,
      AckIVIdentityAuthentication::default_instance_,
      AckIVIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIVIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIVIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIVIdentityAuthentication));
  RequestQQBotIdentityAuthentication_descriptor_ = file->message_type(35);
  static const int RequestQQBotIdentityAuthentication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, extradata_),
  };
  RequestQQBotIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestQQBotIdentityAuthentication_descriptor_,
      RequestQQBotIdentityAuthentication::default_instance_,
      RequestQQBotIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQQBotIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestQQBotIdentityAuthentication));
  AckQQBotIdentityAuthentication_descriptor_ = file->message_type(36);
  static const int AckQQBotIdentityAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQQBotIdentityAuthentication, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQQBotIdentityAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQQBotIdentityAuthentication, extradata_),
  };
  AckQQBotIdentityAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckQQBotIdentityAuthentication_descriptor_,
      AckQQBotIdentityAuthentication::default_instance_,
      AckQQBotIdentityAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQQBotIdentityAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQQBotIdentityAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckQQBotIdentityAuthentication));
  GpsInformation_descriptor_ = file->message_type(37);
  static const int GpsInformation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, velocity_),
  };
  GpsInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpsInformation_descriptor_,
      GpsInformation::default_instance_,
      GpsInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsInformation));
  UavAttitude_descriptor_ = file->message_type(38);
  static const int UavAttitude_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, relative_alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, groundspeed_),
  };
  UavAttitude_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UavAttitude_descriptor_,
      UavAttitude::default_instance_,
      UavAttitude_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavAttitude, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UavAttitude));
  OperationStatus_descriptor_ = file->message_type(39);
  static const int OperationStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, operationmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, surplusenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, jetvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, sprayeddose_),
  };
  OperationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationStatus_descriptor_,
      OperationStatus::default_instance_,
      OperationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationStatus));
  OperationParams_descriptor_ = file->message_type(40);
  static const int OperationParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, alarmvoltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, alarmdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, sprayingwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, desiredaltitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, desiredvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, jetvelocity_),
  };
  OperationParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationParams_descriptor_,
      OperationParams::default_instance_,
      OperationParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationParams));
  OperationInformation_descriptor_ = file->message_type(41);
  static const int OperationInformation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, attitude_),
  };
  OperationInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationInformation_descriptor_,
      OperationInformation::default_instance_,
      OperationInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationInformation));
  PostOperationInformation_descriptor_ = file->message_type(42);
  static const int PostOperationInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationInformation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationInformation, oi_),
  };
  PostOperationInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostOperationInformation_descriptor_,
      PostOperationInformation::default_instance_,
      PostOperationInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostOperationInformation));
  AckOperationInformation_descriptor_ = file->message_type(43);
  static const int AckOperationInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperationInformation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperationInformation, result_),
  };
  AckOperationInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOperationInformation_descriptor_,
      AckOperationInformation::default_instance_,
      AckOperationInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperationInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperationInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOperationInformation));
  Coordinate_descriptor_ = file->message_type(44);
  static const int Coordinate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, altitude_),
  };
  Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::default_instance_,
      Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coordinate));
  OperationSnapshot_descriptor_ = file->message_type(45);
  static const int OperationSnapshot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, pic_),
  };
  OperationSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationSnapshot_descriptor_,
      OperationSnapshot::default_instance_,
      OperationSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationSnapshot));
  PostOperationSnapshot_descriptor_ = file->message_type(46);
  static const int PostOperationSnapshot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationSnapshot, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationSnapshot, os_),
  };
  PostOperationSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostOperationSnapshot_descriptor_,
      PostOperationSnapshot::default_instance_,
      PostOperationSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostOperationSnapshot));
  AckPostOperationSnapshot_descriptor_ = file->message_type(47);
  static const int AckPostOperationSnapshot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationSnapshot, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationSnapshot, result_),
  };
  AckPostOperationSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostOperationSnapshot_descriptor_,
      AckPostOperationSnapshot::default_instance_,
      AckPostOperationSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostOperationSnapshot));
  Outline_descriptor_ = file->message_type(48);
  static const int Outline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outline, coordinates_),
  };
  Outline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Outline_descriptor_,
      Outline::default_instance_,
      Outline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Outline));
  ParcelSurveyInformation_descriptor_ = file->message_type(49);
  static const int ParcelSurveyInformation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, surveryorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, surverytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, po_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, bo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, id_),
  };
  ParcelSurveyInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParcelSurveyInformation_descriptor_,
      ParcelSurveyInformation::default_instance_,
      ParcelSurveyInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelSurveyInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParcelSurveyInformation));
  PostParcelSurveyInformation_descriptor_ = file->message_type(50);
  static const int PostParcelSurveyInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelSurveyInformation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelSurveyInformation, psi_),
  };
  PostParcelSurveyInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostParcelSurveyInformation_descriptor_,
      PostParcelSurveyInformation::default_instance_,
      PostParcelSurveyInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelSurveyInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelSurveyInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostParcelSurveyInformation));
  AckPostParcelSurveyInformation_descriptor_ = file->message_type(51);
  static const int AckPostParcelSurveyInformation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelSurveyInformation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelSurveyInformation, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelSurveyInformation, psiid_),
  };
  AckPostParcelSurveyInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostParcelSurveyInformation_descriptor_,
      AckPostParcelSurveyInformation::default_instance_,
      AckPostParcelSurveyInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelSurveyInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelSurveyInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostParcelSurveyInformation));
  RequestParcelSurveyInformations_descriptor_ = file->message_type(52);
  static const int RequestParcelSurveyInformations_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelSurveyInformations, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelSurveyInformations, psiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelSurveyInformations, coordinate_),
  };
  RequestParcelSurveyInformations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestParcelSurveyInformations_descriptor_,
      RequestParcelSurveyInformations::default_instance_,
      RequestParcelSurveyInformations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelSurveyInformations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelSurveyInformations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestParcelSurveyInformations));
  AckRequestParcelSurveyInformations_descriptor_ = file->message_type(53);
  static const int AckRequestParcelSurveyInformations_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelSurveyInformations, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelSurveyInformations, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelSurveyInformations, psis_),
  };
  AckRequestParcelSurveyInformations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestParcelSurveyInformations_descriptor_,
      AckRequestParcelSurveyInformations::default_instance_,
      AckRequestParcelSurveyInformations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelSurveyInformations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelSurveyInformations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestParcelSurveyInformations));
  ParcelContracter_descriptor_ = file->message_type(54);
  static const int ParcelContracter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, birthdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, mobileno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, phoneno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, weixin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, id_),
  };
  ParcelContracter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParcelContracter_descriptor_,
      ParcelContracter::default_instance_,
      ParcelContracter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelContracter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParcelContracter));
  ParcelDescription_descriptor_ = file->message_type(55);
  static const int ParcelDescription_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, acreage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, psiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, psi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, id_),
  };
  ParcelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParcelDescription_descriptor_,
      ParcelDescription::default_instance_,
      ParcelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParcelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParcelDescription));
  PostParcelDescription_descriptor_ = file->message_type(56);
  static const int PostParcelDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelDescription, pd_),
  };
  PostParcelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostParcelDescription_descriptor_,
      PostParcelDescription::default_instance_,
      PostParcelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParcelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostParcelDescription));
  AckPostParcelDescription_descriptor_ = file->message_type(57);
  static const int AckPostParcelDescription_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, pcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, psiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, pdid_),
  };
  AckPostParcelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostParcelDescription_descriptor_,
      AckPostParcelDescription::default_instance_,
      AckPostParcelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostParcelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostParcelDescription));
  RequestParcelDescriptions_descriptor_ = file->message_type(58);
  static const int RequestParcelDescriptions_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, pdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, surveryorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, surveryorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, registername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, parcelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, contracter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, mobileno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, zones_),
  };
  RequestParcelDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestParcelDescriptions_descriptor_,
      RequestParcelDescriptions::default_instance_,
      RequestParcelDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestParcelDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestParcelDescriptions));
  AckRequestParcelDescriptions_descriptor_ = file->message_type(59);
  static const int AckRequestParcelDescriptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelDescriptions, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelDescriptions, pds_),
  };
  AckRequestParcelDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestParcelDescriptions_descriptor_,
      AckRequestParcelDescriptions::default_instance_,
      AckRequestParcelDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestParcelDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestParcelDescriptions));
  DeleteParcelDescription_descriptor_ = file->message_type(60);
  static const int DeleteParcelDescription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, pdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, delpsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, delpc_),
  };
  DeleteParcelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteParcelDescription_descriptor_,
      DeleteParcelDescription::default_instance_,
      DeleteParcelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteParcelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteParcelDescription));
  AckDeleteParcelDescription_descriptor_ = file->message_type(61);
  static const int AckDeleteParcelDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteParcelDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteParcelDescription, result_),
  };
  AckDeleteParcelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDeleteParcelDescription_descriptor_,
      AckDeleteParcelDescription::default_instance_,
      AckDeleteParcelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteParcelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteParcelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDeleteParcelDescription));
  SyncParcelDescriptions_descriptor_ = file->message_type(62);
  static const int SyncParcelDescriptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncParcelDescriptions, seqno_),
  };
  SyncParcelDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncParcelDescriptions_descriptor_,
      SyncParcelDescriptions::default_instance_,
      SyncParcelDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncParcelDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncParcelDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncParcelDescriptions));
  AckSyncParcelDescriptions_descriptor_ = file->message_type(63);
  static const int AckSyncParcelDescriptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncParcelDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncParcelDescriptions, result_),
  };
  AckSyncParcelDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSyncParcelDescriptions_descriptor_,
      AckSyncParcelDescriptions::default_instance_,
      AckSyncParcelDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncParcelDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncParcelDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSyncParcelDescriptions));
  CropInformation_descriptor_ = file->message_type(64);
  static const int CropInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropInformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropInformation, cdid_),
  };
  CropInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropInformation_descriptor_,
      CropInformation::default_instance_,
      CropInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropInformation));
  PesticideInformation_descriptor_ = file->message_type(65);
  static const int PesticideInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PesticideInformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PesticideInformation, pdid_),
  };
  PesticideInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PesticideInformation_descriptor_,
      PesticideInformation::default_instance_,
      PesticideInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PesticideInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PesticideInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PesticideInformation));
  BillInformation_descriptor_ = file->message_type(66);
  static const int BillInformation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, servicecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, pesticidecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, othercharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, sumcharge_),
  };
  BillInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillInformation_descriptor_,
      BillInformation::default_instance_,
      BillInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillInformation));
  DeviceInformation_descriptor_ = file->message_type(67);
  static const int DeviceInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInformation, diid_),
  };
  DeviceInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInformation_descriptor_,
      DeviceInformation::default_instance_,
      DeviceInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInformation));
  OperationDescription_descriptor_ = file->message_type(68);
  static const int OperationDescription_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, chargerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, operatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, operationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, ci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, pi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, di_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, pdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, odid_),
  };
  OperationDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationDescription_descriptor_,
      OperationDescription::default_instance_,
      OperationDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationDescription));
  PostOperationDescription_descriptor_ = file->message_type(69);
  static const int PostOperationDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationDescription, od_),
  };
  PostOperationDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostOperationDescription_descriptor_,
      PostOperationDescription::default_instance_,
      PostOperationDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostOperationDescription));
  AckPostOperationDescription_descriptor_ = file->message_type(70);
  static const int AckPostOperationDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationDescription, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationDescription, odid_),
  };
  AckPostOperationDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostOperationDescription_descriptor_,
      AckPostOperationDescription::default_instance_,
      AckPostOperationDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostOperationDescription));
  RequestOperationDescriptions_descriptor_ = file->message_type(71);
  static const int RequestOperationDescriptions_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, odid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, pdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, chargemanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, registerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, operatorid_),
  };
  RequestOperationDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOperationDescriptions_descriptor_,
      RequestOperationDescriptions::default_instance_,
      RequestOperationDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOperationDescriptions));
  AckRequestOperationDescriptions_descriptor_ = file->message_type(72);
  static const int AckRequestOperationDescriptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationDescriptions, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationDescriptions, ods_),
  };
  AckRequestOperationDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestOperationDescriptions_descriptor_,
      AckRequestOperationDescriptions::default_instance_,
      AckRequestOperationDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestOperationDescriptions));
  DeleteOperationDescription_descriptor_ = file->message_type(73);
  static const int DeleteOperationDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOperationDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOperationDescription, odid_),
  };
  DeleteOperationDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteOperationDescription_descriptor_,
      DeleteOperationDescription::default_instance_,
      DeleteOperationDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOperationDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOperationDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteOperationDescription));
  AckDeleteOperationDescription_descriptor_ = file->message_type(74);
  static const int AckDeleteOperationDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteOperationDescription, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteOperationDescription, result_),
  };
  AckDeleteOperationDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDeleteOperationDescription_descriptor_,
      AckDeleteOperationDescription::default_instance_,
      AckDeleteOperationDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteOperationDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDeleteOperationDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDeleteOperationDescription));
  SyncOperationDescriptions_descriptor_ = file->message_type(75);
  static const int SyncOperationDescriptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperationDescriptions, seqno_),
  };
  SyncOperationDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncOperationDescriptions_descriptor_,
      SyncOperationDescriptions::default_instance_,
      SyncOperationDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperationDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperationDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncOperationDescriptions));
  AckSyncOperationDescriptions_descriptor_ = file->message_type(76);
  static const int AckSyncOperationDescriptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncOperationDescriptions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncOperationDescriptions, result_),
  };
  AckSyncOperationDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSyncOperationDescriptions_descriptor_,
      AckSyncOperationDescriptions::default_instance_,
      AckSyncOperationDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncOperationDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncOperationDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSyncOperationDescriptions));
  OperationRoute_descriptor_ = file->message_type(77);
  static const int OperationRoute_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, odid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, fsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, psi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, sprinklingwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, maxvoyage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, supplypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, orid_),
  };
  OperationRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationRoute_descriptor_,
      OperationRoute::default_instance_,
      OperationRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationRoute));
  PostOperationRoute_descriptor_ = file->message_type(78);
  static const int PostOperationRoute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationRoute, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationRoute, or__),
  };
  PostOperationRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostOperationRoute_descriptor_,
      PostOperationRoute::default_instance_,
      PostOperationRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostOperationRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostOperationRoute));
  AckPostOperationRoute_descriptor_ = file->message_type(79);
  static const int AckPostOperationRoute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, fszid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, psiid_),
  };
  AckPostOperationRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostOperationRoute_descriptor_,
      AckPostOperationRoute::default_instance_,
      AckPostOperationRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostOperationRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostOperationRoute));
  RequestOperationRoutes_descriptor_ = file->message_type(80);
  static const int RequestOperationRoutes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, odid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, pdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, coordinate_),
  };
  RequestOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOperationRoutes_descriptor_,
      RequestOperationRoutes::default_instance_,
      RequestOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOperationRoutes));
  AckRequestOperationRoutes_descriptor_ = file->message_type(81);
  static const int AckRequestOperationRoutes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationRoutes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationRoutes, ors_),
  };
  AckRequestOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestOperationRoutes_descriptor_,
      AckRequestOperationRoutes::default_instance_,
      AckRequestOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestOperationRoutes));
  RequestUploadOperationRoutes_descriptor_ = file->message_type(82);
  static const int RequestUploadOperationRoutes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUploadOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUploadOperationRoutes, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUploadOperationRoutes, orid_),
  };
  RequestUploadOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUploadOperationRoutes_descriptor_,
      RequestUploadOperationRoutes::default_instance_,
      RequestUploadOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUploadOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUploadOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUploadOperationRoutes));
  AckRequestUploadOperationRoutes_descriptor_ = file->message_type(83);
  static const int AckRequestUploadOperationRoutes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, count_),
  };
  AckRequestUploadOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestUploadOperationRoutes_descriptor_,
      AckRequestUploadOperationRoutes::default_instance_,
      AckRequestUploadOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUploadOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestUploadOperationRoutes));
  UploadOperationRoutes_descriptor_ = file->message_type(84);
  static const int UploadOperationRoutes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, count_),
  };
  UploadOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadOperationRoutes_descriptor_,
      UploadOperationRoutes::default_instance_,
      UploadOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadOperationRoutes));
  AckUploadOperationRoutes_descriptor_ = file->message_type(85);
  static const int AckUploadOperationRoutes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, timestamp_),
  };
  AckUploadOperationRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUploadOperationRoutes_descriptor_,
      AckUploadOperationRoutes::default_instance_,
      AckUploadOperationRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUploadOperationRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUploadOperationRoutes));
  RequestRouteMissions_descriptor_ = file->message_type(86);
  static const int RequestRouteMissions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, count_),
  };
  RequestRouteMissions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRouteMissions_descriptor_,
      RequestRouteMissions::default_instance_,
      RequestRouteMissions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRouteMissions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRouteMissions));
  AckRequestRouteMissions_descriptor_ = file->message_type(87);
  static const int AckRequestRouteMissions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, orid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, missions_),
  };
  AckRequestRouteMissions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestRouteMissions_descriptor_,
      AckRequestRouteMissions::default_instance_,
      AckRequestRouteMissions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestRouteMissions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestRouteMissions));
  UavStatus_descriptor_ = file->message_type(88);
  static const int UavStatus_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, landed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, binder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, bindtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, unbindtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, timestamp_),
  };
  UavStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UavStatus_descriptor_,
      UavStatus::default_instance_,
      UavStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UavStatus));
  RequestUavStatus_descriptor_ = file->message_type(89);
  static const int RequestUavStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavStatus, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavStatus, uavid_),
  };
  RequestUavStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUavStatus_descriptor_,
      RequestUavStatus::default_instance_,
      RequestUavStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUavStatus));
  AckRequestUavStatus_descriptor_ = file->message_type(90);
  static const int AckRequestUavStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavStatus, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavStatus, status_),
  };
  AckRequestUavStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestUavStatus_descriptor_,
      AckRequestUavStatus::default_instance_,
      AckRequestUavStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestUavStatus));
  RequestBindUav_descriptor_ = file->message_type(91);
  static const int RequestBindUav_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, binder_),
  };
  RequestBindUav_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindUav_descriptor_,
      RequestBindUav::default_instance_,
      RequestBindUav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindUav, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindUav));
  AckRequestBindUav_descriptor_ = file->message_type(92);
  static const int AckRequestBindUav_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, status_),
  };
  AckRequestBindUav_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestBindUav_descriptor_,
      AckRequestBindUav::default_instance_,
      AckRequestBindUav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestBindUav, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestBindUav));
  UavProductInfo_descriptor_ = file->message_type(93);
  static const int UavProductInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, organization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, manager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, contact_),
  };
  UavProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UavProductInfo_descriptor_,
      UavProductInfo::default_instance_,
      UavProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UavProductInfo));
  RequestUavProductInfos_descriptor_ = file->message_type(94);
  static const int RequestUavProductInfos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavProductInfos, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavProductInfos, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavProductInfos, uavid_),
  };
  RequestUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUavProductInfos_descriptor_,
      RequestUavProductInfos::default_instance_,
      RequestUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUavProductInfos));
  AckRequestUavProductInfos_descriptor_ = file->message_type(95);
  static const int AckRequestUavProductInfos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavProductInfos, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavProductInfos, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavProductInfos, upi_),
  };
  AckRequestUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequestUavProductInfos_descriptor_,
      AckRequestUavProductInfos::default_instance_,
      AckRequestUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequestUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequestUavProductInfos));
  SyncUavProductInfos_descriptor_ = file->message_type(96);
  static const int SyncUavProductInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUavProductInfos, seqno_),
  };
  SyncUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncUavProductInfos_descriptor_,
      SyncUavProductInfos::default_instance_,
      SyncUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncUavProductInfos));
  AckSyncUavProductInfos_descriptor_ = file->message_type(97);
  static const int AckSyncUavProductInfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncUavProductInfos, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncUavProductInfos, result_),
  };
  AckSyncUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSyncUavProductInfos_descriptor_,
      AckSyncUavProductInfos::default_instance_,
      AckSyncUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSyncUavProductInfos));
  PostUavProductInfos_descriptor_ = file->message_type(98);
  static const int PostUavProductInfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUavProductInfos, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUavProductInfos, upi_),
  };
  PostUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostUavProductInfos_descriptor_,
      PostUavProductInfos::default_instance_,
      PostUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostUavProductInfos));
  AckPostUavProductInfos_descriptor_ = file->message_type(99);
  static const int AckPostUavProductInfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostUavProductInfos, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostUavProductInfos, result_),
  };
  AckPostUavProductInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostUavProductInfos_descriptor_,
      AckPostUavProductInfos::default_instance_,
      AckPostUavProductInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostUavProductInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostUavProductInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostUavProductInfos));
  PostControl2Uav_descriptor_ = file->message_type(100);
  static const int PostControl2Uav_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, data_),
  };
  PostControl2Uav_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostControl2Uav_descriptor_,
      PostControl2Uav::default_instance_,
      PostControl2Uav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostControl2Uav, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostControl2Uav));
  AckPostControl2Uav_descriptor_ = file->message_type(101);
  static const int AckPostControl2Uav_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, userid_),
  };
  AckPostControl2Uav_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostControl2Uav_descriptor_,
      AckPostControl2Uav::default_instance_,
      AckPostControl2Uav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostControl2Uav, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostControl2Uav));
  PostStatus2GroundStation_descriptor_ = file->message_type(102);
  static const int PostStatus2GroundStation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostStatus2GroundStation, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostStatus2GroundStation, uavid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostStatus2GroundStation, data_),
  };
  PostStatus2GroundStation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostStatus2GroundStation_descriptor_,
      PostStatus2GroundStation::default_instance_,
      PostStatus2GroundStation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostStatus2GroundStation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostStatus2GroundStation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostStatus2GroundStation));
  SurveryPrecision_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_das_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostHeartBeat_descriptor_, &PostHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHeartBeat_descriptor_, &AckHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParameterDescription_descriptor_, &ParameterDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryParameters_descriptor_, &QueryParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckQueryParameters_descriptor_, &AckQueryParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigureParameters_descriptor_, &ConfigureParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckConfigurParameters_descriptor_, &AckConfigurParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDeviceException_descriptor_, &ReportDeviceException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReportDeviceException_descriptor_, &AckReportDeviceException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDeviceList_descriptor_, &UpdateDeviceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateDeviceList_descriptor_, &AckUpdateDeviceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncDeviceList_descriptor_, &SyncDeviceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSyncDeviceList_descriptor_, &AckSyncDeviceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickoutDevice_descriptor_, &KickoutDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckKickoutDevice_descriptor_, &AckKickoutDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestIdentityAllocation_descriptor_, &RequestIdentityAllocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIdentityAllocation_descriptor_, &AckIdentityAllocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProgramUpgrade_descriptor_, &RequestProgramUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckProgramUpgrade_descriptor_, &AckProgramUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProgramDownload_descriptor_, &RequestProgramDownload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckProgramDownload_descriptor_, &AckProgramDownload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPositionAuthentication_descriptor_, &RequestPositionAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPositionAuthentication_descriptor_, &AckPositionAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request3rdIdentityAuthentication_descriptor_, &Request3rdIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack3rdIdentityAuthentication_descriptor_, &Ack3rdIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUavIdentityAuthentication_descriptor_, &RequestUavIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUavIdentityAuthentication_descriptor_, &AckUavIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTrackerIdentityAuthentication_descriptor_, &RequestTrackerIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTrackerIdentityAuthentication_descriptor_, &AckTrackerIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGVIdentityAuthentication_descriptor_, &RequestGVIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGVIdentityAuthentication_descriptor_, &AckGVIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGSIdentityAuthentication_descriptor_, &RequestGSIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGSIdentityAuthentication_descriptor_, &AckGSIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestIVIdentityAuthentication_descriptor_, &RequestIVIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIVIdentityAuthentication_descriptor_, &AckIVIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestQQBotIdentityAuthentication_descriptor_, &RequestQQBotIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckQQBotIdentityAuthentication_descriptor_, &AckQQBotIdentityAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsInformation_descriptor_, &GpsInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UavAttitude_descriptor_, &UavAttitude::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationStatus_descriptor_, &OperationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationParams_descriptor_, &OperationParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationInformation_descriptor_, &OperationInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostOperationInformation_descriptor_, &PostOperationInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOperationInformation_descriptor_, &AckOperationInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coordinate_descriptor_, &Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationSnapshot_descriptor_, &OperationSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostOperationSnapshot_descriptor_, &PostOperationSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostOperationSnapshot_descriptor_, &AckPostOperationSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Outline_descriptor_, &Outline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParcelSurveyInformation_descriptor_, &ParcelSurveyInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostParcelSurveyInformation_descriptor_, &PostParcelSurveyInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostParcelSurveyInformation_descriptor_, &AckPostParcelSurveyInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestParcelSurveyInformations_descriptor_, &RequestParcelSurveyInformations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestParcelSurveyInformations_descriptor_, &AckRequestParcelSurveyInformations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParcelContracter_descriptor_, &ParcelContracter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParcelDescription_descriptor_, &ParcelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostParcelDescription_descriptor_, &PostParcelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostParcelDescription_descriptor_, &AckPostParcelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestParcelDescriptions_descriptor_, &RequestParcelDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestParcelDescriptions_descriptor_, &AckRequestParcelDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteParcelDescription_descriptor_, &DeleteParcelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDeleteParcelDescription_descriptor_, &AckDeleteParcelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncParcelDescriptions_descriptor_, &SyncParcelDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSyncParcelDescriptions_descriptor_, &AckSyncParcelDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropInformation_descriptor_, &CropInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PesticideInformation_descriptor_, &PesticideInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillInformation_descriptor_, &BillInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInformation_descriptor_, &DeviceInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationDescription_descriptor_, &OperationDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostOperationDescription_descriptor_, &PostOperationDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostOperationDescription_descriptor_, &AckPostOperationDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOperationDescriptions_descriptor_, &RequestOperationDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestOperationDescriptions_descriptor_, &AckRequestOperationDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteOperationDescription_descriptor_, &DeleteOperationDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDeleteOperationDescription_descriptor_, &AckDeleteOperationDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncOperationDescriptions_descriptor_, &SyncOperationDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSyncOperationDescriptions_descriptor_, &AckSyncOperationDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationRoute_descriptor_, &OperationRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostOperationRoute_descriptor_, &PostOperationRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostOperationRoute_descriptor_, &AckPostOperationRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOperationRoutes_descriptor_, &RequestOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestOperationRoutes_descriptor_, &AckRequestOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUploadOperationRoutes_descriptor_, &RequestUploadOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestUploadOperationRoutes_descriptor_, &AckRequestUploadOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadOperationRoutes_descriptor_, &UploadOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUploadOperationRoutes_descriptor_, &AckUploadOperationRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRouteMissions_descriptor_, &RequestRouteMissions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestRouteMissions_descriptor_, &AckRequestRouteMissions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UavStatus_descriptor_, &UavStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUavStatus_descriptor_, &RequestUavStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestUavStatus_descriptor_, &AckRequestUavStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindUav_descriptor_, &RequestBindUav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestBindUav_descriptor_, &AckRequestBindUav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UavProductInfo_descriptor_, &UavProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUavProductInfos_descriptor_, &RequestUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequestUavProductInfos_descriptor_, &AckRequestUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncUavProductInfos_descriptor_, &SyncUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSyncUavProductInfos_descriptor_, &AckSyncUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostUavProductInfos_descriptor_, &PostUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostUavProductInfos_descriptor_, &AckPostUavProductInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostControl2Uav_descriptor_, &PostControl2Uav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostControl2Uav_descriptor_, &AckPostControl2Uav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostStatus2GroundStation_descriptor_, &PostStatus2GroundStation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_das_2eproto() {
  delete PostHeartBeat::default_instance_;
  delete PostHeartBeat_reflection_;
  delete AckHeartBeat::default_instance_;
  delete AckHeartBeat_reflection_;
  delete ParameterDescription::default_instance_;
  delete ParameterDescription_reflection_;
  delete QueryParameters::default_instance_;
  delete QueryParameters_reflection_;
  delete AckQueryParameters::default_instance_;
  delete AckQueryParameters_reflection_;
  delete ConfigureParameters::default_instance_;
  delete ConfigureParameters_reflection_;
  delete AckConfigurParameters::default_instance_;
  delete AckConfigurParameters_reflection_;
  delete ReportDeviceException::default_instance_;
  delete ReportDeviceException_reflection_;
  delete AckReportDeviceException::default_instance_;
  delete AckReportDeviceException_reflection_;
  delete UpdateDeviceList::default_instance_;
  delete UpdateDeviceList_reflection_;
  delete AckUpdateDeviceList::default_instance_;
  delete AckUpdateDeviceList_reflection_;
  delete SyncDeviceList::default_instance_;
  delete SyncDeviceList_reflection_;
  delete AckSyncDeviceList::default_instance_;
  delete AckSyncDeviceList_reflection_;
  delete KickoutDevice::default_instance_;
  delete KickoutDevice_reflection_;
  delete AckKickoutDevice::default_instance_;
  delete AckKickoutDevice_reflection_;
  delete RequestIdentityAllocation::default_instance_;
  delete RequestIdentityAllocation_reflection_;
  delete AckIdentityAllocation::default_instance_;
  delete AckIdentityAllocation_reflection_;
  delete RequestProgramUpgrade::default_instance_;
  delete RequestProgramUpgrade_reflection_;
  delete AckProgramUpgrade::default_instance_;
  delete AckProgramUpgrade_reflection_;
  delete RequestProgramDownload::default_instance_;
  delete RequestProgramDownload_reflection_;
  delete AckProgramDownload::default_instance_;
  delete AckProgramDownload_reflection_;
  delete RequestPositionAuthentication::default_instance_;
  delete RequestPositionAuthentication_reflection_;
  delete AckPositionAuthentication::default_instance_;
  delete AckPositionAuthentication_reflection_;
  delete Request3rdIdentityAuthentication::default_instance_;
  delete Request3rdIdentityAuthentication_reflection_;
  delete Ack3rdIdentityAuthentication::default_instance_;
  delete Ack3rdIdentityAuthentication_reflection_;
  delete RequestUavIdentityAuthentication::default_instance_;
  delete RequestUavIdentityAuthentication_reflection_;
  delete AckUavIdentityAuthentication::default_instance_;
  delete AckUavIdentityAuthentication_reflection_;
  delete RequestTrackerIdentityAuthentication::default_instance_;
  delete RequestTrackerIdentityAuthentication_reflection_;
  delete AckTrackerIdentityAuthentication::default_instance_;
  delete AckTrackerIdentityAuthentication_reflection_;
  delete RequestGVIdentityAuthentication::default_instance_;
  delete RequestGVIdentityAuthentication_reflection_;
  delete AckGVIdentityAuthentication::default_instance_;
  delete AckGVIdentityAuthentication_reflection_;
  delete RequestGSIdentityAuthentication::default_instance_;
  delete RequestGSIdentityAuthentication_reflection_;
  delete AckGSIdentityAuthentication::default_instance_;
  delete AckGSIdentityAuthentication_reflection_;
  delete RequestIVIdentityAuthentication::default_instance_;
  delete RequestIVIdentityAuthentication_reflection_;
  delete AckIVIdentityAuthentication::default_instance_;
  delete AckIVIdentityAuthentication_reflection_;
  delete RequestQQBotIdentityAuthentication::default_instance_;
  delete RequestQQBotIdentityAuthentication_reflection_;
  delete AckQQBotIdentityAuthentication::default_instance_;
  delete AckQQBotIdentityAuthentication_reflection_;
  delete GpsInformation::default_instance_;
  delete GpsInformation_reflection_;
  delete UavAttitude::default_instance_;
  delete UavAttitude_reflection_;
  delete OperationStatus::default_instance_;
  delete OperationStatus_reflection_;
  delete OperationParams::default_instance_;
  delete OperationParams_reflection_;
  delete OperationInformation::default_instance_;
  delete OperationInformation_reflection_;
  delete PostOperationInformation::default_instance_;
  delete PostOperationInformation_reflection_;
  delete AckOperationInformation::default_instance_;
  delete AckOperationInformation_reflection_;
  delete Coordinate::default_instance_;
  delete Coordinate_reflection_;
  delete OperationSnapshot::default_instance_;
  delete OperationSnapshot_reflection_;
  delete PostOperationSnapshot::default_instance_;
  delete PostOperationSnapshot_reflection_;
  delete AckPostOperationSnapshot::default_instance_;
  delete AckPostOperationSnapshot_reflection_;
  delete Outline::default_instance_;
  delete Outline_reflection_;
  delete ParcelSurveyInformation::default_instance_;
  delete ParcelSurveyInformation_reflection_;
  delete PostParcelSurveyInformation::default_instance_;
  delete PostParcelSurveyInformation_reflection_;
  delete AckPostParcelSurveyInformation::default_instance_;
  delete AckPostParcelSurveyInformation_reflection_;
  delete RequestParcelSurveyInformations::default_instance_;
  delete RequestParcelSurveyInformations_reflection_;
  delete AckRequestParcelSurveyInformations::default_instance_;
  delete AckRequestParcelSurveyInformations_reflection_;
  delete ParcelContracter::default_instance_;
  delete ParcelContracter_reflection_;
  delete ParcelDescription::default_instance_;
  delete ParcelDescription_reflection_;
  delete PostParcelDescription::default_instance_;
  delete PostParcelDescription_reflection_;
  delete AckPostParcelDescription::default_instance_;
  delete AckPostParcelDescription_reflection_;
  delete RequestParcelDescriptions::default_instance_;
  delete RequestParcelDescriptions_reflection_;
  delete AckRequestParcelDescriptions::default_instance_;
  delete AckRequestParcelDescriptions_reflection_;
  delete DeleteParcelDescription::default_instance_;
  delete DeleteParcelDescription_reflection_;
  delete AckDeleteParcelDescription::default_instance_;
  delete AckDeleteParcelDescription_reflection_;
  delete SyncParcelDescriptions::default_instance_;
  delete SyncParcelDescriptions_reflection_;
  delete AckSyncParcelDescriptions::default_instance_;
  delete AckSyncParcelDescriptions_reflection_;
  delete CropInformation::default_instance_;
  delete CropInformation_reflection_;
  delete PesticideInformation::default_instance_;
  delete PesticideInformation_reflection_;
  delete BillInformation::default_instance_;
  delete BillInformation_reflection_;
  delete DeviceInformation::default_instance_;
  delete DeviceInformation_reflection_;
  delete OperationDescription::default_instance_;
  delete OperationDescription_reflection_;
  delete PostOperationDescription::default_instance_;
  delete PostOperationDescription_reflection_;
  delete AckPostOperationDescription::default_instance_;
  delete AckPostOperationDescription_reflection_;
  delete RequestOperationDescriptions::default_instance_;
  delete RequestOperationDescriptions_reflection_;
  delete AckRequestOperationDescriptions::default_instance_;
  delete AckRequestOperationDescriptions_reflection_;
  delete DeleteOperationDescription::default_instance_;
  delete DeleteOperationDescription_reflection_;
  delete AckDeleteOperationDescription::default_instance_;
  delete AckDeleteOperationDescription_reflection_;
  delete SyncOperationDescriptions::default_instance_;
  delete SyncOperationDescriptions_reflection_;
  delete AckSyncOperationDescriptions::default_instance_;
  delete AckSyncOperationDescriptions_reflection_;
  delete OperationRoute::default_instance_;
  delete OperationRoute_reflection_;
  delete PostOperationRoute::default_instance_;
  delete PostOperationRoute_reflection_;
  delete AckPostOperationRoute::default_instance_;
  delete AckPostOperationRoute_reflection_;
  delete RequestOperationRoutes::default_instance_;
  delete RequestOperationRoutes_reflection_;
  delete AckRequestOperationRoutes::default_instance_;
  delete AckRequestOperationRoutes_reflection_;
  delete RequestUploadOperationRoutes::default_instance_;
  delete RequestUploadOperationRoutes_reflection_;
  delete AckRequestUploadOperationRoutes::default_instance_;
  delete AckRequestUploadOperationRoutes_reflection_;
  delete UploadOperationRoutes::default_instance_;
  delete UploadOperationRoutes_reflection_;
  delete AckUploadOperationRoutes::default_instance_;
  delete AckUploadOperationRoutes_reflection_;
  delete RequestRouteMissions::default_instance_;
  delete RequestRouteMissions_reflection_;
  delete AckRequestRouteMissions::default_instance_;
  delete AckRequestRouteMissions_reflection_;
  delete UavStatus::default_instance_;
  delete UavStatus_reflection_;
  delete RequestUavStatus::default_instance_;
  delete RequestUavStatus_reflection_;
  delete AckRequestUavStatus::default_instance_;
  delete AckRequestUavStatus_reflection_;
  delete RequestBindUav::default_instance_;
  delete RequestBindUav_reflection_;
  delete AckRequestBindUav::default_instance_;
  delete AckRequestBindUav_reflection_;
  delete UavProductInfo::default_instance_;
  delete UavProductInfo_reflection_;
  delete RequestUavProductInfos::default_instance_;
  delete RequestUavProductInfos_reflection_;
  delete AckRequestUavProductInfos::default_instance_;
  delete AckRequestUavProductInfos_reflection_;
  delete SyncUavProductInfos::default_instance_;
  delete SyncUavProductInfos_reflection_;
  delete AckSyncUavProductInfos::default_instance_;
  delete AckSyncUavProductInfos_reflection_;
  delete PostUavProductInfos::default_instance_;
  delete PostUavProductInfos_reflection_;
  delete AckPostUavProductInfos::default_instance_;
  delete AckPostUavProductInfos_reflection_;
  delete PostControl2Uav::default_instance_;
  delete PostControl2Uav_reflection_;
  delete AckPostControl2Uav::default_instance_;
  delete AckPostControl2Uav_reflection_;
  delete PostStatus2GroundStation::default_instance_;
  delete PostStatus2GroundStation_reflection_;
}

void protobuf_AddDesc_das_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdas.proto\022\tdas.proto\"*\n\rPostHeartBeat\022"
    "\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \001(\t\"\035\n\014AckHeartBe"
    "at\022\r\n\005seqno\030\001 \002(\r\"S\n\024ParameterDescriptio"
    "n\022\014\n\004name\030\001 \002(\t\022\020\n\010readonly\030\002 \002(\010\022\014\n\004typ"
    "e\030\003 \002(\r\022\r\n\005value\030\004 \002(\t\",\n\017QueryParameter"
    "s\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \002(\t\"l\n\022AckQuery"
    "Parameters\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \002(\t\022\016\n"
    "\006result\030\003 \002(\005\022+\n\002pd\030\004 \003(\0132\037.das.proto.Pa"
    "rameterDescription\"]\n\023ConfigureParameter"
    "s\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \002(\t\022+\n\002pd\030\003 \003(\013"
    "2\037.das.proto.ParameterDescription\"B\n\025Ack"
    "ConfigurParameters\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030"
    "\002 \002(\t\022\016\n\006result\030\003 \002(\005\"@\n\025ReportDeviceExc"
    "eption\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \002(\t\022\014\n\004des"
    "c\030\003 \003(\t\"9\n\030AckReportDeviceException\022\r\n\005s"
    "eqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"@\n\020UpdateDevi"
    "ceList\022\r\n\005seqno\030\001 \002(\r\022\021\n\toperation\030\002 \002(\r"
    "\022\n\n\002id\030\003 \003(\t\"4\n\023AckUpdateDeviceList\022\r\n\005s"
    "eqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"\037\n\016SyncDevice"
    "List\022\r\n\005seqno\030\001 \002(\r\">\n\021AckSyncDeviceList"
    "\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\n\n\002id\030\003 "
    "\003(\t\"-\n\rKickoutDevice\022\r\n\005seqno\030\001 \002(\r\022\r\n\005d"
    "evid\030\002 \002(\t\"1\n\020AckKickoutDevice\022\r\n\005seqno\030"
    "\001 \002(\r\022\016\n\006result\030\002 \002(\005\"N\n\031RequestIdentity"
    "Allocation\022\r\n\005seqno\030\001 \002(\r\022\017\n\007devtype\030\002 \002"
    "(\t\022\021\n\textradata\030\003 \001(\t\"U\n\025AckIdentityAllo"
    "cation\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\n\n"
    "\002id\030\003 \001(\t\022\021\n\textradata\030\004 \001(\t\"]\n\025RequestP"
    "rogramUpgrade\022\r\n\005seqno\030\001 \002(\r\022\020\n\010hardware"
    "\030\002 \002(\t\022\020\n\010software\030\003 \002(\t\022\021\n\textradata\030\004 "
    "\001(\t\"w\n\021AckProgramUpgrade\022\r\n\005seqno\030\001 \002(\r\022"
    "\016\n\006result\030\002 \002(\005\022\020\n\010software\030\003 \002(\t\022\016\n\006len"
    "gth\030\004 \002(\005\022\016\n\006forced\030\005 \002(\010\022\021\n\textradata\030\006"
    " \001(\t\"l\n\026RequestProgramDownload\022\r\n\005seqno\030"
    "\001 \002(\r\022\020\n\010software\030\002 \002(\t\022\016\n\006offset\030\003 \002(\005\022"
    "\016\n\006length\030\004 \002(\005\022\021\n\textradata\030\005 \001(\t\"\225\001\n\022A"
    "ckProgramDownload\022\r\n\005seqno\030\001 \002(\r\022\016\n\006resu"
    "lt\030\002 \002(\005\022\020\n\010software\030\003 \002(\t\022\016\n\006offset\030\004 \002"
    "(\005\022\016\n\006length\030\005 \002(\005\022\014\n\004data\030\006 \001(\014\022\r\n\005crc3"
    "2\030\007 \001(\r\022\021\n\textradata\030\010 \001(\t\"e\n\035RequestPos"
    "itionAuthentication\022\r\n\005seqno\030\001 \002(\r\022\r\n\005de"
    "vid\030\002 \002(\t\022&\n\003pos\030\003 \002(\0132\031.das.proto.GpsIn"
    "formation\"I\n\031AckPositionAuthentication\022\r"
    "\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\r\n\005devid\030\003"
    " \001(\t\"o\n Request3rdIdentityAuthentication"
    "\022\r\n\005seqno\030\001 \002(\r\022\026\n\016identification\030\002 \002(\t\022"
    "\021\n\tsecretkey\030\003 \002(\t\022\021\n\textradata\030\004 \001(\t\"P\n"
    "\034Ack3rdIdentityAuthentication\022\r\n\005seqno\030\001"
    " \002(\r\022\016\n\006result\030\002 \002(\005\022\021\n\textradata\030\003 \001(\t\""
    "S\n RequestUavIdentityAuthentication\022\r\n\005s"
    "eqno\030\001 \002(\r\022\r\n\005uavid\030\002 \002(\t\022\021\n\textradata\030\003"
    " \001(\t\"q\n\034AckUavIdentityAuthentication\022\r\n\005"
    "seqno\030\001 \002(\r\022\r\n\005uavid\030\002 \001(\t\022\016\n\006result\030\003 \002"
    "(\005\022\020\n\010deadline\030\004 \001(\004\022\021\n\textradata\030\005 \001(\t\""
    "[\n$RequestTrackerIdentityAuthentication\022"
    "\r\n\005seqno\030\001 \002(\r\022\021\n\ttrackerid\030\002 \002(\t\022\021\n\text"
    "radata\030\003 \001(\t\"T\n AckTrackerIdentityAuthen"
    "tication\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022"
    "\021\n\textradata\030\003 \001(\t\"e\n\037RequestGVIdentityA"
    "uthentication\022\r\n\005seqno\030\001 \002(\r\022\016\n\006userid\030\002"
    " \002(\t\022\020\n\010password\030\003 \002(\t\022\021\n\textradata\030\004 \001("
    "\t\"O\n\033AckGVIdentityAuthentication\022\r\n\005seqn"
    "o\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\021\n\textradata\030\003 \001"
    "(\t\"e\n\037RequestGSIdentityAuthentication\022\r\n"
    "\005seqno\030\001 \002(\r\022\016\n\006userid\030\002 \002(\t\022\020\n\010password"
    "\030\003 \002(\t\022\021\n\textradata\030\004 \001(\t\"O\n\033AckGSIdenti"
    "tyAuthentication\022\r\n\005seqno\030\001 \002(\r\022\016\n\006resul"
    "t\030\002 \002(\005\022\021\n\textradata\030\003 \001(\t\"e\n\037RequestIVI"
    "dentityAuthentication\022\r\n\005seqno\030\001 \002(\r\022\016\n\006"
    "userid\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\021\n\textrad"
    "ata\030\004 \001(\t\"O\n\033AckIVIdentityAuthentication"
    "\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\021\n\textra"
    "data\030\003 \001(\t\"h\n\"RequestQQBotIdentityAuthen"
    "tication\022\r\n\005seqno\030\001 \002(\r\022\016\n\006userid\030\002 \002(\t\022"
    "\020\n\010password\030\003 \002(\t\022\021\n\textradata\030\004 \001(\t\"R\n\036"
    "AckQQBotIdentityAuthentication\022\r\n\005seqno\030"
    "\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\021\n\textradata\030\003 \001(\t"
    "\"Y\n\016GpsInformation\022\021\n\tlongitude\030\001 \002(\005\022\020\n"
    "\010latitude\030\002 \002(\005\022\020\n\010altitude\030\003 \002(\005\022\020\n\010vel"
    "ocity\030\004 \003(\002\"b\n\013UavAttitude\022\014\n\004roll\030\001 \002(\002"
    "\022\r\n\005pitch\030\002 \002(\002\022\013\n\003yaw\030\003 \002(\002\022\024\n\014relative"
    "_alt\030\004 \002(\002\022\023\n\013groundspeed\030\005 \002(\002\"z\n\017Opera"
    "tionStatus\022\025\n\roperationmode\030\001 \001(\t\022\017\n\007vol"
    "tage\030\002 \001(\002\022\025\n\rsurplusenergy\030\003 \001(\002\022\023\n\013jet"
    "velocity\030\004 \001(\002\022\023\n\013sprayeddose\030\005 \001(\002\"\230\001\n\017"
    "OperationParams\022\024\n\014alarmvoltage\030\001 \001(\002\022\021\n"
    "\talarmdose\030\002 \001(\002\022\025\n\rsprayingwidth\030\003 \001(\002\022"
    "\027\n\017desiredaltitude\030\004 \001(\002\022\027\n\017desiredveloc"
    "ity\030\005 \001(\002\022\023\n\013jetvelocity\030\006 \001(\002\"\342\001\n\024Opera"
    "tionInformation\022\r\n\005uavid\030\001 \002(\t\022\021\n\ttimest"
    "amp\030\002 \002(\004\022&\n\003gps\030\003 \002(\0132\031.das.proto.GpsIn"
    "formation\022*\n\006status\030\004 \001(\0132\032.das.proto.Op"
    "erationStatus\022*\n\006params\030\005 \001(\0132\032.das.prot"
    "o.OperationParams\022(\n\010attitude\030\006 \001(\0132\026.da"
    "s.proto.UavAttitude\"V\n\030PostOperationInfo"
    "rmation\022\r\n\005seqno\030\001 \002(\r\022+\n\002oi\030\002 \003(\0132\037.das"
    ".proto.OperationInformation\"8\n\027AckOperat"
    "ionInformation\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030"
    "\002 \002(\005\"C\n\nCoordinate\022\021\n\tlongitude\030\001 \002(\005\022\020"
    "\n\010latitude\030\002 \002(\005\022\020\n\010altitude\030\003 \001(\005\"t\n\021Op"
    "erationSnapshot\022\r\n\005devid\030\001 \002(\t\022\021\n\ttimest"
    "amp\030\002 \002(\004\022\"\n\003pos\030\003 \001(\0132\025.das.proto.Coord"
    "inate\022\014\n\004size\030\004 \001(\005\022\013\n\003pic\030\005 \002(\014\"P\n\025Post"
    "OperationSnapshot\022\r\n\005seqno\030\001 \002(\r\022(\n\002os\030\002"
    " \002(\0132\034.das.proto.OperationSnapshot\"9\n\030Ac"
    "kPostOperationSnapshot\022\r\n\005seqno\030\001 \002(\r\022\016\n"
    "\006result\030\002 \002(\005\"5\n\007Outline\022*\n\013coordinates\030"
    "\001 \003(\0132\025.das.proto.Coordinate\"\270\001\n\027ParcelS"
    "urveyInformation\022\023\n\013surveryorid\030\001 \002(\t\022\023\n"
    "\013surverytime\030\002 \002(\004\022\'\n\002sp\030\003 \002(\0162\033.das.pro"
    "to.SurveryPrecision\022\036\n\002po\030\004 \002(\0132\022.das.pr"
    "oto.Outline\022\036\n\002bo\030\005 \003(\0132\022.das.proto.Outl"
    "ine\022\n\n\002id\030\006 \001(\t\"]\n\033PostParcelSurveyInfor"
    "mation\022\r\n\005seqno\030\001 \002(\r\022/\n\003psi\030\002 \002(\0132\".das"
    ".proto.ParcelSurveyInformation\"N\n\036AckPos"
    "tParcelSurveyInformation\022\r\n\005seqno\030\001 \002(\r\022"
    "\016\n\006result\030\002 \002(\005\022\r\n\005psiid\030\003 \001(\t\"j\n\037Reques"
    "tParcelSurveyInformations\022\r\n\005seqno\030\001 \002(\r"
    "\022\r\n\005psiid\030\002 \001(\t\022)\n\ncoordinate\030\003 \001(\0132\025.da"
    "s.proto.Coordinate\"u\n\"AckRequestParcelSu"
    "rveyInformations\022\r\n\005seqno\030\001 \002(\r\022\016\n\006resul"
    "t\030\002 \002(\005\0220\n\004psis\030\003 \003(\0132\".das.proto.Parcel"
    "SurveyInformation\"\203\001\n\020ParcelContracter\022\014"
    "\n\004name\030\001 \002(\t\022\021\n\tbirthdate\030\002 \002(\004\022\017\n\007addre"
    "ss\030\003 \002(\t\022\020\n\010mobileno\030\004 \002(\t\022\017\n\007phoneno\030\005 "
    "\001(\t\022\016\n\006weixin\030\006 \001(\t\022\n\n\002id\030\007 \001(\t\"\346\001\n\021Parc"
    "elDescription\022\014\n\004name\030\001 \002(\t\022\022\n\nregisteri"
    "d\030\002 \002(\t\022\'\n\002pc\030\003 \002(\0132\033.das.proto.ParcelCo"
    "ntracter\022\017\n\007acreage\030\004 \002(\002\022\r\n\005psiid\030\005 \001(\t"
    "\022/\n\003psi\030\006 \001(\0132\".das.proto.ParcelSurveyIn"
    "formation\022)\n\ncoordinate\030\007 \001(\0132\025.das.prot"
    "o.Coordinate\022\n\n\002id\030\010 \001(\t\"P\n\025PostParcelDe"
    "scription\022\r\n\005seqno\030\001 \002(\r\022(\n\002pd\030\002 \002(\0132\034.d"
    "as.proto.ParcelDescription\"d\n\030AckPostPar"
    "celDescription\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030"
    "\002 \002(\005\022\014\n\004pcid\030\003 \001(\t\022\r\n\005psiid\030\004 \001(\t\022\014\n\004pd"
    "id\030\005 \001(\t\"\231\002\n\031RequestParcelDescriptions\022\r"
    "\n\005seqno\030\001 \002(\r\022\014\n\004pdid\030\002 \001(\t\022)\n\ncoordinat"
    "e\030\003 \001(\0132\025.das.proto.Coordinate\022\025\n\rsurver"
    "yorname\030\004 \001(\t\022\023\n\013surveryorid\030\005 \001(\t\022\024\n\014re"
    "gistername\030\006 \001(\t\022\022\n\nregisterid\030\007 \001(\t\022\022\n\n"
    "parcelname\030\010 \001(\t\022\022\n\ncontracter\030\t \001(\t\022\020\n\010"
    "mobileno\030\n \001(\t\022$\n\005zones\030\013 \003(\0132\025.das.prot"
    "o.Coordinate\"h\n\034AckRequestParcelDescript"
    "ions\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022)\n\003p"
    "ds\030\003 \003(\0132\034.das.proto.ParcelDescription\"U"
    "\n\027DeleteParcelDescription\022\r\n\005seqno\030\001 \002(\r"
    "\022\014\n\004pdid\030\002 \002(\t\022\016\n\006delpsi\030\003 \001(\010\022\r\n\005delpc\030"
    "\004 \001(\010\";\n\032AckDeleteParcelDescription\022\r\n\005s"
    "eqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"\'\n\026SyncParcel"
    "Descriptions\022\r\n\005seqno\030\001 \002(\r\":\n\031AckSyncPa"
    "rcelDescriptions\022\r\n\005seqno\030\001 \002(\r\022\016\n\006resul"
    "t\030\002 \002(\005\"-\n\017CropInformation\022\014\n\004name\030\001 \002(\t"
    "\022\014\n\004cdid\030\002 \001(\t\"2\n\024PesticideInformation\022\014"
    "\n\004name\030\001 \002(\t\022\014\n\004pdid\030\002 \001(\t\"i\n\017BillInform"
    "ation\022\025\n\rservicecharge\030\001 \001(\002\022\027\n\017pesticid"
    "echarge\030\002 \001(\002\022\023\n\013othercharge\030\003 \001(\002\022\021\n\tsu"
    "mcharge\030\004 \002(\002\"/\n\021DeviceInformation\022\014\n\004na"
    "me\030\001 \001(\t\022\014\n\004diid\030\002 \001(\t\"\336\002\n\024OperationDesc"
    "ription\022\021\n\tchargerid\030\001 \002(\t\022\022\n\nregisterid"
    "\030\002 \002(\t\022\022\n\noperatorid\030\003 \003(\t\022\021\n\tbegintime\030"
    "\004 \001(\004\022\017\n\007endtime\030\005 \001(\004\022\025\n\roperationtype\030"
    "\006 \002(\t\022&\n\002ci\030\007 \001(\0132\032.das.proto.CropInform"
    "ation\022+\n\002pi\030\010 \003(\0132\037.das.proto.PesticideI"
    "nformation\022&\n\002bi\030\t \002(\0132\032.das.proto.BillI"
    "nformation\022(\n\002di\030\n \003(\0132\034.das.proto.Devic"
    "eInformation\022\r\n\005notes\030\013 \001(\t\022\014\n\004pdid\030\014 \002("
    "\t\022\014\n\004odid\030\r \001(\t\"V\n\030PostOperationDescript"
    "ion\022\r\n\005seqno\030\001 \002(\r\022+\n\002od\030\002 \002(\0132\037.das.pro"
    "to.OperationDescription\"J\n\033AckPostOperat"
    "ionDescription\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030"
    "\002 \002(\005\022\014\n\004odid\030\003 \001(\t\"\206\001\n\034RequestOperation"
    "Descriptions\022\r\n\005seqno\030\001 \002(\r\022\014\n\004odid\030\002 \001("
    "\t\022\014\n\004pdid\030\003 \001(\t\022\023\n\013chargemanid\030\004 \001(\t\022\022\n\n"
    "registerid\030\005 \001(\t\022\022\n\noperatorid\030\006 \001(\t\"n\n\037"
    "AckRequestOperationDescriptions\022\r\n\005seqno"
    "\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022,\n\003ods\030\003 \003(\0132\037.da"
    "s.proto.OperationDescription\"9\n\032DeleteOp"
    "erationDescription\022\r\n\005seqno\030\001 \002(\r\022\014\n\004odi"
    "d\030\002 \002(\t\">\n\035AckDeleteOperationDescription"
    "\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"*\n\031SyncO"
    "perationDescriptions\022\r\n\005seqno\030\001 \002(\r\"=\n\034A"
    "ckSyncOperationDescriptions\022\r\n\005seqno\030\001 \002"
    "(\r\022\016\n\006result\030\002 \002(\005\"\240\002\n\016OperationRoute\022\021\n"
    "\tcreatorid\030\001 \002(\t\022\022\n\ncreatetime\030\002 \002(\004\022\014\n\004"
    "odid\030\003 \001(\t\022/\n\003fsz\030\004 \001(\0132\".das.proto.Parc"
    "elSurveyInformation\022/\n\003psi\030\005 \002(\0132\".das.p"
    "roto.ParcelSurveyInformation\022\027\n\017sprinkli"
    "ngwidth\030\006 \002(\002\022\021\n\tmaxvoyage\030\007 \002(\002\022+\n\014supp"
    "lypoints\030\010 \003(\0132\025.das.proto.Coordinate\022\020\n"
    "\010missions\030\t \003(\014\022\014\n\004orid\030\n \001(\t\"J\n\022PostOpe"
    "rationRoute\022\r\n\005seqno\030\001 \002(\r\022%\n\002or\030\002 \002(\0132\031"
    ".das.proto.OperationRoute\"b\n\025AckPostOper"
    "ationRoute\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002("
    "\005\022\014\n\004orid\030\003 \001(\t\022\r\n\005fszid\030\004 \001(\t\022\r\n\005psiid\030"
    "\005 \001(\t\"|\n\026RequestOperationRoutes\022\r\n\005seqno"
    "\030\001 \002(\r\022\014\n\004orid\030\002 \001(\t\022\014\n\004odid\030\003 \001(\t\022\014\n\004pd"
    "id\030\004 \001(\t\022)\n\ncoordinate\030\005 \001(\0132\025.das.proto"
    ".Coordinate\"b\n\031AckRequestOperationRoutes"
    "\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022&\n\003ors\030\003"
    " \003(\0132\031.das.proto.OperationRoute\"J\n\034Reque"
    "stUploadOperationRoutes\022\r\n\005seqno\030\001 \002(\r\022\r"
    "\n\005uavid\030\002 \002(\t\022\014\n\004orid\030\003 \002(\t\"{\n\037AckReques"
    "tUploadOperationRoutes\022\r\n\005seqno\030\001 \002(\r\022\016\n"
    "\006result\030\002 \002(\005\022\r\n\005uavid\030\003 \002(\t\022\014\n\004orid\030\004 \002"
    "(\t\022\r\n\005index\030\005 \001(\005\022\r\n\005count\030\006 \001(\005\"u\n\025Uplo"
    "adOperationRoutes\022\r\n\005seqno\030\001 \002(\r\022\r\n\005uavi"
    "d\030\002 \002(\t\022\014\n\004orid\030\003 \002(\t\022\016\n\006userid\030\004 \002(\t\022\021\n"
    "\ttimestamp\030\005 \002(\004\022\r\n\005count\030\006 \002(\005\"y\n\030AckUp"
    "loadOperationRoutes\022\r\n\005seqno\030\001 \002(\r\022\016\n\006re"
    "sult\030\002 \002(\005\022\r\n\005uavid\030\003 \002(\t\022\014\n\004orid\030\004 \002(\t\022"
    "\016\n\006userid\030\005 \002(\t\022\021\n\ttimestamp\030\006 \002(\004\"\204\001\n\024R"
    "equestRouteMissions\022\r\n\005seqno\030\001 \002(\r\022\r\n\005ua"
    "vid\030\002 \002(\t\022\014\n\004orid\030\003 \002(\t\022\016\n\006userid\030\004 \002(\t\022"
    "\021\n\ttimestamp\030\005 \002(\004\022\016\n\006offset\030\006 \002(\005\022\r\n\005co"
    "unt\030\007 \002(\005\"\232\001\n\027AckRequestRouteMissions\022\r\n"
    "\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\r\n\005uavid\030\003 "
    "\002(\t\022\014\n\004orid\030\004 \002(\t\022\016\n\006userid\030\005 \002(\t\022\021\n\ttim"
    "estamp\030\006 \002(\004\022\016\n\006offset\030\007 \002(\005\022\020\n\010missions"
    "\030\010 \003(\014\"\335\001\n\tUavStatus\022\r\n\005uavid\030\001 \002(\t\022\016\n\006r"
    "esult\030\002 \002(\005\022\016\n\006online\030\003 \001(\010\022\016\n\006landed\030\004 "
    "\001(\010\022\020\n\010deadline\030\005 \001(\004\022\016\n\006binded\030\006 \001(\010\022\016\n"
    "\006binder\030\007 \001(\t\022\020\n\010bindtime\030\010 \001(\004\022\022\n\nunbin"
    "dtime\030\t \001(\004\022&\n\003pos\030\n \001(\0132\031.das.proto.Gps"
    "Information\022\021\n\ttimestamp\030\013 \001(\004\"0\n\020Reques"
    "tUavStatus\022\r\n\005seqno\030\001 \002(\r\022\r\n\005uavid\030\002 \003(\t"
    "\"J\n\023AckRequestUavStatus\022\r\n\005seqno\030\001 \002(\r\022$"
    "\n\006status\030\002 \003(\0132\024.das.proto.UavStatus\"L\n\016"
    "RequestBindUav\022\r\n\005seqno\030\001 \002(\r\022\014\n\004opid\030\002 "
    "\002(\r\022\r\n\005uavid\030\003 \002(\t\022\016\n\006binder\030\004 \002(\t\"f\n\021Ac"
    "kRequestBindUav\022\r\n\005seqno\030\001 \002(\r\022\014\n\004opid\030\002"
    " \002(\r\022\016\n\006result\030\003 \002(\005\022$\n\006status\030\004 \001(\0132\024.d"
    "as.proto.UavStatus\"\177\n\016UavProductInfo\022\r\n\005"
    "uavid\030\001 \001(\t\022\023\n\013producttype\030\002 \001(\t\022\021\n\tprod"
    "uctid\030\003 \001(\t\022\024\n\014organization\030\004 \001(\t\022\017\n\007man"
    "ager\030\005 \001(\t\022\017\n\007contact\030\006 \001(\t\"I\n\026RequestUa"
    "vProductInfos\022\r\n\005seqno\030\001 \002(\r\022\021\n\tproducti"
    "d\030\002 \003(\t\022\r\n\005uavid\030\003 \003(\t\"b\n\031AckRequestUavP"
    "roductInfos\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002"
    "(\005\022&\n\003upi\030\003 \003(\0132\031.das.proto.UavProductIn"
    "fo\"$\n\023SyncUavProductInfos\022\r\n\005seqno\030\001 \002(\r"
    "\"7\n\026AckSyncUavProductInfos\022\r\n\005seqno\030\001 \002("
    "\r\022\016\n\006result\030\002 \002(\005\"L\n\023PostUavProductInfos"
    "\022\r\n\005seqno\030\001 \002(\r\022&\n\003upi\030\002 \003(\0132\031.das.proto"
    ".UavProductInfo\"7\n\026AckPostUavProductInfo"
    "s\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"M\n\017Post"
    "Control2Uav\022\r\n\005seqno\030\001 \002(\r\022\r\n\005uavid\030\002 \002("
    "\t\022\016\n\006userid\030\003 \002(\t\022\014\n\004data\030\004 \003(\014\"R\n\022AckPo"
    "stControl2Uav\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002"
    " \002(\005\022\r\n\005uavid\030\003 \002(\t\022\016\n\006userid\030\004 \002(\t\"F\n\030P"
    "ostStatus2GroundStation\022\r\n\005seqno\030\001 \002(\r\022\r"
    "\n\005uavid\030\002 \002(\t\022\014\n\004data\030\003 \003(\014*1\n\020SurveryPr"
    "ecision\022\007\n\003LOW\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004HIGH\020\003", 10118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "das.proto", &protobuf_RegisterTypes);
  PostHeartBeat::default_instance_ = new PostHeartBeat();
  AckHeartBeat::default_instance_ = new AckHeartBeat();
  ParameterDescription::default_instance_ = new ParameterDescription();
  QueryParameters::default_instance_ = new QueryParameters();
  AckQueryParameters::default_instance_ = new AckQueryParameters();
  ConfigureParameters::default_instance_ = new ConfigureParameters();
  AckConfigurParameters::default_instance_ = new AckConfigurParameters();
  ReportDeviceException::default_instance_ = new ReportDeviceException();
  AckReportDeviceException::default_instance_ = new AckReportDeviceException();
  UpdateDeviceList::default_instance_ = new UpdateDeviceList();
  AckUpdateDeviceList::default_instance_ = new AckUpdateDeviceList();
  SyncDeviceList::default_instance_ = new SyncDeviceList();
  AckSyncDeviceList::default_instance_ = new AckSyncDeviceList();
  KickoutDevice::default_instance_ = new KickoutDevice();
  AckKickoutDevice::default_instance_ = new AckKickoutDevice();
  RequestIdentityAllocation::default_instance_ = new RequestIdentityAllocation();
  AckIdentityAllocation::default_instance_ = new AckIdentityAllocation();
  RequestProgramUpgrade::default_instance_ = new RequestProgramUpgrade();
  AckProgramUpgrade::default_instance_ = new AckProgramUpgrade();
  RequestProgramDownload::default_instance_ = new RequestProgramDownload();
  AckProgramDownload::default_instance_ = new AckProgramDownload();
  RequestPositionAuthentication::default_instance_ = new RequestPositionAuthentication();
  AckPositionAuthentication::default_instance_ = new AckPositionAuthentication();
  Request3rdIdentityAuthentication::default_instance_ = new Request3rdIdentityAuthentication();
  Ack3rdIdentityAuthentication::default_instance_ = new Ack3rdIdentityAuthentication();
  RequestUavIdentityAuthentication::default_instance_ = new RequestUavIdentityAuthentication();
  AckUavIdentityAuthentication::default_instance_ = new AckUavIdentityAuthentication();
  RequestTrackerIdentityAuthentication::default_instance_ = new RequestTrackerIdentityAuthentication();
  AckTrackerIdentityAuthentication::default_instance_ = new AckTrackerIdentityAuthentication();
  RequestGVIdentityAuthentication::default_instance_ = new RequestGVIdentityAuthentication();
  AckGVIdentityAuthentication::default_instance_ = new AckGVIdentityAuthentication();
  RequestGSIdentityAuthentication::default_instance_ = new RequestGSIdentityAuthentication();
  AckGSIdentityAuthentication::default_instance_ = new AckGSIdentityAuthentication();
  RequestIVIdentityAuthentication::default_instance_ = new RequestIVIdentityAuthentication();
  AckIVIdentityAuthentication::default_instance_ = new AckIVIdentityAuthentication();
  RequestQQBotIdentityAuthentication::default_instance_ = new RequestQQBotIdentityAuthentication();
  AckQQBotIdentityAuthentication::default_instance_ = new AckQQBotIdentityAuthentication();
  GpsInformation::default_instance_ = new GpsInformation();
  UavAttitude::default_instance_ = new UavAttitude();
  OperationStatus::default_instance_ = new OperationStatus();
  OperationParams::default_instance_ = new OperationParams();
  OperationInformation::default_instance_ = new OperationInformation();
  PostOperationInformation::default_instance_ = new PostOperationInformation();
  AckOperationInformation::default_instance_ = new AckOperationInformation();
  Coordinate::default_instance_ = new Coordinate();
  OperationSnapshot::default_instance_ = new OperationSnapshot();
  PostOperationSnapshot::default_instance_ = new PostOperationSnapshot();
  AckPostOperationSnapshot::default_instance_ = new AckPostOperationSnapshot();
  Outline::default_instance_ = new Outline();
  ParcelSurveyInformation::default_instance_ = new ParcelSurveyInformation();
  PostParcelSurveyInformation::default_instance_ = new PostParcelSurveyInformation();
  AckPostParcelSurveyInformation::default_instance_ = new AckPostParcelSurveyInformation();
  RequestParcelSurveyInformations::default_instance_ = new RequestParcelSurveyInformations();
  AckRequestParcelSurveyInformations::default_instance_ = new AckRequestParcelSurveyInformations();
  ParcelContracter::default_instance_ = new ParcelContracter();
  ParcelDescription::default_instance_ = new ParcelDescription();
  PostParcelDescription::default_instance_ = new PostParcelDescription();
  AckPostParcelDescription::default_instance_ = new AckPostParcelDescription();
  RequestParcelDescriptions::default_instance_ = new RequestParcelDescriptions();
  AckRequestParcelDescriptions::default_instance_ = new AckRequestParcelDescriptions();
  DeleteParcelDescription::default_instance_ = new DeleteParcelDescription();
  AckDeleteParcelDescription::default_instance_ = new AckDeleteParcelDescription();
  SyncParcelDescriptions::default_instance_ = new SyncParcelDescriptions();
  AckSyncParcelDescriptions::default_instance_ = new AckSyncParcelDescriptions();
  CropInformation::default_instance_ = new CropInformation();
  PesticideInformation::default_instance_ = new PesticideInformation();
  BillInformation::default_instance_ = new BillInformation();
  DeviceInformation::default_instance_ = new DeviceInformation();
  OperationDescription::default_instance_ = new OperationDescription();
  PostOperationDescription::default_instance_ = new PostOperationDescription();
  AckPostOperationDescription::default_instance_ = new AckPostOperationDescription();
  RequestOperationDescriptions::default_instance_ = new RequestOperationDescriptions();
  AckRequestOperationDescriptions::default_instance_ = new AckRequestOperationDescriptions();
  DeleteOperationDescription::default_instance_ = new DeleteOperationDescription();
  AckDeleteOperationDescription::default_instance_ = new AckDeleteOperationDescription();
  SyncOperationDescriptions::default_instance_ = new SyncOperationDescriptions();
  AckSyncOperationDescriptions::default_instance_ = new AckSyncOperationDescriptions();
  OperationRoute::default_instance_ = new OperationRoute();
  PostOperationRoute::default_instance_ = new PostOperationRoute();
  AckPostOperationRoute::default_instance_ = new AckPostOperationRoute();
  RequestOperationRoutes::default_instance_ = new RequestOperationRoutes();
  AckRequestOperationRoutes::default_instance_ = new AckRequestOperationRoutes();
  RequestUploadOperationRoutes::default_instance_ = new RequestUploadOperationRoutes();
  AckRequestUploadOperationRoutes::default_instance_ = new AckRequestUploadOperationRoutes();
  UploadOperationRoutes::default_instance_ = new UploadOperationRoutes();
  AckUploadOperationRoutes::default_instance_ = new AckUploadOperationRoutes();
  RequestRouteMissions::default_instance_ = new RequestRouteMissions();
  AckRequestRouteMissions::default_instance_ = new AckRequestRouteMissions();
  UavStatus::default_instance_ = new UavStatus();
  RequestUavStatus::default_instance_ = new RequestUavStatus();
  AckRequestUavStatus::default_instance_ = new AckRequestUavStatus();
  RequestBindUav::default_instance_ = new RequestBindUav();
  AckRequestBindUav::default_instance_ = new AckRequestBindUav();
  UavProductInfo::default_instance_ = new UavProductInfo();
  RequestUavProductInfos::default_instance_ = new RequestUavProductInfos();
  AckRequestUavProductInfos::default_instance_ = new AckRequestUavProductInfos();
  SyncUavProductInfos::default_instance_ = new SyncUavProductInfos();
  AckSyncUavProductInfos::default_instance_ = new AckSyncUavProductInfos();
  PostUavProductInfos::default_instance_ = new PostUavProductInfos();
  AckPostUavProductInfos::default_instance_ = new AckPostUavProductInfos();
  PostControl2Uav::default_instance_ = new PostControl2Uav();
  AckPostControl2Uav::default_instance_ = new AckPostControl2Uav();
  PostStatus2GroundStation::default_instance_ = new PostStatus2GroundStation();
  PostHeartBeat::default_instance_->InitAsDefaultInstance();
  AckHeartBeat::default_instance_->InitAsDefaultInstance();
  ParameterDescription::default_instance_->InitAsDefaultInstance();
  QueryParameters::default_instance_->InitAsDefaultInstance();
  AckQueryParameters::default_instance_->InitAsDefaultInstance();
  ConfigureParameters::default_instance_->InitAsDefaultInstance();
  AckConfigurParameters::default_instance_->InitAsDefaultInstance();
  ReportDeviceException::default_instance_->InitAsDefaultInstance();
  AckReportDeviceException::default_instance_->InitAsDefaultInstance();
  UpdateDeviceList::default_instance_->InitAsDefaultInstance();
  AckUpdateDeviceList::default_instance_->InitAsDefaultInstance();
  SyncDeviceList::default_instance_->InitAsDefaultInstance();
  AckSyncDeviceList::default_instance_->InitAsDefaultInstance();
  KickoutDevice::default_instance_->InitAsDefaultInstance();
  AckKickoutDevice::default_instance_->InitAsDefaultInstance();
  RequestIdentityAllocation::default_instance_->InitAsDefaultInstance();
  AckIdentityAllocation::default_instance_->InitAsDefaultInstance();
  RequestProgramUpgrade::default_instance_->InitAsDefaultInstance();
  AckProgramUpgrade::default_instance_->InitAsDefaultInstance();
  RequestProgramDownload::default_instance_->InitAsDefaultInstance();
  AckProgramDownload::default_instance_->InitAsDefaultInstance();
  RequestPositionAuthentication::default_instance_->InitAsDefaultInstance();
  AckPositionAuthentication::default_instance_->InitAsDefaultInstance();
  Request3rdIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  Ack3rdIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestUavIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckUavIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestTrackerIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckTrackerIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestGVIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckGVIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestGSIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckGSIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestIVIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckIVIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  RequestQQBotIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  AckQQBotIdentityAuthentication::default_instance_->InitAsDefaultInstance();
  GpsInformation::default_instance_->InitAsDefaultInstance();
  UavAttitude::default_instance_->InitAsDefaultInstance();
  OperationStatus::default_instance_->InitAsDefaultInstance();
  OperationParams::default_instance_->InitAsDefaultInstance();
  OperationInformation::default_instance_->InitAsDefaultInstance();
  PostOperationInformation::default_instance_->InitAsDefaultInstance();
  AckOperationInformation::default_instance_->InitAsDefaultInstance();
  Coordinate::default_instance_->InitAsDefaultInstance();
  OperationSnapshot::default_instance_->InitAsDefaultInstance();
  PostOperationSnapshot::default_instance_->InitAsDefaultInstance();
  AckPostOperationSnapshot::default_instance_->InitAsDefaultInstance();
  Outline::default_instance_->InitAsDefaultInstance();
  ParcelSurveyInformation::default_instance_->InitAsDefaultInstance();
  PostParcelSurveyInformation::default_instance_->InitAsDefaultInstance();
  AckPostParcelSurveyInformation::default_instance_->InitAsDefaultInstance();
  RequestParcelSurveyInformations::default_instance_->InitAsDefaultInstance();
  AckRequestParcelSurveyInformations::default_instance_->InitAsDefaultInstance();
  ParcelContracter::default_instance_->InitAsDefaultInstance();
  ParcelDescription::default_instance_->InitAsDefaultInstance();
  PostParcelDescription::default_instance_->InitAsDefaultInstance();
  AckPostParcelDescription::default_instance_->InitAsDefaultInstance();
  RequestParcelDescriptions::default_instance_->InitAsDefaultInstance();
  AckRequestParcelDescriptions::default_instance_->InitAsDefaultInstance();
  DeleteParcelDescription::default_instance_->InitAsDefaultInstance();
  AckDeleteParcelDescription::default_instance_->InitAsDefaultInstance();
  SyncParcelDescriptions::default_instance_->InitAsDefaultInstance();
  AckSyncParcelDescriptions::default_instance_->InitAsDefaultInstance();
  CropInformation::default_instance_->InitAsDefaultInstance();
  PesticideInformation::default_instance_->InitAsDefaultInstance();
  BillInformation::default_instance_->InitAsDefaultInstance();
  DeviceInformation::default_instance_->InitAsDefaultInstance();
  OperationDescription::default_instance_->InitAsDefaultInstance();
  PostOperationDescription::default_instance_->InitAsDefaultInstance();
  AckPostOperationDescription::default_instance_->InitAsDefaultInstance();
  RequestOperationDescriptions::default_instance_->InitAsDefaultInstance();
  AckRequestOperationDescriptions::default_instance_->InitAsDefaultInstance();
  DeleteOperationDescription::default_instance_->InitAsDefaultInstance();
  AckDeleteOperationDescription::default_instance_->InitAsDefaultInstance();
  SyncOperationDescriptions::default_instance_->InitAsDefaultInstance();
  AckSyncOperationDescriptions::default_instance_->InitAsDefaultInstance();
  OperationRoute::default_instance_->InitAsDefaultInstance();
  PostOperationRoute::default_instance_->InitAsDefaultInstance();
  AckPostOperationRoute::default_instance_->InitAsDefaultInstance();
  RequestOperationRoutes::default_instance_->InitAsDefaultInstance();
  AckRequestOperationRoutes::default_instance_->InitAsDefaultInstance();
  RequestUploadOperationRoutes::default_instance_->InitAsDefaultInstance();
  AckRequestUploadOperationRoutes::default_instance_->InitAsDefaultInstance();
  UploadOperationRoutes::default_instance_->InitAsDefaultInstance();
  AckUploadOperationRoutes::default_instance_->InitAsDefaultInstance();
  RequestRouteMissions::default_instance_->InitAsDefaultInstance();
  AckRequestRouteMissions::default_instance_->InitAsDefaultInstance();
  UavStatus::default_instance_->InitAsDefaultInstance();
  RequestUavStatus::default_instance_->InitAsDefaultInstance();
  AckRequestUavStatus::default_instance_->InitAsDefaultInstance();
  RequestBindUav::default_instance_->InitAsDefaultInstance();
  AckRequestBindUav::default_instance_->InitAsDefaultInstance();
  UavProductInfo::default_instance_->InitAsDefaultInstance();
  RequestUavProductInfos::default_instance_->InitAsDefaultInstance();
  AckRequestUavProductInfos::default_instance_->InitAsDefaultInstance();
  SyncUavProductInfos::default_instance_->InitAsDefaultInstance();
  AckSyncUavProductInfos::default_instance_->InitAsDefaultInstance();
  PostUavProductInfos::default_instance_->InitAsDefaultInstance();
  AckPostUavProductInfos::default_instance_->InitAsDefaultInstance();
  PostControl2Uav::default_instance_->InitAsDefaultInstance();
  AckPostControl2Uav::default_instance_->InitAsDefaultInstance();
  PostStatus2GroundStation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_das_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_das_2eproto {
  StaticDescriptorInitializer_das_2eproto() {
    protobuf_AddDesc_das_2eproto();
  }
} static_descriptor_initializer_das_2eproto_;
const ::google::protobuf::EnumDescriptor* SurveryPrecision_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurveryPrecision_descriptor_;
}
bool SurveryPrecision_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PostHeartBeat::kSeqnoFieldNumber;
const int PostHeartBeat::kIdFieldNumber;
#endif  // !_MSC_VER

PostHeartBeat::PostHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostHeartBeat::InitAsDefaultInstance() {
}

PostHeartBeat::PostHeartBeat(const PostHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostHeartBeat::~PostHeartBeat() {
  SharedDtor();
}

void PostHeartBeat::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void PostHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostHeartBeat_descriptor_;
}

const PostHeartBeat& PostHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostHeartBeat* PostHeartBeat::default_instance_ = NULL;

PostHeartBeat* PostHeartBeat::New() const {
  return new PostHeartBeat;
}

void PostHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostHeartBeat::MergeFrom(const PostHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostHeartBeat::CopyFrom(const PostHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PostHeartBeat::Swap(PostHeartBeat* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostHeartBeat_descriptor_;
  metadata.reflection = PostHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHeartBeat::kSeqnoFieldNumber;
#endif  // !_MSC_VER

AckHeartBeat::AckHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHeartBeat::InitAsDefaultInstance() {
}

AckHeartBeat::AckHeartBeat(const AckHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHeartBeat::~AckHeartBeat() {
  SharedDtor();
}

void AckHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHeartBeat_descriptor_;
}

const AckHeartBeat& AckHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckHeartBeat* AckHeartBeat::default_instance_ = NULL;

AckHeartBeat* AckHeartBeat::New() const {
  return new AckHeartBeat;
}

void AckHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHeartBeat::MergeFrom(const AckHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHeartBeat::CopyFrom(const AckHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckHeartBeat::Swap(AckHeartBeat* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHeartBeat_descriptor_;
  metadata.reflection = AckHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParameterDescription::kNameFieldNumber;
const int ParameterDescription::kReadonlyFieldNumber;
const int ParameterDescription::kTypeFieldNumber;
const int ParameterDescription::kValueFieldNumber;
#endif  // !_MSC_VER

ParameterDescription::ParameterDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParameterDescription::InitAsDefaultInstance() {
}

ParameterDescription::ParameterDescription(const ParameterDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParameterDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readonly_ = false;
  type_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterDescription::~ParameterDescription() {
  SharedDtor();
}

void ParameterDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ParameterDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterDescription_descriptor_;
}

const ParameterDescription& ParameterDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ParameterDescription* ParameterDescription::default_instance_ = NULL;

ParameterDescription* ParameterDescription::New() const {
  return new ParameterDescription;
}

void ParameterDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    readonly_ = false;
    type_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParameterDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readonly;
        break;
      }

      // required bool readonly = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
          set_has_readonly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParameterDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required bool readonly = 2;
  if (has_readonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->readonly(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParameterDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bool readonly = 2;
  if (has_readonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->readonly(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParameterDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool readonly = 2;
    if (has_readonly()) {
      total_size += 1 + 1;
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParameterDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParameterDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParameterDescription::MergeFrom(const ParameterDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_readonly()) {
      set_readonly(from.readonly());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParameterDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterDescription::CopyFrom(const ParameterDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ParameterDescription::Swap(ParameterDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(readonly_, other->readonly_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParameterDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterDescription_descriptor_;
  metadata.reflection = ParameterDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryParameters::kSeqnoFieldNumber;
const int QueryParameters::kIdFieldNumber;
#endif  // !_MSC_VER

QueryParameters::QueryParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryParameters::InitAsDefaultInstance() {
}

QueryParameters::QueryParameters(const QueryParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryParameters::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryParameters::~QueryParameters() {
  SharedDtor();
}

void QueryParameters::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void QueryParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryParameters_descriptor_;
}

const QueryParameters& QueryParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

QueryParameters* QueryParameters::default_instance_ = NULL;

QueryParameters* QueryParameters::New() const {
  return new QueryParameters;
}

void QueryParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryParameters::MergeFrom(const QueryParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryParameters::CopyFrom(const QueryParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryParameters::Swap(QueryParameters* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryParameters_descriptor_;
  metadata.reflection = QueryParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckQueryParameters::kSeqnoFieldNumber;
const int AckQueryParameters::kIdFieldNumber;
const int AckQueryParameters::kResultFieldNumber;
const int AckQueryParameters::kPdFieldNumber;
#endif  // !_MSC_VER

AckQueryParameters::AckQueryParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckQueryParameters::InitAsDefaultInstance() {
}

AckQueryParameters::AckQueryParameters(const AckQueryParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckQueryParameters::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckQueryParameters::~AckQueryParameters() {
  SharedDtor();
}

void AckQueryParameters::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AckQueryParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckQueryParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckQueryParameters_descriptor_;
}

const AckQueryParameters& AckQueryParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckQueryParameters* AckQueryParameters::default_instance_ = NULL;

AckQueryParameters* AckQueryParameters::New() const {
  return new AckQueryParameters;
}

void AckQueryParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    result_ = 0;
  }
  pd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckQueryParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pd;
        break;
      }

      // repeated .das.proto.ParameterDescription pd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckQueryParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated .das.proto.ParameterDescription pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckQueryParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated .das.proto.ParameterDescription pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckQueryParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.ParameterDescription pd = 4;
  total_size += 1 * this->pd_size();
  for (int i = 0; i < this->pd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckQueryParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckQueryParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckQueryParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckQueryParameters::MergeFrom(const AckQueryParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  pd_.MergeFrom(from.pd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckQueryParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueryParameters::CopyFrom(const AckQueryParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueryParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < pd_size(); i++) {
    if (!this->pd(i).IsInitialized()) return false;
  }
  return true;
}

void AckQueryParameters::Swap(AckQueryParameters* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    pd_.Swap(&other->pd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckQueryParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckQueryParameters_descriptor_;
  metadata.reflection = AckQueryParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigureParameters::kSeqnoFieldNumber;
const int ConfigureParameters::kIdFieldNumber;
const int ConfigureParameters::kPdFieldNumber;
#endif  // !_MSC_VER

ConfigureParameters::ConfigureParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigureParameters::InitAsDefaultInstance() {
}

ConfigureParameters::ConfigureParameters(const ConfigureParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigureParameters::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureParameters::~ConfigureParameters() {
  SharedDtor();
}

void ConfigureParameters::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ConfigureParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureParameters_descriptor_;
}

const ConfigureParameters& ConfigureParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ConfigureParameters* ConfigureParameters::default_instance_ = NULL;

ConfigureParameters* ConfigureParameters::New() const {
  return new ConfigureParameters;
}

void ConfigureParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  pd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigureParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pd;
        break;
      }

      // repeated .das.proto.ParameterDescription pd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigureParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // repeated .das.proto.ParameterDescription pd = 3;
  for (int i = 0; i < this->pd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigureParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated .das.proto.ParameterDescription pd = 3;
  for (int i = 0; i < this->pd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigureParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated .das.proto.ParameterDescription pd = 3;
  total_size += 1 * this->pd_size();
  for (int i = 0; i < this->pd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigureParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigureParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigureParameters::MergeFrom(const ConfigureParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  pd_.MergeFrom(from.pd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigureParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureParameters::CopyFrom(const ConfigureParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < pd_size(); i++) {
    if (!this->pd(i).IsInitialized()) return false;
  }
  return true;
}

void ConfigureParameters::Swap(ConfigureParameters* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    pd_.Swap(&other->pd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigureParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureParameters_descriptor_;
  metadata.reflection = ConfigureParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckConfigurParameters::kSeqnoFieldNumber;
const int AckConfigurParameters::kIdFieldNumber;
const int AckConfigurParameters::kResultFieldNumber;
#endif  // !_MSC_VER

AckConfigurParameters::AckConfigurParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckConfigurParameters::InitAsDefaultInstance() {
}

AckConfigurParameters::AckConfigurParameters(const AckConfigurParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckConfigurParameters::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckConfigurParameters::~AckConfigurParameters() {
  SharedDtor();
}

void AckConfigurParameters::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AckConfigurParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckConfigurParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckConfigurParameters_descriptor_;
}

const AckConfigurParameters& AckConfigurParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckConfigurParameters* AckConfigurParameters::default_instance_ = NULL;

AckConfigurParameters* AckConfigurParameters::New() const {
  return new AckConfigurParameters;
}

void AckConfigurParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckConfigurParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckConfigurParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckConfigurParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckConfigurParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckConfigurParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckConfigurParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckConfigurParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckConfigurParameters::MergeFrom(const AckConfigurParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckConfigurParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckConfigurParameters::CopyFrom(const AckConfigurParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckConfigurParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckConfigurParameters::Swap(AckConfigurParameters* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckConfigurParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckConfigurParameters_descriptor_;
  metadata.reflection = AckConfigurParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDeviceException::kSeqnoFieldNumber;
const int ReportDeviceException::kIdFieldNumber;
const int ReportDeviceException::kDescFieldNumber;
#endif  // !_MSC_VER

ReportDeviceException::ReportDeviceException()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportDeviceException::InitAsDefaultInstance() {
}

ReportDeviceException::ReportDeviceException(const ReportDeviceException& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportDeviceException::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDeviceException::~ReportDeviceException() {
  SharedDtor();
}

void ReportDeviceException::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ReportDeviceException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDeviceException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDeviceException_descriptor_;
}

const ReportDeviceException& ReportDeviceException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ReportDeviceException* ReportDeviceException::default_instance_ = NULL;

ReportDeviceException* ReportDeviceException::New() const {
  return new ReportDeviceException;
}

void ReportDeviceException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  desc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDeviceException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // repeated string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc(this->desc_size() - 1).data(),
            this->desc(this->desc_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportDeviceException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // repeated string desc = 3;
  for (int i = 0; i < this->desc_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->desc(i).data(), this->desc(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportDeviceException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated string desc = 3;
  for (int i = 0; i < this->desc_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc(i).data(), this->desc(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->desc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportDeviceException::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string desc = 3;
  total_size += 1 * this->desc_size();
  for (int i = 0; i < this->desc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDeviceException::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDeviceException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDeviceException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDeviceException::MergeFrom(const ReportDeviceException& from) {
  GOOGLE_CHECK_NE(&from, this);
  desc_.MergeFrom(from.desc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDeviceException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDeviceException::CopyFrom(const ReportDeviceException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDeviceException::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportDeviceException::Swap(ReportDeviceException* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    desc_.Swap(&other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDeviceException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDeviceException_descriptor_;
  metadata.reflection = ReportDeviceException_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReportDeviceException::kSeqnoFieldNumber;
const int AckReportDeviceException::kResultFieldNumber;
#endif  // !_MSC_VER

AckReportDeviceException::AckReportDeviceException()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReportDeviceException::InitAsDefaultInstance() {
}

AckReportDeviceException::AckReportDeviceException(const AckReportDeviceException& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReportDeviceException::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReportDeviceException::~AckReportDeviceException() {
  SharedDtor();
}

void AckReportDeviceException::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReportDeviceException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReportDeviceException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReportDeviceException_descriptor_;
}

const AckReportDeviceException& AckReportDeviceException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckReportDeviceException* AckReportDeviceException::default_instance_ = NULL;

AckReportDeviceException* AckReportDeviceException::New() const {
  return new AckReportDeviceException;
}

void AckReportDeviceException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReportDeviceException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReportDeviceException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReportDeviceException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReportDeviceException::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReportDeviceException::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReportDeviceException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReportDeviceException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReportDeviceException::MergeFrom(const AckReportDeviceException& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReportDeviceException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReportDeviceException::CopyFrom(const AckReportDeviceException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReportDeviceException::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckReportDeviceException::Swap(AckReportDeviceException* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReportDeviceException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReportDeviceException_descriptor_;
  metadata.reflection = AckReportDeviceException_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDeviceList::kSeqnoFieldNumber;
const int UpdateDeviceList::kOperationFieldNumber;
const int UpdateDeviceList::kIdFieldNumber;
#endif  // !_MSC_VER

UpdateDeviceList::UpdateDeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDeviceList::InitAsDefaultInstance() {
}

UpdateDeviceList::UpdateDeviceList(const UpdateDeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDeviceList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDeviceList::~UpdateDeviceList() {
  SharedDtor();
}

void UpdateDeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDeviceList_descriptor_;
}

const UpdateDeviceList& UpdateDeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UpdateDeviceList* UpdateDeviceList::default_instance_ = NULL;

UpdateDeviceList* UpdateDeviceList::New() const {
  return new UpdateDeviceList;
}

void UpdateDeviceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    operation_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required uint32 operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // repeated string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operation(), target);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDeviceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required uint32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  // repeated string id = 3;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDeviceList::MergeFrom(const UpdateDeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceList::CopyFrom(const UpdateDeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateDeviceList::Swap(UpdateDeviceList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(operation_, other->operation_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDeviceList_descriptor_;
  metadata.reflection = UpdateDeviceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateDeviceList::kSeqnoFieldNumber;
const int AckUpdateDeviceList::kResultFieldNumber;
#endif  // !_MSC_VER

AckUpdateDeviceList::AckUpdateDeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateDeviceList::InitAsDefaultInstance() {
}

AckUpdateDeviceList::AckUpdateDeviceList(const AckUpdateDeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateDeviceList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateDeviceList::~AckUpdateDeviceList() {
  SharedDtor();
}

void AckUpdateDeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateDeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateDeviceList_descriptor_;
}

const AckUpdateDeviceList& AckUpdateDeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckUpdateDeviceList* AckUpdateDeviceList::default_instance_ = NULL;

AckUpdateDeviceList* AckUpdateDeviceList::New() const {
  return new AckUpdateDeviceList;
}

void AckUpdateDeviceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateDeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateDeviceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateDeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateDeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateDeviceList::MergeFrom(const AckUpdateDeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateDeviceList::CopyFrom(const AckUpdateDeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateDeviceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckUpdateDeviceList::Swap(AckUpdateDeviceList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateDeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateDeviceList_descriptor_;
  metadata.reflection = AckUpdateDeviceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncDeviceList::kSeqnoFieldNumber;
#endif  // !_MSC_VER

SyncDeviceList::SyncDeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncDeviceList::InitAsDefaultInstance() {
}

SyncDeviceList::SyncDeviceList(const SyncDeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncDeviceList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncDeviceList::~SyncDeviceList() {
  SharedDtor();
}

void SyncDeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncDeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncDeviceList_descriptor_;
}

const SyncDeviceList& SyncDeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SyncDeviceList* SyncDeviceList::default_instance_ = NULL;

SyncDeviceList* SyncDeviceList::New() const {
  return new SyncDeviceList;
}

void SyncDeviceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncDeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncDeviceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncDeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncDeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncDeviceList::MergeFrom(const SyncDeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDeviceList::CopyFrom(const SyncDeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDeviceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncDeviceList::Swap(SyncDeviceList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncDeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncDeviceList_descriptor_;
  metadata.reflection = SyncDeviceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSyncDeviceList::kSeqnoFieldNumber;
const int AckSyncDeviceList::kResultFieldNumber;
const int AckSyncDeviceList::kIdFieldNumber;
#endif  // !_MSC_VER

AckSyncDeviceList::AckSyncDeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSyncDeviceList::InitAsDefaultInstance() {
}

AckSyncDeviceList::AckSyncDeviceList(const AckSyncDeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSyncDeviceList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSyncDeviceList::~AckSyncDeviceList() {
  SharedDtor();
}

void AckSyncDeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSyncDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSyncDeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSyncDeviceList_descriptor_;
}

const AckSyncDeviceList& AckSyncDeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSyncDeviceList* AckSyncDeviceList::default_instance_ = NULL;

AckSyncDeviceList* AckSyncDeviceList::New() const {
  return new AckSyncDeviceList;
}

void AckSyncDeviceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSyncDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // repeated string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSyncDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSyncDeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSyncDeviceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated string id = 3;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSyncDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSyncDeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSyncDeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSyncDeviceList::MergeFrom(const AckSyncDeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSyncDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSyncDeviceList::CopyFrom(const AckSyncDeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSyncDeviceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckSyncDeviceList::Swap(AckSyncDeviceList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSyncDeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSyncDeviceList_descriptor_;
  metadata.reflection = AckSyncDeviceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickoutDevice::kSeqnoFieldNumber;
const int KickoutDevice::kDevidFieldNumber;
#endif  // !_MSC_VER

KickoutDevice::KickoutDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickoutDevice::InitAsDefaultInstance() {
}

KickoutDevice::KickoutDevice(const KickoutDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickoutDevice::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickoutDevice::~KickoutDevice() {
  SharedDtor();
}

void KickoutDevice::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::kEmptyString) {
    delete devid_;
  }
  if (this != default_instance_) {
  }
}

void KickoutDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickoutDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickoutDevice_descriptor_;
}

const KickoutDevice& KickoutDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

KickoutDevice* KickoutDevice::default_instance_ = NULL;

KickoutDevice* KickoutDevice::New() const {
  return new KickoutDevice;
}

void KickoutDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::kEmptyString) {
        devid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickoutDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devid;
        break;
      }

      // required string devid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickoutDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string devid = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->devid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickoutDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string devid = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickoutDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string devid = 2;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickoutDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickoutDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickoutDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickoutDevice::MergeFrom(const KickoutDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickoutDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickoutDevice::CopyFrom(const KickoutDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KickoutDevice::Swap(KickoutDevice* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(devid_, other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickoutDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickoutDevice_descriptor_;
  metadata.reflection = KickoutDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckKickoutDevice::kSeqnoFieldNumber;
const int AckKickoutDevice::kResultFieldNumber;
#endif  // !_MSC_VER

AckKickoutDevice::AckKickoutDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckKickoutDevice::InitAsDefaultInstance() {
}

AckKickoutDevice::AckKickoutDevice(const AckKickoutDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckKickoutDevice::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckKickoutDevice::~AckKickoutDevice() {
  SharedDtor();
}

void AckKickoutDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckKickoutDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckKickoutDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckKickoutDevice_descriptor_;
}

const AckKickoutDevice& AckKickoutDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckKickoutDevice* AckKickoutDevice::default_instance_ = NULL;

AckKickoutDevice* AckKickoutDevice::New() const {
  return new AckKickoutDevice;
}

void AckKickoutDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckKickoutDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckKickoutDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckKickoutDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckKickoutDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckKickoutDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckKickoutDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckKickoutDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckKickoutDevice::MergeFrom(const AckKickoutDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckKickoutDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckKickoutDevice::CopyFrom(const AckKickoutDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckKickoutDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckKickoutDevice::Swap(AckKickoutDevice* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckKickoutDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckKickoutDevice_descriptor_;
  metadata.reflection = AckKickoutDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestIdentityAllocation::kSeqnoFieldNumber;
const int RequestIdentityAllocation::kDevtypeFieldNumber;
const int RequestIdentityAllocation::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestIdentityAllocation::RequestIdentityAllocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestIdentityAllocation::InitAsDefaultInstance() {
}

RequestIdentityAllocation::RequestIdentityAllocation(const RequestIdentityAllocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestIdentityAllocation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  devtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestIdentityAllocation::~RequestIdentityAllocation() {
  SharedDtor();
}

void RequestIdentityAllocation::SharedDtor() {
  if (devtype_ != &::google::protobuf::internal::kEmptyString) {
    delete devtype_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestIdentityAllocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestIdentityAllocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestIdentityAllocation_descriptor_;
}

const RequestIdentityAllocation& RequestIdentityAllocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestIdentityAllocation* RequestIdentityAllocation::default_instance_ = NULL;

RequestIdentityAllocation* RequestIdentityAllocation::New() const {
  return new RequestIdentityAllocation;
}

void RequestIdentityAllocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_devtype()) {
      if (devtype_ != &::google::protobuf::internal::kEmptyString) {
        devtype_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestIdentityAllocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devtype;
        break;
      }

      // required string devtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devtype().data(), this->devtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestIdentityAllocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string devtype = 2;
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devtype().data(), this->devtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->devtype(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestIdentityAllocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string devtype = 2;
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devtype().data(), this->devtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devtype(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestIdentityAllocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string devtype = 2;
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devtype());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestIdentityAllocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestIdentityAllocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestIdentityAllocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestIdentityAllocation::MergeFrom(const RequestIdentityAllocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestIdentityAllocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestIdentityAllocation::CopyFrom(const RequestIdentityAllocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIdentityAllocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestIdentityAllocation::Swap(RequestIdentityAllocation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(devtype_, other->devtype_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestIdentityAllocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestIdentityAllocation_descriptor_;
  metadata.reflection = RequestIdentityAllocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIdentityAllocation::kSeqnoFieldNumber;
const int AckIdentityAllocation::kResultFieldNumber;
const int AckIdentityAllocation::kIdFieldNumber;
const int AckIdentityAllocation::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckIdentityAllocation::AckIdentityAllocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckIdentityAllocation::InitAsDefaultInstance() {
}

AckIdentityAllocation::AckIdentityAllocation(const AckIdentityAllocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckIdentityAllocation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIdentityAllocation::~AckIdentityAllocation() {
  SharedDtor();
}

void AckIdentityAllocation::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckIdentityAllocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIdentityAllocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIdentityAllocation_descriptor_;
}

const AckIdentityAllocation& AckIdentityAllocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckIdentityAllocation* AckIdentityAllocation::default_instance_ = NULL;

AckIdentityAllocation* AckIdentityAllocation::New() const {
  return new AckIdentityAllocation;
}

void AckIdentityAllocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIdentityAllocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckIdentityAllocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckIdentityAllocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckIdentityAllocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIdentityAllocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIdentityAllocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIdentityAllocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIdentityAllocation::MergeFrom(const AckIdentityAllocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIdentityAllocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIdentityAllocation::CopyFrom(const AckIdentityAllocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIdentityAllocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckIdentityAllocation::Swap(AckIdentityAllocation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIdentityAllocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIdentityAllocation_descriptor_;
  metadata.reflection = AckIdentityAllocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProgramUpgrade::kSeqnoFieldNumber;
const int RequestProgramUpgrade::kHardwareFieldNumber;
const int RequestProgramUpgrade::kSoftwareFieldNumber;
const int RequestProgramUpgrade::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestProgramUpgrade::RequestProgramUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProgramUpgrade::InitAsDefaultInstance() {
}

RequestProgramUpgrade::RequestProgramUpgrade(const RequestProgramUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProgramUpgrade::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProgramUpgrade::~RequestProgramUpgrade() {
  SharedDtor();
}

void RequestProgramUpgrade::SharedDtor() {
  if (hardware_ != &::google::protobuf::internal::kEmptyString) {
    delete hardware_;
  }
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    delete software_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestProgramUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProgramUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProgramUpgrade_descriptor_;
}

const RequestProgramUpgrade& RequestProgramUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestProgramUpgrade* RequestProgramUpgrade::default_instance_ = NULL;

RequestProgramUpgrade* RequestProgramUpgrade::New() const {
  return new RequestProgramUpgrade;
}

void RequestProgramUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::kEmptyString) {
        hardware_->clear();
      }
    }
    if (has_software()) {
      if (software_ != &::google::protobuf::internal::kEmptyString) {
        software_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProgramUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hardware;
        break;
      }

      // required string hardware = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_software;
        break;
      }

      // required string software = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software().data(), this->software().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProgramUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string hardware = 2;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hardware(), output);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->software(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProgramUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string hardware = 2;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hardware(), target);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->software(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProgramUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string hardware = 2;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

    // required string software = 3;
    if (has_software()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProgramUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProgramUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProgramUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProgramUpgrade::MergeFrom(const RequestProgramUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
    if (from.has_software()) {
      set_software(from.software());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProgramUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProgramUpgrade::CopyFrom(const RequestProgramUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProgramUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestProgramUpgrade::Swap(RequestProgramUpgrade* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(hardware_, other->hardware_);
    std::swap(software_, other->software_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProgramUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProgramUpgrade_descriptor_;
  metadata.reflection = RequestProgramUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckProgramUpgrade::kSeqnoFieldNumber;
const int AckProgramUpgrade::kResultFieldNumber;
const int AckProgramUpgrade::kSoftwareFieldNumber;
const int AckProgramUpgrade::kLengthFieldNumber;
const int AckProgramUpgrade::kForcedFieldNumber;
const int AckProgramUpgrade::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckProgramUpgrade::AckProgramUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckProgramUpgrade::InitAsDefaultInstance() {
}

AckProgramUpgrade::AckProgramUpgrade(const AckProgramUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckProgramUpgrade::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  forced_ = false;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckProgramUpgrade::~AckProgramUpgrade() {
  SharedDtor();
}

void AckProgramUpgrade::SharedDtor() {
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    delete software_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckProgramUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckProgramUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckProgramUpgrade_descriptor_;
}

const AckProgramUpgrade& AckProgramUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckProgramUpgrade* AckProgramUpgrade::default_instance_ = NULL;

AckProgramUpgrade* AckProgramUpgrade::New() const {
  return new AckProgramUpgrade;
}

void AckProgramUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_software()) {
      if (software_ != &::google::protobuf::internal::kEmptyString) {
        software_->clear();
      }
    }
    length_ = 0;
    forced_ = false;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckProgramUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_software;
        break;
      }

      // required string software = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software().data(), this->software().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_forced;
        break;
      }

      // required bool forced = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extradata;
        break;
      }

      // optional string extradata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckProgramUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->software(), output);
  }

  // required int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // required bool forced = 5;
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forced(), output);
  }

  // optional string extradata = 6;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckProgramUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->software(), target);
  }

  // required int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // required bool forced = 5;
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forced(), target);
  }

  // optional string extradata = 6;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckProgramUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string software = 3;
    if (has_software()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software());
    }

    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required bool forced = 5;
    if (has_forced()) {
      total_size += 1 + 1;
    }

    // optional string extradata = 6;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckProgramUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckProgramUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckProgramUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckProgramUpgrade::MergeFrom(const AckProgramUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_software()) {
      set_software(from.software());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckProgramUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckProgramUpgrade::CopyFrom(const AckProgramUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckProgramUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AckProgramUpgrade::Swap(AckProgramUpgrade* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(software_, other->software_);
    std::swap(length_, other->length_);
    std::swap(forced_, other->forced_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckProgramUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckProgramUpgrade_descriptor_;
  metadata.reflection = AckProgramUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProgramDownload::kSeqnoFieldNumber;
const int RequestProgramDownload::kSoftwareFieldNumber;
const int RequestProgramDownload::kOffsetFieldNumber;
const int RequestProgramDownload::kLengthFieldNumber;
const int RequestProgramDownload::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestProgramDownload::RequestProgramDownload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProgramDownload::InitAsDefaultInstance() {
}

RequestProgramDownload::RequestProgramDownload(const RequestProgramDownload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProgramDownload::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  length_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProgramDownload::~RequestProgramDownload() {
  SharedDtor();
}

void RequestProgramDownload::SharedDtor() {
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    delete software_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestProgramDownload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProgramDownload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProgramDownload_descriptor_;
}

const RequestProgramDownload& RequestProgramDownload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestProgramDownload* RequestProgramDownload::default_instance_ = NULL;

RequestProgramDownload* RequestProgramDownload::New() const {
  return new RequestProgramDownload;
}

void RequestProgramDownload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_software()) {
      if (software_ != &::google::protobuf::internal::kEmptyString) {
        software_->clear();
      }
    }
    offset_ = 0;
    length_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProgramDownload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_software;
        break;
      }

      // required string software = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software().data(), this->software().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extradata;
        break;
      }

      // optional string extradata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProgramDownload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string software = 2;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->software(), output);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // required int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // optional string extradata = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProgramDownload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string software = 2;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->software(), target);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // required int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // optional string extradata = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProgramDownload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string software = 2;
    if (has_software()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software());
    }

    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string extradata = 5;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProgramDownload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProgramDownload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProgramDownload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProgramDownload::MergeFrom(const RequestProgramDownload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_software()) {
      set_software(from.software());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProgramDownload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProgramDownload::CopyFrom(const RequestProgramDownload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProgramDownload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestProgramDownload::Swap(RequestProgramDownload* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(software_, other->software_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProgramDownload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProgramDownload_descriptor_;
  metadata.reflection = RequestProgramDownload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckProgramDownload::kSeqnoFieldNumber;
const int AckProgramDownload::kResultFieldNumber;
const int AckProgramDownload::kSoftwareFieldNumber;
const int AckProgramDownload::kOffsetFieldNumber;
const int AckProgramDownload::kLengthFieldNumber;
const int AckProgramDownload::kDataFieldNumber;
const int AckProgramDownload::kCrc32FieldNumber;
const int AckProgramDownload::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckProgramDownload::AckProgramDownload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckProgramDownload::InitAsDefaultInstance() {
}

AckProgramDownload::AckProgramDownload(const AckProgramDownload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckProgramDownload::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  software_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  length_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc32_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckProgramDownload::~AckProgramDownload() {
  SharedDtor();
}

void AckProgramDownload::SharedDtor() {
  if (software_ != &::google::protobuf::internal::kEmptyString) {
    delete software_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckProgramDownload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckProgramDownload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckProgramDownload_descriptor_;
}

const AckProgramDownload& AckProgramDownload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckProgramDownload* AckProgramDownload::default_instance_ = NULL;

AckProgramDownload* AckProgramDownload::New() const {
  return new AckProgramDownload;
}

void AckProgramDownload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_software()) {
      if (software_ != &::google::protobuf::internal::kEmptyString) {
        software_->clear();
      }
    }
    offset_ = 0;
    length_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    crc32_ = 0u;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckProgramDownload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_software;
        break;
      }

      // required string software = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software().data(), this->software().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_length;
        break;
      }

      // required int32 length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crc32;
        break;
      }

      // optional uint32 crc32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc32_)));
          set_has_crc32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extradata;
        break;
      }

      // optional string extradata = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckProgramDownload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->software(), output);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // required int32 length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->length(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // optional uint32 crc32 = 7;
  if (has_crc32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crc32(), output);
  }

  // optional string extradata = 8;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckProgramDownload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string software = 3;
  if (has_software()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software().data(), this->software().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->software(), target);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // required int32 length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->length(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 crc32 = 7;
  if (has_crc32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crc32(), target);
  }

  // optional string extradata = 8;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckProgramDownload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string software = 3;
    if (has_software()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software());
    }

    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 length = 5;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 crc32 = 7;
    if (has_crc32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc32());
    }

    // optional string extradata = 8;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckProgramDownload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckProgramDownload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckProgramDownload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckProgramDownload::MergeFrom(const AckProgramDownload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_software()) {
      set_software(from.software());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_crc32()) {
      set_crc32(from.crc32());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckProgramDownload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckProgramDownload::CopyFrom(const AckProgramDownload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckProgramDownload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AckProgramDownload::Swap(AckProgramDownload* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(software_, other->software_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(data_, other->data_);
    std::swap(crc32_, other->crc32_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckProgramDownload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckProgramDownload_descriptor_;
  metadata.reflection = AckProgramDownload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPositionAuthentication::kSeqnoFieldNumber;
const int RequestPositionAuthentication::kDevidFieldNumber;
const int RequestPositionAuthentication::kPosFieldNumber;
#endif  // !_MSC_VER

RequestPositionAuthentication::RequestPositionAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPositionAuthentication::InitAsDefaultInstance() {
  pos_ = const_cast< ::das::proto::GpsInformation*>(&::das::proto::GpsInformation::default_instance());
}

RequestPositionAuthentication::RequestPositionAuthentication(const RequestPositionAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPositionAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPositionAuthentication::~RequestPositionAuthentication() {
  SharedDtor();
}

void RequestPositionAuthentication::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::kEmptyString) {
    delete devid_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void RequestPositionAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPositionAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPositionAuthentication_descriptor_;
}

const RequestPositionAuthentication& RequestPositionAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestPositionAuthentication* RequestPositionAuthentication::default_instance_ = NULL;

RequestPositionAuthentication* RequestPositionAuthentication::New() const {
  return new RequestPositionAuthentication;
}

void RequestPositionAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::kEmptyString) {
        devid_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::das::proto::GpsInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPositionAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devid;
        break;
      }

      // required string devid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .das.proto.GpsInformation pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPositionAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string devid = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->devid(), output);
  }

  // required .das.proto.GpsInformation pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPositionAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string devid = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devid(), target);
  }

  // required .das.proto.GpsInformation pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPositionAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string devid = 2;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // required .das.proto.GpsInformation pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPositionAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPositionAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPositionAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPositionAuthentication::MergeFrom(const RequestPositionAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_pos()) {
      mutable_pos()->::das::proto::GpsInformation::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPositionAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPositionAuthentication::CopyFrom(const RequestPositionAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPositionAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void RequestPositionAuthentication::Swap(RequestPositionAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(devid_, other->devid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPositionAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPositionAuthentication_descriptor_;
  metadata.reflection = RequestPositionAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPositionAuthentication::kSeqnoFieldNumber;
const int AckPositionAuthentication::kResultFieldNumber;
const int AckPositionAuthentication::kDevidFieldNumber;
#endif  // !_MSC_VER

AckPositionAuthentication::AckPositionAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPositionAuthentication::InitAsDefaultInstance() {
}

AckPositionAuthentication::AckPositionAuthentication(const AckPositionAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPositionAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPositionAuthentication::~AckPositionAuthentication() {
  SharedDtor();
}

void AckPositionAuthentication::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::kEmptyString) {
    delete devid_;
  }
  if (this != default_instance_) {
  }
}

void AckPositionAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPositionAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPositionAuthentication_descriptor_;
}

const AckPositionAuthentication& AckPositionAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPositionAuthentication* AckPositionAuthentication::default_instance_ = NULL;

AckPositionAuthentication* AckPositionAuthentication::New() const {
  return new AckPositionAuthentication;
}

void AckPositionAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::kEmptyString) {
        devid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPositionAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devid;
        break;
      }

      // optional string devid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPositionAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string devid = 3;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPositionAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string devid = 3;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPositionAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string devid = 3;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPositionAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPositionAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPositionAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPositionAuthentication::MergeFrom(const AckPositionAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPositionAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPositionAuthentication::CopyFrom(const AckPositionAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPositionAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPositionAuthentication::Swap(AckPositionAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(devid_, other->devid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPositionAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPositionAuthentication_descriptor_;
  metadata.reflection = AckPositionAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request3rdIdentityAuthentication::kSeqnoFieldNumber;
const int Request3rdIdentityAuthentication::kIdentificationFieldNumber;
const int Request3rdIdentityAuthentication::kSecretkeyFieldNumber;
const int Request3rdIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

Request3rdIdentityAuthentication::Request3rdIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request3rdIdentityAuthentication::InitAsDefaultInstance() {
}

Request3rdIdentityAuthentication::Request3rdIdentityAuthentication(const Request3rdIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request3rdIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request3rdIdentityAuthentication::~Request3rdIdentityAuthentication() {
  SharedDtor();
}

void Request3rdIdentityAuthentication::SharedDtor() {
  if (identification_ != &::google::protobuf::internal::kEmptyString) {
    delete identification_;
  }
  if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void Request3rdIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request3rdIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request3rdIdentityAuthentication_descriptor_;
}

const Request3rdIdentityAuthentication& Request3rdIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

Request3rdIdentityAuthentication* Request3rdIdentityAuthentication::default_instance_ = NULL;

Request3rdIdentityAuthentication* Request3rdIdentityAuthentication::New() const {
  return new Request3rdIdentityAuthentication;
}

void Request3rdIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_identification()) {
      if (identification_ != &::google::protobuf::internal::kEmptyString) {
        identification_->clear();
      }
    }
    if (has_secretkey()) {
      if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request3rdIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identification;
        break;
      }

      // required string identification = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identification().data(), this->identification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secretkey;
        break;
      }

      // required string secretkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secretkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secretkey().data(), this->secretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request3rdIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string identification = 2;
  if (has_identification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identification(), output);
  }

  // required string secretkey = 3;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->secretkey(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request3rdIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string identification = 2;
  if (has_identification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identification(), target);
  }

  // required string secretkey = 3;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->secretkey(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request3rdIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string identification = 2;
    if (has_identification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identification());
    }

    // required string secretkey = 3;
    if (has_secretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secretkey());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request3rdIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request3rdIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request3rdIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request3rdIdentityAuthentication::MergeFrom(const Request3rdIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_identification()) {
      set_identification(from.identification());
    }
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request3rdIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request3rdIdentityAuthentication::CopyFrom(const Request3rdIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request3rdIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request3rdIdentityAuthentication::Swap(Request3rdIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(identification_, other->identification_);
    std::swap(secretkey_, other->secretkey_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request3rdIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request3rdIdentityAuthentication_descriptor_;
  metadata.reflection = Request3rdIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ack3rdIdentityAuthentication::kSeqnoFieldNumber;
const int Ack3rdIdentityAuthentication::kResultFieldNumber;
const int Ack3rdIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

Ack3rdIdentityAuthentication::Ack3rdIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ack3rdIdentityAuthentication::InitAsDefaultInstance() {
}

Ack3rdIdentityAuthentication::Ack3rdIdentityAuthentication(const Ack3rdIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ack3rdIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack3rdIdentityAuthentication::~Ack3rdIdentityAuthentication() {
  SharedDtor();
}

void Ack3rdIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void Ack3rdIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack3rdIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack3rdIdentityAuthentication_descriptor_;
}

const Ack3rdIdentityAuthentication& Ack3rdIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

Ack3rdIdentityAuthentication* Ack3rdIdentityAuthentication::default_instance_ = NULL;

Ack3rdIdentityAuthentication* Ack3rdIdentityAuthentication::New() const {
  return new Ack3rdIdentityAuthentication;
}

void Ack3rdIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack3rdIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ack3rdIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ack3rdIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ack3rdIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack3rdIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack3rdIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack3rdIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack3rdIdentityAuthentication::MergeFrom(const Ack3rdIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack3rdIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack3rdIdentityAuthentication::CopyFrom(const Ack3rdIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack3rdIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ack3rdIdentityAuthentication::Swap(Ack3rdIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack3rdIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack3rdIdentityAuthentication_descriptor_;
  metadata.reflection = Ack3rdIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUavIdentityAuthentication::kSeqnoFieldNumber;
const int RequestUavIdentityAuthentication::kUavidFieldNumber;
const int RequestUavIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestUavIdentityAuthentication::RequestUavIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUavIdentityAuthentication::InitAsDefaultInstance() {
}

RequestUavIdentityAuthentication::RequestUavIdentityAuthentication(const RequestUavIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUavIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUavIdentityAuthentication::~RequestUavIdentityAuthentication() {
  SharedDtor();
}

void RequestUavIdentityAuthentication::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestUavIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUavIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUavIdentityAuthentication_descriptor_;
}

const RequestUavIdentityAuthentication& RequestUavIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestUavIdentityAuthentication* RequestUavIdentityAuthentication::default_instance_ = NULL;

RequestUavIdentityAuthentication* RequestUavIdentityAuthentication::New() const {
  return new RequestUavIdentityAuthentication;
}

void RequestUavIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUavIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUavIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUavIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUavIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUavIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUavIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUavIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUavIdentityAuthentication::MergeFrom(const RequestUavIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUavIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUavIdentityAuthentication::CopyFrom(const RequestUavIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUavIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUavIdentityAuthentication::Swap(RequestUavIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUavIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUavIdentityAuthentication_descriptor_;
  metadata.reflection = RequestUavIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUavIdentityAuthentication::kSeqnoFieldNumber;
const int AckUavIdentityAuthentication::kUavidFieldNumber;
const int AckUavIdentityAuthentication::kResultFieldNumber;
const int AckUavIdentityAuthentication::kDeadlineFieldNumber;
const int AckUavIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckUavIdentityAuthentication::AckUavIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUavIdentityAuthentication::InitAsDefaultInstance() {
}

AckUavIdentityAuthentication::AckUavIdentityAuthentication(const AckUavIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUavIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  deadline_ = GOOGLE_ULONGLONG(0);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUavIdentityAuthentication::~AckUavIdentityAuthentication() {
  SharedDtor();
}

void AckUavIdentityAuthentication::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckUavIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUavIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUavIdentityAuthentication_descriptor_;
}

const AckUavIdentityAuthentication& AckUavIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckUavIdentityAuthentication* AckUavIdentityAuthentication::default_instance_ = NULL;

AckUavIdentityAuthentication* AckUavIdentityAuthentication::New() const {
  return new AckUavIdentityAuthentication;
}

void AckUavIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    result_ = 0;
    deadline_ = GOOGLE_ULONGLONG(0);
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUavIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // optional string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deadline;
        break;
      }

      // optional uint64 deadline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extradata;
        break;
      }

      // optional string extradata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUavIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional uint64 deadline = 4;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->deadline(), output);
  }

  // optional string extradata = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUavIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional uint64 deadline = 4;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->deadline(), target);
  }

  // optional string extradata = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUavIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 deadline = 4;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deadline());
    }

    // optional string extradata = 5;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUavIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUavIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUavIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUavIdentityAuthentication::MergeFrom(const AckUavIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUavIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUavIdentityAuthentication::CopyFrom(const AckUavIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUavIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void AckUavIdentityAuthentication::Swap(AckUavIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(result_, other->result_);
    std::swap(deadline_, other->deadline_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUavIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUavIdentityAuthentication_descriptor_;
  metadata.reflection = AckUavIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTrackerIdentityAuthentication::kSeqnoFieldNumber;
const int RequestTrackerIdentityAuthentication::kTrackeridFieldNumber;
const int RequestTrackerIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestTrackerIdentityAuthentication::RequestTrackerIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTrackerIdentityAuthentication::InitAsDefaultInstance() {
}

RequestTrackerIdentityAuthentication::RequestTrackerIdentityAuthentication(const RequestTrackerIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTrackerIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  trackerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTrackerIdentityAuthentication::~RequestTrackerIdentityAuthentication() {
  SharedDtor();
}

void RequestTrackerIdentityAuthentication::SharedDtor() {
  if (trackerid_ != &::google::protobuf::internal::kEmptyString) {
    delete trackerid_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestTrackerIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTrackerIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTrackerIdentityAuthentication_descriptor_;
}

const RequestTrackerIdentityAuthentication& RequestTrackerIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestTrackerIdentityAuthentication* RequestTrackerIdentityAuthentication::default_instance_ = NULL;

RequestTrackerIdentityAuthentication* RequestTrackerIdentityAuthentication::New() const {
  return new RequestTrackerIdentityAuthentication;
}

void RequestTrackerIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_trackerid()) {
      if (trackerid_ != &::google::protobuf::internal::kEmptyString) {
        trackerid_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTrackerIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trackerid;
        break;
      }

      // required string trackerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackerid().data(), this->trackerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTrackerIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string trackerid = 2;
  if (has_trackerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackerid().data(), this->trackerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trackerid(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTrackerIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string trackerid = 2;
  if (has_trackerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackerid().data(), this->trackerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trackerid(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTrackerIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string trackerid = 2;
    if (has_trackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackerid());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTrackerIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTrackerIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTrackerIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTrackerIdentityAuthentication::MergeFrom(const RequestTrackerIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_trackerid()) {
      set_trackerid(from.trackerid());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTrackerIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTrackerIdentityAuthentication::CopyFrom(const RequestTrackerIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTrackerIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestTrackerIdentityAuthentication::Swap(RequestTrackerIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(trackerid_, other->trackerid_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTrackerIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTrackerIdentityAuthentication_descriptor_;
  metadata.reflection = RequestTrackerIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTrackerIdentityAuthentication::kSeqnoFieldNumber;
const int AckTrackerIdentityAuthentication::kResultFieldNumber;
const int AckTrackerIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckTrackerIdentityAuthentication::AckTrackerIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTrackerIdentityAuthentication::InitAsDefaultInstance() {
}

AckTrackerIdentityAuthentication::AckTrackerIdentityAuthentication(const AckTrackerIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTrackerIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTrackerIdentityAuthentication::~AckTrackerIdentityAuthentication() {
  SharedDtor();
}

void AckTrackerIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckTrackerIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTrackerIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTrackerIdentityAuthentication_descriptor_;
}

const AckTrackerIdentityAuthentication& AckTrackerIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckTrackerIdentityAuthentication* AckTrackerIdentityAuthentication::default_instance_ = NULL;

AckTrackerIdentityAuthentication* AckTrackerIdentityAuthentication::New() const {
  return new AckTrackerIdentityAuthentication;
}

void AckTrackerIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTrackerIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTrackerIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTrackerIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTrackerIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTrackerIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTrackerIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTrackerIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTrackerIdentityAuthentication::MergeFrom(const AckTrackerIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTrackerIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTrackerIdentityAuthentication::CopyFrom(const AckTrackerIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTrackerIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckTrackerIdentityAuthentication::Swap(AckTrackerIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTrackerIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTrackerIdentityAuthentication_descriptor_;
  metadata.reflection = AckTrackerIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGVIdentityAuthentication::kSeqnoFieldNumber;
const int RequestGVIdentityAuthentication::kUseridFieldNumber;
const int RequestGVIdentityAuthentication::kPasswordFieldNumber;
const int RequestGVIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestGVIdentityAuthentication::RequestGVIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGVIdentityAuthentication::InitAsDefaultInstance() {
}

RequestGVIdentityAuthentication::RequestGVIdentityAuthentication(const RequestGVIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGVIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGVIdentityAuthentication::~RequestGVIdentityAuthentication() {
  SharedDtor();
}

void RequestGVIdentityAuthentication::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestGVIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGVIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGVIdentityAuthentication_descriptor_;
}

const RequestGVIdentityAuthentication& RequestGVIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestGVIdentityAuthentication* RequestGVIdentityAuthentication::default_instance_ = NULL;

RequestGVIdentityAuthentication* RequestGVIdentityAuthentication::New() const {
  return new RequestGVIdentityAuthentication;
}

void RequestGVIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGVIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGVIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGVIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGVIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGVIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGVIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGVIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGVIdentityAuthentication::MergeFrom(const RequestGVIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGVIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGVIdentityAuthentication::CopyFrom(const RequestGVIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGVIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGVIdentityAuthentication::Swap(RequestGVIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGVIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGVIdentityAuthentication_descriptor_;
  metadata.reflection = RequestGVIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGVIdentityAuthentication::kSeqnoFieldNumber;
const int AckGVIdentityAuthentication::kResultFieldNumber;
const int AckGVIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckGVIdentityAuthentication::AckGVIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGVIdentityAuthentication::InitAsDefaultInstance() {
}

AckGVIdentityAuthentication::AckGVIdentityAuthentication(const AckGVIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGVIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGVIdentityAuthentication::~AckGVIdentityAuthentication() {
  SharedDtor();
}

void AckGVIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckGVIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGVIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGVIdentityAuthentication_descriptor_;
}

const AckGVIdentityAuthentication& AckGVIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckGVIdentityAuthentication* AckGVIdentityAuthentication::default_instance_ = NULL;

AckGVIdentityAuthentication* AckGVIdentityAuthentication::New() const {
  return new AckGVIdentityAuthentication;
}

void AckGVIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGVIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGVIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGVIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGVIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGVIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGVIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGVIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGVIdentityAuthentication::MergeFrom(const AckGVIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGVIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGVIdentityAuthentication::CopyFrom(const AckGVIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGVIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckGVIdentityAuthentication::Swap(AckGVIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGVIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGVIdentityAuthentication_descriptor_;
  metadata.reflection = AckGVIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGSIdentityAuthentication::kSeqnoFieldNumber;
const int RequestGSIdentityAuthentication::kUseridFieldNumber;
const int RequestGSIdentityAuthentication::kPasswordFieldNumber;
const int RequestGSIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestGSIdentityAuthentication::RequestGSIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGSIdentityAuthentication::InitAsDefaultInstance() {
}

RequestGSIdentityAuthentication::RequestGSIdentityAuthentication(const RequestGSIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGSIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGSIdentityAuthentication::~RequestGSIdentityAuthentication() {
  SharedDtor();
}

void RequestGSIdentityAuthentication::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestGSIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGSIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGSIdentityAuthentication_descriptor_;
}

const RequestGSIdentityAuthentication& RequestGSIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestGSIdentityAuthentication* RequestGSIdentityAuthentication::default_instance_ = NULL;

RequestGSIdentityAuthentication* RequestGSIdentityAuthentication::New() const {
  return new RequestGSIdentityAuthentication;
}

void RequestGSIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGSIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGSIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGSIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGSIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGSIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGSIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGSIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGSIdentityAuthentication::MergeFrom(const RequestGSIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGSIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGSIdentityAuthentication::CopyFrom(const RequestGSIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGSIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestGSIdentityAuthentication::Swap(RequestGSIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGSIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGSIdentityAuthentication_descriptor_;
  metadata.reflection = RequestGSIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGSIdentityAuthentication::kSeqnoFieldNumber;
const int AckGSIdentityAuthentication::kResultFieldNumber;
const int AckGSIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckGSIdentityAuthentication::AckGSIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGSIdentityAuthentication::InitAsDefaultInstance() {
}

AckGSIdentityAuthentication::AckGSIdentityAuthentication(const AckGSIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGSIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGSIdentityAuthentication::~AckGSIdentityAuthentication() {
  SharedDtor();
}

void AckGSIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckGSIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGSIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGSIdentityAuthentication_descriptor_;
}

const AckGSIdentityAuthentication& AckGSIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckGSIdentityAuthentication* AckGSIdentityAuthentication::default_instance_ = NULL;

AckGSIdentityAuthentication* AckGSIdentityAuthentication::New() const {
  return new AckGSIdentityAuthentication;
}

void AckGSIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGSIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGSIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGSIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGSIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGSIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGSIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGSIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGSIdentityAuthentication::MergeFrom(const AckGSIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGSIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGSIdentityAuthentication::CopyFrom(const AckGSIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGSIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckGSIdentityAuthentication::Swap(AckGSIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGSIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGSIdentityAuthentication_descriptor_;
  metadata.reflection = AckGSIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestIVIdentityAuthentication::kSeqnoFieldNumber;
const int RequestIVIdentityAuthentication::kUseridFieldNumber;
const int RequestIVIdentityAuthentication::kPasswordFieldNumber;
const int RequestIVIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestIVIdentityAuthentication::RequestIVIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestIVIdentityAuthentication::InitAsDefaultInstance() {
}

RequestIVIdentityAuthentication::RequestIVIdentityAuthentication(const RequestIVIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestIVIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestIVIdentityAuthentication::~RequestIVIdentityAuthentication() {
  SharedDtor();
}

void RequestIVIdentityAuthentication::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestIVIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestIVIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestIVIdentityAuthentication_descriptor_;
}

const RequestIVIdentityAuthentication& RequestIVIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestIVIdentityAuthentication* RequestIVIdentityAuthentication::default_instance_ = NULL;

RequestIVIdentityAuthentication* RequestIVIdentityAuthentication::New() const {
  return new RequestIVIdentityAuthentication;
}

void RequestIVIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestIVIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestIVIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestIVIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestIVIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestIVIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestIVIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestIVIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestIVIdentityAuthentication::MergeFrom(const RequestIVIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestIVIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestIVIdentityAuthentication::CopyFrom(const RequestIVIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIVIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestIVIdentityAuthentication::Swap(RequestIVIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestIVIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestIVIdentityAuthentication_descriptor_;
  metadata.reflection = RequestIVIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIVIdentityAuthentication::kSeqnoFieldNumber;
const int AckIVIdentityAuthentication::kResultFieldNumber;
const int AckIVIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckIVIdentityAuthentication::AckIVIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckIVIdentityAuthentication::InitAsDefaultInstance() {
}

AckIVIdentityAuthentication::AckIVIdentityAuthentication(const AckIVIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckIVIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIVIdentityAuthentication::~AckIVIdentityAuthentication() {
  SharedDtor();
}

void AckIVIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckIVIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIVIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIVIdentityAuthentication_descriptor_;
}

const AckIVIdentityAuthentication& AckIVIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckIVIdentityAuthentication* AckIVIdentityAuthentication::default_instance_ = NULL;

AckIVIdentityAuthentication* AckIVIdentityAuthentication::New() const {
  return new AckIVIdentityAuthentication;
}

void AckIVIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIVIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckIVIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckIVIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckIVIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIVIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIVIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIVIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIVIdentityAuthentication::MergeFrom(const AckIVIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIVIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIVIdentityAuthentication::CopyFrom(const AckIVIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIVIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckIVIdentityAuthentication::Swap(AckIVIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIVIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIVIdentityAuthentication_descriptor_;
  metadata.reflection = AckIVIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestQQBotIdentityAuthentication::kSeqnoFieldNumber;
const int RequestQQBotIdentityAuthentication::kUseridFieldNumber;
const int RequestQQBotIdentityAuthentication::kPasswordFieldNumber;
const int RequestQQBotIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

RequestQQBotIdentityAuthentication::RequestQQBotIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestQQBotIdentityAuthentication::InitAsDefaultInstance() {
}

RequestQQBotIdentityAuthentication::RequestQQBotIdentityAuthentication(const RequestQQBotIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestQQBotIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQQBotIdentityAuthentication::~RequestQQBotIdentityAuthentication() {
  SharedDtor();
}

void RequestQQBotIdentityAuthentication::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void RequestQQBotIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQQBotIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQQBotIdentityAuthentication_descriptor_;
}

const RequestQQBotIdentityAuthentication& RequestQQBotIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestQQBotIdentityAuthentication* RequestQQBotIdentityAuthentication::default_instance_ = NULL;

RequestQQBotIdentityAuthentication* RequestQQBotIdentityAuthentication::New() const {
  return new RequestQQBotIdentityAuthentication;
}

void RequestQQBotIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestQQBotIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestQQBotIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestQQBotIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestQQBotIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQQBotIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestQQBotIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestQQBotIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestQQBotIdentityAuthentication::MergeFrom(const RequestQQBotIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestQQBotIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQQBotIdentityAuthentication::CopyFrom(const RequestQQBotIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQQBotIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestQQBotIdentityAuthentication::Swap(RequestQQBotIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestQQBotIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQQBotIdentityAuthentication_descriptor_;
  metadata.reflection = RequestQQBotIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckQQBotIdentityAuthentication::kSeqnoFieldNumber;
const int AckQQBotIdentityAuthentication::kResultFieldNumber;
const int AckQQBotIdentityAuthentication::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckQQBotIdentityAuthentication::AckQQBotIdentityAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckQQBotIdentityAuthentication::InitAsDefaultInstance() {
}

AckQQBotIdentityAuthentication::AckQQBotIdentityAuthentication(const AckQQBotIdentityAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckQQBotIdentityAuthentication::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckQQBotIdentityAuthentication::~AckQQBotIdentityAuthentication() {
  SharedDtor();
}

void AckQQBotIdentityAuthentication::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckQQBotIdentityAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckQQBotIdentityAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckQQBotIdentityAuthentication_descriptor_;
}

const AckQQBotIdentityAuthentication& AckQQBotIdentityAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckQQBotIdentityAuthentication* AckQQBotIdentityAuthentication::default_instance_ = NULL;

AckQQBotIdentityAuthentication* AckQQBotIdentityAuthentication::New() const {
  return new AckQQBotIdentityAuthentication;
}

void AckQQBotIdentityAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckQQBotIdentityAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extradata;
        break;
      }

      // optional string extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckQQBotIdentityAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckQQBotIdentityAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string extradata = 3;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckQQBotIdentityAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string extradata = 3;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckQQBotIdentityAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckQQBotIdentityAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckQQBotIdentityAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckQQBotIdentityAuthentication::MergeFrom(const AckQQBotIdentityAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckQQBotIdentityAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQQBotIdentityAuthentication::CopyFrom(const AckQQBotIdentityAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQQBotIdentityAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckQQBotIdentityAuthentication::Swap(AckQQBotIdentityAuthentication* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckQQBotIdentityAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckQQBotIdentityAuthentication_descriptor_;
  metadata.reflection = AckQQBotIdentityAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsInformation::kLongitudeFieldNumber;
const int GpsInformation::kLatitudeFieldNumber;
const int GpsInformation::kAltitudeFieldNumber;
const int GpsInformation::kVelocityFieldNumber;
#endif  // !_MSC_VER

GpsInformation::GpsInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpsInformation::InitAsDefaultInstance() {
}

GpsInformation::GpsInformation(const GpsInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpsInformation::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsInformation::~GpsInformation() {
  SharedDtor();
}

void GpsInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GpsInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsInformation_descriptor_;
}

const GpsInformation& GpsInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

GpsInformation* GpsInformation::default_instance_ = NULL;

GpsInformation* GpsInformation::New() const {
  return new GpsInformation;
}

void GpsInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longitude_ = 0;
    latitude_ = 0;
    altitude_ = 0;
  }
  velocity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 longitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_latitude;
        break;
      }

      // required int32 latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_altitude;
        break;
      }

      // required int32 altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity;
        break;
      }

      // repeated float velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpsInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->longitude(), output);
  }

  // required int32 latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->latitude(), output);
  }

  // required int32 altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->altitude(), output);
  }

  // repeated float velocity = 4;
  for (int i = 0; i < this->velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->velocity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpsInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->longitude(), target);
  }

  // required int32 latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->latitude(), target);
  }

  // required int32 altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->altitude(), target);
  }

  // repeated float velocity = 4;
  for (int i = 0; i < this->velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->velocity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpsInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 longitude = 1;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // required int32 latitude = 2;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // required int32 altitude = 3;
    if (has_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altitude());
    }

  }
  // repeated float velocity = 4;
  {
    int data_size = 0;
    data_size = 4 * this->velocity_size();
    total_size += 1 * this->velocity_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpsInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsInformation::MergeFrom(const GpsInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  velocity_.MergeFrom(from.velocity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInformation::CopyFrom(const GpsInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GpsInformation::Swap(GpsInformation* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(altitude_, other->altitude_);
    velocity_.Swap(&other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpsInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsInformation_descriptor_;
  metadata.reflection = GpsInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UavAttitude::kRollFieldNumber;
const int UavAttitude::kPitchFieldNumber;
const int UavAttitude::kYawFieldNumber;
const int UavAttitude::kRelativeAltFieldNumber;
const int UavAttitude::kGroundspeedFieldNumber;
#endif  // !_MSC_VER

UavAttitude::UavAttitude()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UavAttitude::InitAsDefaultInstance() {
}

UavAttitude::UavAttitude(const UavAttitude& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UavAttitude::SharedCtor() {
  _cached_size_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  relative_alt_ = 0;
  groundspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UavAttitude::~UavAttitude() {
  SharedDtor();
}

void UavAttitude::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UavAttitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UavAttitude::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UavAttitude_descriptor_;
}

const UavAttitude& UavAttitude::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UavAttitude* UavAttitude::default_instance_ = NULL;

UavAttitude* UavAttitude::New() const {
  return new UavAttitude;
}

void UavAttitude::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roll_ = 0;
    pitch_ = 0;
    yaw_ = 0;
    relative_alt_ = 0;
    groundspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UavAttitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float roll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }

      // required float yaw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relative_alt;
        break;
      }

      // required float relative_alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relative_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_alt_)));
          set_has_relative_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_groundspeed;
        break;
      }

      // required float groundspeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_groundspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &groundspeed_)));
          set_has_groundspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UavAttitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float roll = 1;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll(), output);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // required float relative_alt = 4;
  if (has_relative_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relative_alt(), output);
  }

  // required float groundspeed = 5;
  if (has_groundspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->groundspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UavAttitude::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float roll = 1;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roll(), target);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // required float relative_alt = 4;
  if (has_relative_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relative_alt(), target);
  }

  // required float groundspeed = 5;
  if (has_groundspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->groundspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UavAttitude::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float roll = 1;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required float relative_alt = 4;
    if (has_relative_alt()) {
      total_size += 1 + 4;
    }

    // required float groundspeed = 5;
    if (has_groundspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UavAttitude::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UavAttitude* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UavAttitude*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UavAttitude::MergeFrom(const UavAttitude& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_relative_alt()) {
      set_relative_alt(from.relative_alt());
    }
    if (from.has_groundspeed()) {
      set_groundspeed(from.groundspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UavAttitude::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavAttitude::CopyFrom(const UavAttitude& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavAttitude::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UavAttitude::Swap(UavAttitude* other) {
  if (other != this) {
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(relative_alt_, other->relative_alt_);
    std::swap(groundspeed_, other->groundspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UavAttitude::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UavAttitude_descriptor_;
  metadata.reflection = UavAttitude_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationStatus::kOperationmodeFieldNumber;
const int OperationStatus::kVoltageFieldNumber;
const int OperationStatus::kSurplusenergyFieldNumber;
const int OperationStatus::kJetvelocityFieldNumber;
const int OperationStatus::kSprayeddoseFieldNumber;
#endif  // !_MSC_VER

OperationStatus::OperationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationStatus::InitAsDefaultInstance() {
}

OperationStatus::OperationStatus(const OperationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationStatus::SharedCtor() {
  _cached_size_ = 0;
  operationmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voltage_ = 0;
  surplusenergy_ = 0;
  jetvelocity_ = 0;
  sprayeddose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationStatus::~OperationStatus() {
  SharedDtor();
}

void OperationStatus::SharedDtor() {
  if (operationmode_ != &::google::protobuf::internal::kEmptyString) {
    delete operationmode_;
  }
  if (this != default_instance_) {
  }
}

void OperationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationStatus_descriptor_;
}

const OperationStatus& OperationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationStatus* OperationStatus::default_instance_ = NULL;

OperationStatus* OperationStatus::New() const {
  return new OperationStatus;
}

void OperationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operationmode()) {
      if (operationmode_ != &::google::protobuf::internal::kEmptyString) {
        operationmode_->clear();
      }
    }
    voltage_ = 0;
    surplusenergy_ = 0;
    jetvelocity_ = 0;
    sprayeddose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operationmode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operationmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operationmode().data(), this->operationmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_voltage;
        break;
      }

      // optional float voltage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_surplusenergy;
        break;
      }

      // optional float surplusenergy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_surplusenergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surplusenergy_)));
          set_has_surplusenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_jetvelocity;
        break;
      }

      // optional float jetvelocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jetvelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jetvelocity_)));
          set_has_jetvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_sprayeddose;
        break;
      }

      // optional float sprayeddose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sprayeddose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sprayeddose_)));
          set_has_sprayeddose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string operationmode = 1;
  if (has_operationmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operationmode().data(), this->operationmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operationmode(), output);
  }

  // optional float voltage = 2;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->voltage(), output);
  }

  // optional float surplusenergy = 3;
  if (has_surplusenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->surplusenergy(), output);
  }

  // optional float jetvelocity = 4;
  if (has_jetvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->jetvelocity(), output);
  }

  // optional float sprayeddose = 5;
  if (has_sprayeddose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sprayeddose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string operationmode = 1;
  if (has_operationmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operationmode().data(), this->operationmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operationmode(), target);
  }

  // optional float voltage = 2;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->voltage(), target);
  }

  // optional float surplusenergy = 3;
  if (has_surplusenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->surplusenergy(), target);
  }

  // optional float jetvelocity = 4;
  if (has_jetvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->jetvelocity(), target);
  }

  // optional float sprayeddose = 5;
  if (has_sprayeddose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sprayeddose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string operationmode = 1;
    if (has_operationmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operationmode());
    }

    // optional float voltage = 2;
    if (has_voltage()) {
      total_size += 1 + 4;
    }

    // optional float surplusenergy = 3;
    if (has_surplusenergy()) {
      total_size += 1 + 4;
    }

    // optional float jetvelocity = 4;
    if (has_jetvelocity()) {
      total_size += 1 + 4;
    }

    // optional float sprayeddose = 5;
    if (has_sprayeddose()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operationmode()) {
      set_operationmode(from.operationmode());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_surplusenergy()) {
      set_surplusenergy(from.surplusenergy());
    }
    if (from.has_jetvelocity()) {
      set_jetvelocity(from.jetvelocity());
    }
    if (from.has_sprayeddose()) {
      set_sprayeddose(from.sprayeddose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {

  return true;
}

void OperationStatus::Swap(OperationStatus* other) {
  if (other != this) {
    std::swap(operationmode_, other->operationmode_);
    std::swap(voltage_, other->voltage_);
    std::swap(surplusenergy_, other->surplusenergy_);
    std::swap(jetvelocity_, other->jetvelocity_);
    std::swap(sprayeddose_, other->sprayeddose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationStatus_descriptor_;
  metadata.reflection = OperationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationParams::kAlarmvoltageFieldNumber;
const int OperationParams::kAlarmdoseFieldNumber;
const int OperationParams::kSprayingwidthFieldNumber;
const int OperationParams::kDesiredaltitudeFieldNumber;
const int OperationParams::kDesiredvelocityFieldNumber;
const int OperationParams::kJetvelocityFieldNumber;
#endif  // !_MSC_VER

OperationParams::OperationParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationParams::InitAsDefaultInstance() {
}

OperationParams::OperationParams(const OperationParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationParams::SharedCtor() {
  _cached_size_ = 0;
  alarmvoltage_ = 0;
  alarmdose_ = 0;
  sprayingwidth_ = 0;
  desiredaltitude_ = 0;
  desiredvelocity_ = 0;
  jetvelocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationParams::~OperationParams() {
  SharedDtor();
}

void OperationParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationParams_descriptor_;
}

const OperationParams& OperationParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationParams* OperationParams::default_instance_ = NULL;

OperationParams* OperationParams::New() const {
  return new OperationParams;
}

void OperationParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alarmvoltage_ = 0;
    alarmdose_ = 0;
    sprayingwidth_ = 0;
    desiredaltitude_ = 0;
    desiredvelocity_ = 0;
    jetvelocity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alarmvoltage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmvoltage_)));
          set_has_alarmvoltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alarmdose;
        break;
      }

      // optional float alarmdose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmdose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmdose_)));
          set_has_alarmdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sprayingwidth;
        break;
      }

      // optional float sprayingwidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sprayingwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sprayingwidth_)));
          set_has_sprayingwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_desiredaltitude;
        break;
      }

      // optional float desiredaltitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desiredaltitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desiredaltitude_)));
          set_has_desiredaltitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_desiredvelocity;
        break;
      }

      // optional float desiredvelocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desiredvelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desiredvelocity_)));
          set_has_desiredvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_jetvelocity;
        break;
      }

      // optional float jetvelocity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jetvelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jetvelocity_)));
          set_has_jetvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float alarmvoltage = 1;
  if (has_alarmvoltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alarmvoltage(), output);
  }

  // optional float alarmdose = 2;
  if (has_alarmdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alarmdose(), output);
  }

  // optional float sprayingwidth = 3;
  if (has_sprayingwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sprayingwidth(), output);
  }

  // optional float desiredaltitude = 4;
  if (has_desiredaltitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->desiredaltitude(), output);
  }

  // optional float desiredvelocity = 5;
  if (has_desiredvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->desiredvelocity(), output);
  }

  // optional float jetvelocity = 6;
  if (has_jetvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->jetvelocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float alarmvoltage = 1;
  if (has_alarmvoltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alarmvoltage(), target);
  }

  // optional float alarmdose = 2;
  if (has_alarmdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alarmdose(), target);
  }

  // optional float sprayingwidth = 3;
  if (has_sprayingwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sprayingwidth(), target);
  }

  // optional float desiredaltitude = 4;
  if (has_desiredaltitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->desiredaltitude(), target);
  }

  // optional float desiredvelocity = 5;
  if (has_desiredvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->desiredvelocity(), target);
  }

  // optional float jetvelocity = 6;
  if (has_jetvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->jetvelocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float alarmvoltage = 1;
    if (has_alarmvoltage()) {
      total_size += 1 + 4;
    }

    // optional float alarmdose = 2;
    if (has_alarmdose()) {
      total_size += 1 + 4;
    }

    // optional float sprayingwidth = 3;
    if (has_sprayingwidth()) {
      total_size += 1 + 4;
    }

    // optional float desiredaltitude = 4;
    if (has_desiredaltitude()) {
      total_size += 1 + 4;
    }

    // optional float desiredvelocity = 5;
    if (has_desiredvelocity()) {
      total_size += 1 + 4;
    }

    // optional float jetvelocity = 6;
    if (has_jetvelocity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationParams::MergeFrom(const OperationParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmvoltage()) {
      set_alarmvoltage(from.alarmvoltage());
    }
    if (from.has_alarmdose()) {
      set_alarmdose(from.alarmdose());
    }
    if (from.has_sprayingwidth()) {
      set_sprayingwidth(from.sprayingwidth());
    }
    if (from.has_desiredaltitude()) {
      set_desiredaltitude(from.desiredaltitude());
    }
    if (from.has_desiredvelocity()) {
      set_desiredvelocity(from.desiredvelocity());
    }
    if (from.has_jetvelocity()) {
      set_jetvelocity(from.jetvelocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationParams::CopyFrom(const OperationParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationParams::IsInitialized() const {

  return true;
}

void OperationParams::Swap(OperationParams* other) {
  if (other != this) {
    std::swap(alarmvoltage_, other->alarmvoltage_);
    std::swap(alarmdose_, other->alarmdose_);
    std::swap(sprayingwidth_, other->sprayingwidth_);
    std::swap(desiredaltitude_, other->desiredaltitude_);
    std::swap(desiredvelocity_, other->desiredvelocity_);
    std::swap(jetvelocity_, other->jetvelocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationParams_descriptor_;
  metadata.reflection = OperationParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationInformation::kUavidFieldNumber;
const int OperationInformation::kTimestampFieldNumber;
const int OperationInformation::kGpsFieldNumber;
const int OperationInformation::kStatusFieldNumber;
const int OperationInformation::kParamsFieldNumber;
const int OperationInformation::kAttitudeFieldNumber;
#endif  // !_MSC_VER

OperationInformation::OperationInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationInformation::InitAsDefaultInstance() {
  gps_ = const_cast< ::das::proto::GpsInformation*>(&::das::proto::GpsInformation::default_instance());
  status_ = const_cast< ::das::proto::OperationStatus*>(&::das::proto::OperationStatus::default_instance());
  params_ = const_cast< ::das::proto::OperationParams*>(&::das::proto::OperationParams::default_instance());
  attitude_ = const_cast< ::das::proto::UavAttitude*>(&::das::proto::UavAttitude::default_instance());
}

OperationInformation::OperationInformation(const OperationInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationInformation::SharedCtor() {
  _cached_size_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  gps_ = NULL;
  status_ = NULL;
  params_ = NULL;
  attitude_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationInformation::~OperationInformation() {
  SharedDtor();
}

void OperationInformation::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (this != default_instance_) {
    delete gps_;
    delete status_;
    delete params_;
    delete attitude_;
  }
}

void OperationInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationInformation_descriptor_;
}

const OperationInformation& OperationInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationInformation* OperationInformation::default_instance_ = NULL;

OperationInformation* OperationInformation::New() const {
  return new OperationInformation;
}

void OperationInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_gps()) {
      if (gps_ != NULL) gps_->::das::proto::GpsInformation::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::das::proto::OperationStatus::Clear();
    }
    if (has_params()) {
      if (params_ != NULL) params_->::das::proto::OperationParams::Clear();
    }
    if (has_attitude()) {
      if (attitude_ != NULL) attitude_->::das::proto::UavAttitude::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uavid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gps;
        break;
      }

      // required .das.proto.GpsInformation gps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional .das.proto.OperationStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // optional .das.proto.OperationParams params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attitude;
        break;
      }

      // optional .das.proto.UavAttitude attitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attitude()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uavid(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required .das.proto.GpsInformation gps = 3;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gps(), output);
  }

  // optional .das.proto.OperationStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status(), output);
  }

  // optional .das.proto.OperationParams params = 5;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(), output);
  }

  // optional .das.proto.UavAttitude attitude = 6;
  if (has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uavid(), target);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // required .das.proto.GpsInformation gps = 3;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gps(), target);
  }

  // optional .das.proto.OperationStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status(), target);
  }

  // optional .das.proto.OperationParams params = 5;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(), target);
  }

  // optional .das.proto.UavAttitude attitude = 6;
  if (has_attitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uavid = 1;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required .das.proto.GpsInformation gps = 3;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // optional .das.proto.OperationStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .das.proto.OperationParams params = 5;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

    // optional .das.proto.UavAttitude attitude = 6;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attitude());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationInformation::MergeFrom(const OperationInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_gps()) {
      mutable_gps()->::das::proto::GpsInformation::MergeFrom(from.gps());
    }
    if (from.has_status()) {
      mutable_status()->::das::proto::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_params()) {
      mutable_params()->::das::proto::OperationParams::MergeFrom(from.params());
    }
    if (from.has_attitude()) {
      mutable_attitude()->::das::proto::UavAttitude::MergeFrom(from.attitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationInformation::CopyFrom(const OperationInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  if (has_attitude()) {
    if (!this->attitude().IsInitialized()) return false;
  }
  return true;
}

void OperationInformation::Swap(OperationInformation* other) {
  if (other != this) {
    std::swap(uavid_, other->uavid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(gps_, other->gps_);
    std::swap(status_, other->status_);
    std::swap(params_, other->params_);
    std::swap(attitude_, other->attitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationInformation_descriptor_;
  metadata.reflection = OperationInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostOperationInformation::kSeqnoFieldNumber;
const int PostOperationInformation::kOiFieldNumber;
#endif  // !_MSC_VER

PostOperationInformation::PostOperationInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostOperationInformation::InitAsDefaultInstance() {
}

PostOperationInformation::PostOperationInformation(const PostOperationInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostOperationInformation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostOperationInformation::~PostOperationInformation() {
  SharedDtor();
}

void PostOperationInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostOperationInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostOperationInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostOperationInformation_descriptor_;
}

const PostOperationInformation& PostOperationInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostOperationInformation* PostOperationInformation::default_instance_ = NULL;

PostOperationInformation* PostOperationInformation::New() const {
  return new PostOperationInformation;
}

void PostOperationInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  oi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostOperationInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oi;
        break;
      }

      // repeated .das.proto.OperationInformation oi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostOperationInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated .das.proto.OperationInformation oi = 2;
  for (int i = 0; i < this->oi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostOperationInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated .das.proto.OperationInformation oi = 2;
  for (int i = 0; i < this->oi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->oi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostOperationInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated .das.proto.OperationInformation oi = 2;
  total_size += 1 * this->oi_size();
  for (int i = 0; i < this->oi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostOperationInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostOperationInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostOperationInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostOperationInformation::MergeFrom(const PostOperationInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  oi_.MergeFrom(from.oi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostOperationInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOperationInformation::CopyFrom(const PostOperationInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOperationInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < oi_size(); i++) {
    if (!this->oi(i).IsInitialized()) return false;
  }
  return true;
}

void PostOperationInformation::Swap(PostOperationInformation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    oi_.Swap(&other->oi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostOperationInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostOperationInformation_descriptor_;
  metadata.reflection = PostOperationInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOperationInformation::kSeqnoFieldNumber;
const int AckOperationInformation::kResultFieldNumber;
#endif  // !_MSC_VER

AckOperationInformation::AckOperationInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOperationInformation::InitAsDefaultInstance() {
}

AckOperationInformation::AckOperationInformation(const AckOperationInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOperationInformation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOperationInformation::~AckOperationInformation() {
  SharedDtor();
}

void AckOperationInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOperationInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOperationInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOperationInformation_descriptor_;
}

const AckOperationInformation& AckOperationInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckOperationInformation* AckOperationInformation::default_instance_ = NULL;

AckOperationInformation* AckOperationInformation::New() const {
  return new AckOperationInformation;
}

void AckOperationInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOperationInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOperationInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOperationInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOperationInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOperationInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOperationInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOperationInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOperationInformation::MergeFrom(const AckOperationInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOperationInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOperationInformation::CopyFrom(const AckOperationInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOperationInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckOperationInformation::Swap(AckOperationInformation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOperationInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOperationInformation_descriptor_;
  metadata.reflection = AckOperationInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coordinate::kLongitudeFieldNumber;
const int Coordinate::kLatitudeFieldNumber;
const int Coordinate::kAltitudeFieldNumber;
#endif  // !_MSC_VER

Coordinate::Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coordinate::InitAsDefaultInstance() {
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coordinate::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coordinate::~Coordinate() {
  SharedDtor();
}

void Coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New() const {
  return new Coordinate;
}

void Coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longitude_ = 0;
    latitude_ = 0;
    altitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 longitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_latitude;
        break;
      }

      // required int32 latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_altitude;
        break;
      }

      // optional int32 altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->longitude(), output);
  }

  // required int32 latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->latitude(), output);
  }

  // optional int32 altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->altitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->longitude(), target);
  }

  // required int32 latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->latitude(), target);
  }

  // optional int32 altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->altitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 longitude = 1;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // required int32 latitude = 2;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // optional int32 altitude = 3;
    if (has_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altitude());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationSnapshot::kDevidFieldNumber;
const int OperationSnapshot::kTimestampFieldNumber;
const int OperationSnapshot::kPosFieldNumber;
const int OperationSnapshot::kSizeFieldNumber;
const int OperationSnapshot::kPicFieldNumber;
#endif  // !_MSC_VER

OperationSnapshot::OperationSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationSnapshot::InitAsDefaultInstance() {
  pos_ = const_cast< ::das::proto::Coordinate*>(&::das::proto::Coordinate::default_instance());
}

OperationSnapshot::OperationSnapshot(const OperationSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationSnapshot::SharedCtor() {
  _cached_size_ = 0;
  devid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  size_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationSnapshot::~OperationSnapshot() {
  SharedDtor();
}

void OperationSnapshot::SharedDtor() {
  if (devid_ != &::google::protobuf::internal::kEmptyString) {
    delete devid_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void OperationSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationSnapshot_descriptor_;
}

const OperationSnapshot& OperationSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationSnapshot* OperationSnapshot::default_instance_ = NULL;

OperationSnapshot* OperationSnapshot::New() const {
  return new OperationSnapshot;
}

void OperationSnapshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_devid()) {
      if (devid_ != &::google::protobuf::internal::kEmptyString) {
        devid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::das::proto::Coordinate::Clear();
    }
    size_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string devid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .das.proto.Coordinate pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pic;
        break;
      }

      // required bytes pic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string devid = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->devid(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .das.proto.Coordinate pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // required bytes pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->pic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string devid = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devid(), target);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .das.proto.Coordinate pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // required bytes pic = 5;
  if (has_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string devid = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devid());
    }

    // required uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .das.proto.Coordinate pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required bytes pic = 5;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationSnapshot::MergeFrom(const OperationSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pos()) {
      mutable_pos()->::das::proto::Coordinate::MergeFrom(from.pos());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationSnapshot::CopyFrom(const OperationSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationSnapshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void OperationSnapshot::Swap(OperationSnapshot* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(pos_, other->pos_);
    std::swap(size_, other->size_);
    std::swap(pic_, other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationSnapshot_descriptor_;
  metadata.reflection = OperationSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostOperationSnapshot::kSeqnoFieldNumber;
const int PostOperationSnapshot::kOsFieldNumber;
#endif  // !_MSC_VER

PostOperationSnapshot::PostOperationSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostOperationSnapshot::InitAsDefaultInstance() {
  os_ = const_cast< ::das::proto::OperationSnapshot*>(&::das::proto::OperationSnapshot::default_instance());
}

PostOperationSnapshot::PostOperationSnapshot(const PostOperationSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostOperationSnapshot::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  os_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostOperationSnapshot::~PostOperationSnapshot() {
  SharedDtor();
}

void PostOperationSnapshot::SharedDtor() {
  if (this != default_instance_) {
    delete os_;
  }
}

void PostOperationSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostOperationSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostOperationSnapshot_descriptor_;
}

const PostOperationSnapshot& PostOperationSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostOperationSnapshot* PostOperationSnapshot::default_instance_ = NULL;

PostOperationSnapshot* PostOperationSnapshot::New() const {
  return new PostOperationSnapshot;
}

void PostOperationSnapshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_os()) {
      if (os_ != NULL) os_->::das::proto::OperationSnapshot::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostOperationSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os;
        break;
      }

      // required .das.proto.OperationSnapshot os = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostOperationSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.OperationSnapshot os = 2;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->os(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostOperationSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.OperationSnapshot os = 2;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->os(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostOperationSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.OperationSnapshot os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->os());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostOperationSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostOperationSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostOperationSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostOperationSnapshot::MergeFrom(const PostOperationSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_os()) {
      mutable_os()->::das::proto::OperationSnapshot::MergeFrom(from.os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostOperationSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOperationSnapshot::CopyFrom(const PostOperationSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOperationSnapshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_os()) {
    if (!this->os().IsInitialized()) return false;
  }
  return true;
}

void PostOperationSnapshot::Swap(PostOperationSnapshot* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostOperationSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostOperationSnapshot_descriptor_;
  metadata.reflection = PostOperationSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostOperationSnapshot::kSeqnoFieldNumber;
const int AckPostOperationSnapshot::kResultFieldNumber;
#endif  // !_MSC_VER

AckPostOperationSnapshot::AckPostOperationSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostOperationSnapshot::InitAsDefaultInstance() {
}

AckPostOperationSnapshot::AckPostOperationSnapshot(const AckPostOperationSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostOperationSnapshot::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostOperationSnapshot::~AckPostOperationSnapshot() {
  SharedDtor();
}

void AckPostOperationSnapshot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPostOperationSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostOperationSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostOperationSnapshot_descriptor_;
}

const AckPostOperationSnapshot& AckPostOperationSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostOperationSnapshot* AckPostOperationSnapshot::default_instance_ = NULL;

AckPostOperationSnapshot* AckPostOperationSnapshot::New() const {
  return new AckPostOperationSnapshot;
}

void AckPostOperationSnapshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostOperationSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostOperationSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostOperationSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostOperationSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostOperationSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostOperationSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostOperationSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostOperationSnapshot::MergeFrom(const AckPostOperationSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostOperationSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostOperationSnapshot::CopyFrom(const AckPostOperationSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostOperationSnapshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostOperationSnapshot::Swap(AckPostOperationSnapshot* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostOperationSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostOperationSnapshot_descriptor_;
  metadata.reflection = AckPostOperationSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Outline::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

Outline::Outline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Outline::InitAsDefaultInstance() {
}

Outline::Outline(const Outline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Outline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Outline::~Outline() {
  SharedDtor();
}

void Outline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Outline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Outline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Outline_descriptor_;
}

const Outline& Outline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

Outline* Outline::default_instance_ = NULL;

Outline* Outline::New() const {
  return new Outline;
}

void Outline::Clear() {
  coordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Outline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .das.proto.Coordinate coordinates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_coordinates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Outline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .das.proto.Coordinate coordinates = 1;
  for (int i = 0; i < this->coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Outline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .das.proto.Coordinate coordinates = 1;
  for (int i = 0; i < this->coordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Outline::ByteSize() const {
  int total_size = 0;

  // repeated .das.proto.Coordinate coordinates = 1;
  total_size += 1 * this->coordinates_size();
  for (int i = 0; i < this->coordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Outline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Outline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Outline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Outline::MergeFrom(const Outline& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinates_.MergeFrom(from.coordinates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Outline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outline::CopyFrom(const Outline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outline::IsInitialized() const {

  for (int i = 0; i < coordinates_size(); i++) {
    if (!this->coordinates(i).IsInitialized()) return false;
  }
  return true;
}

void Outline::Swap(Outline* other) {
  if (other != this) {
    coordinates_.Swap(&other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Outline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Outline_descriptor_;
  metadata.reflection = Outline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParcelSurveyInformation::kSurveryoridFieldNumber;
const int ParcelSurveyInformation::kSurverytimeFieldNumber;
const int ParcelSurveyInformation::kSpFieldNumber;
const int ParcelSurveyInformation::kPoFieldNumber;
const int ParcelSurveyInformation::kBoFieldNumber;
const int ParcelSurveyInformation::kIdFieldNumber;
#endif  // !_MSC_VER

ParcelSurveyInformation::ParcelSurveyInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParcelSurveyInformation::InitAsDefaultInstance() {
  po_ = const_cast< ::das::proto::Outline*>(&::das::proto::Outline::default_instance());
}

ParcelSurveyInformation::ParcelSurveyInformation(const ParcelSurveyInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParcelSurveyInformation::SharedCtor() {
  _cached_size_ = 0;
  surveryorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  surverytime_ = GOOGLE_ULONGLONG(0);
  sp_ = 1;
  po_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParcelSurveyInformation::~ParcelSurveyInformation() {
  SharedDtor();
}

void ParcelSurveyInformation::SharedDtor() {
  if (surveryorid_ != &::google::protobuf::internal::kEmptyString) {
    delete surveryorid_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete po_;
  }
}

void ParcelSurveyInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParcelSurveyInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParcelSurveyInformation_descriptor_;
}

const ParcelSurveyInformation& ParcelSurveyInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ParcelSurveyInformation* ParcelSurveyInformation::default_instance_ = NULL;

ParcelSurveyInformation* ParcelSurveyInformation::New() const {
  return new ParcelSurveyInformation;
}

void ParcelSurveyInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_surveryorid()) {
      if (surveryorid_ != &::google::protobuf::internal::kEmptyString) {
        surveryorid_->clear();
      }
    }
    surverytime_ = GOOGLE_ULONGLONG(0);
    sp_ = 1;
    if (has_po()) {
      if (po_ != NULL) po_->::das::proto::Outline::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  bo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParcelSurveyInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string surveryorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surveryorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->surveryorid().data(), this->surveryorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_surverytime;
        break;
      }

      // required uint64 surverytime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surverytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &surverytime_)));
          set_has_surverytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sp;
        break;
      }

      // required .das.proto.SurveryPrecision sp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::das::proto::SurveryPrecision_IsValid(value)) {
            set_sp(static_cast< ::das::proto::SurveryPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_po;
        break;
      }

      // required .das.proto.Outline po = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_po:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_po()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bo;
        break;
      }

      // repeated .das.proto.Outline bo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bo;
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional string id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParcelSurveyInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string surveryorid = 1;
  if (has_surveryorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorid().data(), this->surveryorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->surveryorid(), output);
  }

  // required uint64 surverytime = 2;
  if (has_surverytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->surverytime(), output);
  }

  // required .das.proto.SurveryPrecision sp = 3;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sp(), output);
  }

  // required .das.proto.Outline po = 4;
  if (has_po()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->po(), output);
  }

  // repeated .das.proto.Outline bo = 5;
  for (int i = 0; i < this->bo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bo(i), output);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParcelSurveyInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string surveryorid = 1;
  if (has_surveryorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorid().data(), this->surveryorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surveryorid(), target);
  }

  // required uint64 surverytime = 2;
  if (has_surverytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->surverytime(), target);
  }

  // required .das.proto.SurveryPrecision sp = 3;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sp(), target);
  }

  // required .das.proto.Outline po = 4;
  if (has_po()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->po(), target);
  }

  // repeated .das.proto.Outline bo = 5;
  for (int i = 0; i < this->bo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bo(i), target);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParcelSurveyInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string surveryorid = 1;
    if (has_surveryorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surveryorid());
    }

    // required uint64 surverytime = 2;
    if (has_surverytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->surverytime());
    }

    // required .das.proto.SurveryPrecision sp = 3;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sp());
    }

    // required .das.proto.Outline po = 4;
    if (has_po()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->po());
    }

    // optional string id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated .das.proto.Outline bo = 5;
  total_size += 1 * this->bo_size();
  for (int i = 0; i < this->bo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParcelSurveyInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParcelSurveyInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParcelSurveyInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParcelSurveyInformation::MergeFrom(const ParcelSurveyInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  bo_.MergeFrom(from.bo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surveryorid()) {
      set_surveryorid(from.surveryorid());
    }
    if (from.has_surverytime()) {
      set_surverytime(from.surverytime());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_po()) {
      mutable_po()->::das::proto::Outline::MergeFrom(from.po());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParcelSurveyInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParcelSurveyInformation::CopyFrom(const ParcelSurveyInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParcelSurveyInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_po()) {
    if (!this->po().IsInitialized()) return false;
  }
  for (int i = 0; i < bo_size(); i++) {
    if (!this->bo(i).IsInitialized()) return false;
  }
  return true;
}

void ParcelSurveyInformation::Swap(ParcelSurveyInformation* other) {
  if (other != this) {
    std::swap(surveryorid_, other->surveryorid_);
    std::swap(surverytime_, other->surverytime_);
    std::swap(sp_, other->sp_);
    std::swap(po_, other->po_);
    bo_.Swap(&other->bo_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParcelSurveyInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParcelSurveyInformation_descriptor_;
  metadata.reflection = ParcelSurveyInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostParcelSurveyInformation::kSeqnoFieldNumber;
const int PostParcelSurveyInformation::kPsiFieldNumber;
#endif  // !_MSC_VER

PostParcelSurveyInformation::PostParcelSurveyInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostParcelSurveyInformation::InitAsDefaultInstance() {
  psi_ = const_cast< ::das::proto::ParcelSurveyInformation*>(&::das::proto::ParcelSurveyInformation::default_instance());
}

PostParcelSurveyInformation::PostParcelSurveyInformation(const PostParcelSurveyInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostParcelSurveyInformation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  psi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostParcelSurveyInformation::~PostParcelSurveyInformation() {
  SharedDtor();
}

void PostParcelSurveyInformation::SharedDtor() {
  if (this != default_instance_) {
    delete psi_;
  }
}

void PostParcelSurveyInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostParcelSurveyInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostParcelSurveyInformation_descriptor_;
}

const PostParcelSurveyInformation& PostParcelSurveyInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostParcelSurveyInformation* PostParcelSurveyInformation::default_instance_ = NULL;

PostParcelSurveyInformation* PostParcelSurveyInformation::New() const {
  return new PostParcelSurveyInformation;
}

void PostParcelSurveyInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_psi()) {
      if (psi_ != NULL) psi_->::das::proto::ParcelSurveyInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostParcelSurveyInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psi;
        break;
      }

      // required .das.proto.ParcelSurveyInformation psi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostParcelSurveyInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.ParcelSurveyInformation psi = 2;
  if (has_psi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->psi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostParcelSurveyInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.ParcelSurveyInformation psi = 2;
  if (has_psi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->psi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostParcelSurveyInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.ParcelSurveyInformation psi = 2;
    if (has_psi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostParcelSurveyInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostParcelSurveyInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostParcelSurveyInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostParcelSurveyInformation::MergeFrom(const PostParcelSurveyInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_psi()) {
      mutable_psi()->::das::proto::ParcelSurveyInformation::MergeFrom(from.psi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostParcelSurveyInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostParcelSurveyInformation::CopyFrom(const PostParcelSurveyInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostParcelSurveyInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_psi()) {
    if (!this->psi().IsInitialized()) return false;
  }
  return true;
}

void PostParcelSurveyInformation::Swap(PostParcelSurveyInformation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(psi_, other->psi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostParcelSurveyInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostParcelSurveyInformation_descriptor_;
  metadata.reflection = PostParcelSurveyInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostParcelSurveyInformation::kSeqnoFieldNumber;
const int AckPostParcelSurveyInformation::kResultFieldNumber;
const int AckPostParcelSurveyInformation::kPsiidFieldNumber;
#endif  // !_MSC_VER

AckPostParcelSurveyInformation::AckPostParcelSurveyInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostParcelSurveyInformation::InitAsDefaultInstance() {
}

AckPostParcelSurveyInformation::AckPostParcelSurveyInformation(const AckPostParcelSurveyInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostParcelSurveyInformation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  psiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostParcelSurveyInformation::~AckPostParcelSurveyInformation() {
  SharedDtor();
}

void AckPostParcelSurveyInformation::SharedDtor() {
  if (psiid_ != &::google::protobuf::internal::kEmptyString) {
    delete psiid_;
  }
  if (this != default_instance_) {
  }
}

void AckPostParcelSurveyInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostParcelSurveyInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostParcelSurveyInformation_descriptor_;
}

const AckPostParcelSurveyInformation& AckPostParcelSurveyInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostParcelSurveyInformation* AckPostParcelSurveyInformation::default_instance_ = NULL;

AckPostParcelSurveyInformation* AckPostParcelSurveyInformation::New() const {
  return new AckPostParcelSurveyInformation;
}

void AckPostParcelSurveyInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_psiid()) {
      if (psiid_ != &::google::protobuf::internal::kEmptyString) {
        psiid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostParcelSurveyInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psiid;
        break;
      }

      // optional string psiid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psiid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psiid().data(), this->psiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostParcelSurveyInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string psiid = 3;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->psiid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostParcelSurveyInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string psiid = 3;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->psiid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostParcelSurveyInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string psiid = 3;
    if (has_psiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psiid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostParcelSurveyInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostParcelSurveyInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostParcelSurveyInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostParcelSurveyInformation::MergeFrom(const AckPostParcelSurveyInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_psiid()) {
      set_psiid(from.psiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostParcelSurveyInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostParcelSurveyInformation::CopyFrom(const AckPostParcelSurveyInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostParcelSurveyInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostParcelSurveyInformation::Swap(AckPostParcelSurveyInformation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(psiid_, other->psiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostParcelSurveyInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostParcelSurveyInformation_descriptor_;
  metadata.reflection = AckPostParcelSurveyInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestParcelSurveyInformations::kSeqnoFieldNumber;
const int RequestParcelSurveyInformations::kPsiidFieldNumber;
const int RequestParcelSurveyInformations::kCoordinateFieldNumber;
#endif  // !_MSC_VER

RequestParcelSurveyInformations::RequestParcelSurveyInformations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestParcelSurveyInformations::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::das::proto::Coordinate*>(&::das::proto::Coordinate::default_instance());
}

RequestParcelSurveyInformations::RequestParcelSurveyInformations(const RequestParcelSurveyInformations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestParcelSurveyInformations::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  psiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestParcelSurveyInformations::~RequestParcelSurveyInformations() {
  SharedDtor();
}

void RequestParcelSurveyInformations::SharedDtor() {
  if (psiid_ != &::google::protobuf::internal::kEmptyString) {
    delete psiid_;
  }
  if (this != default_instance_) {
    delete coordinate_;
  }
}

void RequestParcelSurveyInformations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestParcelSurveyInformations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestParcelSurveyInformations_descriptor_;
}

const RequestParcelSurveyInformations& RequestParcelSurveyInformations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestParcelSurveyInformations* RequestParcelSurveyInformations::default_instance_ = NULL;

RequestParcelSurveyInformations* RequestParcelSurveyInformations::New() const {
  return new RequestParcelSurveyInformations;
}

void RequestParcelSurveyInformations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_psiid()) {
      if (psiid_ != &::google::protobuf::internal::kEmptyString) {
        psiid_->clear();
      }
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::das::proto::Coordinate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestParcelSurveyInformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psiid;
        break;
      }

      // optional string psiid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psiid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psiid().data(), this->psiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coordinate;
        break;
      }

      // optional .das.proto.Coordinate coordinate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestParcelSurveyInformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string psiid = 2;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->psiid(), output);
  }

  // optional .das.proto.Coordinate coordinate = 3;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coordinate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestParcelSurveyInformations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string psiid = 2;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->psiid(), target);
  }

  // optional .das.proto.Coordinate coordinate = 3;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coordinate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestParcelSurveyInformations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string psiid = 2;
    if (has_psiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psiid());
    }

    // optional .das.proto.Coordinate coordinate = 3;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestParcelSurveyInformations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestParcelSurveyInformations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestParcelSurveyInformations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestParcelSurveyInformations::MergeFrom(const RequestParcelSurveyInformations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_psiid()) {
      set_psiid(from.psiid());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::das::proto::Coordinate::MergeFrom(from.coordinate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestParcelSurveyInformations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestParcelSurveyInformations::CopyFrom(const RequestParcelSurveyInformations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestParcelSurveyInformations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void RequestParcelSurveyInformations::Swap(RequestParcelSurveyInformations* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(psiid_, other->psiid_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestParcelSurveyInformations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestParcelSurveyInformations_descriptor_;
  metadata.reflection = RequestParcelSurveyInformations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestParcelSurveyInformations::kSeqnoFieldNumber;
const int AckRequestParcelSurveyInformations::kResultFieldNumber;
const int AckRequestParcelSurveyInformations::kPsisFieldNumber;
#endif  // !_MSC_VER

AckRequestParcelSurveyInformations::AckRequestParcelSurveyInformations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestParcelSurveyInformations::InitAsDefaultInstance() {
}

AckRequestParcelSurveyInformations::AckRequestParcelSurveyInformations(const AckRequestParcelSurveyInformations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestParcelSurveyInformations::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestParcelSurveyInformations::~AckRequestParcelSurveyInformations() {
  SharedDtor();
}

void AckRequestParcelSurveyInformations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestParcelSurveyInformations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestParcelSurveyInformations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestParcelSurveyInformations_descriptor_;
}

const AckRequestParcelSurveyInformations& AckRequestParcelSurveyInformations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestParcelSurveyInformations* AckRequestParcelSurveyInformations::default_instance_ = NULL;

AckRequestParcelSurveyInformations* AckRequestParcelSurveyInformations::New() const {
  return new AckRequestParcelSurveyInformations;
}

void AckRequestParcelSurveyInformations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  psis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestParcelSurveyInformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psis;
        break;
      }

      // repeated .das.proto.ParcelSurveyInformation psis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psis;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestParcelSurveyInformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .das.proto.ParcelSurveyInformation psis = 3;
  for (int i = 0; i < this->psis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->psis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestParcelSurveyInformations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .das.proto.ParcelSurveyInformation psis = 3;
  for (int i = 0; i < this->psis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->psis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestParcelSurveyInformations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.ParcelSurveyInformation psis = 3;
  total_size += 1 * this->psis_size();
  for (int i = 0; i < this->psis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestParcelSurveyInformations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestParcelSurveyInformations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestParcelSurveyInformations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestParcelSurveyInformations::MergeFrom(const AckRequestParcelSurveyInformations& from) {
  GOOGLE_CHECK_NE(&from, this);
  psis_.MergeFrom(from.psis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestParcelSurveyInformations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestParcelSurveyInformations::CopyFrom(const AckRequestParcelSurveyInformations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestParcelSurveyInformations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < psis_size(); i++) {
    if (!this->psis(i).IsInitialized()) return false;
  }
  return true;
}

void AckRequestParcelSurveyInformations::Swap(AckRequestParcelSurveyInformations* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    psis_.Swap(&other->psis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestParcelSurveyInformations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestParcelSurveyInformations_descriptor_;
  metadata.reflection = AckRequestParcelSurveyInformations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParcelContracter::kNameFieldNumber;
const int ParcelContracter::kBirthdateFieldNumber;
const int ParcelContracter::kAddressFieldNumber;
const int ParcelContracter::kMobilenoFieldNumber;
const int ParcelContracter::kPhonenoFieldNumber;
const int ParcelContracter::kWeixinFieldNumber;
const int ParcelContracter::kIdFieldNumber;
#endif  // !_MSC_VER

ParcelContracter::ParcelContracter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParcelContracter::InitAsDefaultInstance() {
}

ParcelContracter::ParcelContracter(const ParcelContracter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParcelContracter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthdate_ = GOOGLE_ULONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobileno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phoneno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weixin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParcelContracter::~ParcelContracter() {
  SharedDtor();
}

void ParcelContracter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
    delete mobileno_;
  }
  if (phoneno_ != &::google::protobuf::internal::kEmptyString) {
    delete phoneno_;
  }
  if (weixin_ != &::google::protobuf::internal::kEmptyString) {
    delete weixin_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ParcelContracter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParcelContracter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParcelContracter_descriptor_;
}

const ParcelContracter& ParcelContracter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ParcelContracter* ParcelContracter::default_instance_ = NULL;

ParcelContracter* ParcelContracter::New() const {
  return new ParcelContracter;
}

void ParcelContracter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    birthdate_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_mobileno()) {
      if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
        mobileno_->clear();
      }
    }
    if (has_phoneno()) {
      if (phoneno_ != &::google::protobuf::internal::kEmptyString) {
        phoneno_->clear();
      }
    }
    if (has_weixin()) {
      if (weixin_ != &::google::protobuf::internal::kEmptyString) {
        weixin_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParcelContracter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_birthdate;
        break;
      }

      // required uint64 birthdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &birthdate_)));
          set_has_birthdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // required string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobileno;
        break;
      }

      // required string mobileno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobileno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobileno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobileno().data(), this->mobileno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phoneno;
        break;
      }

      // optional string phoneno = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phoneno().data(), this->phoneno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_weixin;
        break;
      }

      // optional string weixin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weixin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weixin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weixin().data(), this->weixin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_id;
        break;
      }

      // optional string id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParcelContracter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint64 birthdate = 2;
  if (has_birthdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->birthdate(), output);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // required string mobileno = 4;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mobileno(), output);
  }

  // optional string phoneno = 5;
  if (has_phoneno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phoneno(), output);
  }

  // optional string weixin = 6;
  if (has_weixin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weixin().data(), this->weixin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->weixin(), output);
  }

  // optional string id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParcelContracter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 birthdate = 2;
  if (has_birthdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->birthdate(), target);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // required string mobileno = 4;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobileno(), target);
  }

  // optional string phoneno = 5;
  if (has_phoneno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phoneno(), target);
  }

  // optional string weixin = 6;
  if (has_weixin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weixin().data(), this->weixin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weixin(), target);
  }

  // optional string id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParcelContracter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 birthdate = 2;
    if (has_birthdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->birthdate());
    }

    // required string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required string mobileno = 4;
    if (has_mobileno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobileno());
    }

    // optional string phoneno = 5;
    if (has_phoneno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phoneno());
    }

    // optional string weixin = 6;
    if (has_weixin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weixin());
    }

    // optional string id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParcelContracter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParcelContracter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParcelContracter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParcelContracter::MergeFrom(const ParcelContracter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_birthdate()) {
      set_birthdate(from.birthdate());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_mobileno()) {
      set_mobileno(from.mobileno());
    }
    if (from.has_phoneno()) {
      set_phoneno(from.phoneno());
    }
    if (from.has_weixin()) {
      set_weixin(from.weixin());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParcelContracter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParcelContracter::CopyFrom(const ParcelContracter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParcelContracter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ParcelContracter::Swap(ParcelContracter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(birthdate_, other->birthdate_);
    std::swap(address_, other->address_);
    std::swap(mobileno_, other->mobileno_);
    std::swap(phoneno_, other->phoneno_);
    std::swap(weixin_, other->weixin_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParcelContracter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParcelContracter_descriptor_;
  metadata.reflection = ParcelContracter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParcelDescription::kNameFieldNumber;
const int ParcelDescription::kRegisteridFieldNumber;
const int ParcelDescription::kPcFieldNumber;
const int ParcelDescription::kAcreageFieldNumber;
const int ParcelDescription::kPsiidFieldNumber;
const int ParcelDescription::kPsiFieldNumber;
const int ParcelDescription::kCoordinateFieldNumber;
const int ParcelDescription::kIdFieldNumber;
#endif  // !_MSC_VER

ParcelDescription::ParcelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParcelDescription::InitAsDefaultInstance() {
  pc_ = const_cast< ::das::proto::ParcelContracter*>(&::das::proto::ParcelContracter::default_instance());
  psi_ = const_cast< ::das::proto::ParcelSurveyInformation*>(&::das::proto::ParcelSurveyInformation::default_instance());
  coordinate_ = const_cast< ::das::proto::Coordinate*>(&::das::proto::Coordinate::default_instance());
}

ParcelDescription::ParcelDescription(const ParcelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParcelDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pc_ = NULL;
  acreage_ = 0;
  psiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psi_ = NULL;
  coordinate_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParcelDescription::~ParcelDescription() {
  SharedDtor();
}

void ParcelDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (registerid_ != &::google::protobuf::internal::kEmptyString) {
    delete registerid_;
  }
  if (psiid_ != &::google::protobuf::internal::kEmptyString) {
    delete psiid_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete pc_;
    delete psi_;
    delete coordinate_;
  }
}

void ParcelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParcelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParcelDescription_descriptor_;
}

const ParcelDescription& ParcelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ParcelDescription* ParcelDescription::default_instance_ = NULL;

ParcelDescription* ParcelDescription::New() const {
  return new ParcelDescription;
}

void ParcelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_registerid()) {
      if (registerid_ != &::google::protobuf::internal::kEmptyString) {
        registerid_->clear();
      }
    }
    if (has_pc()) {
      if (pc_ != NULL) pc_->::das::proto::ParcelContracter::Clear();
    }
    acreage_ = 0;
    if (has_psiid()) {
      if (psiid_ != &::google::protobuf::internal::kEmptyString) {
        psiid_->clear();
      }
    }
    if (has_psi()) {
      if (psi_ != NULL) psi_->::das::proto::ParcelSurveyInformation::Clear();
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::das::proto::Coordinate::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParcelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_registerid;
        break;
      }

      // required string registerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pc;
        break;
      }

      // required .das.proto.ParcelContracter pc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_acreage;
        break;
      }

      // required float acreage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acreage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acreage_)));
          set_has_acreage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_psiid;
        break;
      }

      // optional string psiid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psiid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psiid().data(), this->psiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_psi;
        break;
      }

      // optional .das.proto.ParcelSurveyInformation psi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_coordinate;
        break;
      }

      // optional .das.proto.Coordinate coordinate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_id;
        break;
      }

      // optional string id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParcelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string registerid = 2;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->registerid(), output);
  }

  // required .das.proto.ParcelContracter pc = 3;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pc(), output);
  }

  // required float acreage = 4;
  if (has_acreage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acreage(), output);
  }

  // optional string psiid = 5;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->psiid(), output);
  }

  // optional .das.proto.ParcelSurveyInformation psi = 6;
  if (has_psi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->psi(), output);
  }

  // optional .das.proto.Coordinate coordinate = 7;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coordinate(), output);
  }

  // optional string id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParcelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string registerid = 2;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->registerid(), target);
  }

  // required .das.proto.ParcelContracter pc = 3;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pc(), target);
  }

  // required float acreage = 4;
  if (has_acreage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acreage(), target);
  }

  // optional string psiid = 5;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->psiid(), target);
  }

  // optional .das.proto.ParcelSurveyInformation psi = 6;
  if (has_psi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->psi(), target);
  }

  // optional .das.proto.Coordinate coordinate = 7;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->coordinate(), target);
  }

  // optional string id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParcelDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string registerid = 2;
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // required .das.proto.ParcelContracter pc = 3;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pc());
    }

    // required float acreage = 4;
    if (has_acreage()) {
      total_size += 1 + 4;
    }

    // optional string psiid = 5;
    if (has_psiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psiid());
    }

    // optional .das.proto.ParcelSurveyInformation psi = 6;
    if (has_psi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psi());
    }

    // optional .das.proto.Coordinate coordinate = 7;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

    // optional string id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParcelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParcelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParcelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParcelDescription::MergeFrom(const ParcelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_pc()) {
      mutable_pc()->::das::proto::ParcelContracter::MergeFrom(from.pc());
    }
    if (from.has_acreage()) {
      set_acreage(from.acreage());
    }
    if (from.has_psiid()) {
      set_psiid(from.psiid());
    }
    if (from.has_psi()) {
      mutable_psi()->::das::proto::ParcelSurveyInformation::MergeFrom(from.psi());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::das::proto::Coordinate::MergeFrom(from.coordinate());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParcelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParcelDescription::CopyFrom(const ParcelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParcelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pc()) {
    if (!this->pc().IsInitialized()) return false;
  }
  if (has_psi()) {
    if (!this->psi().IsInitialized()) return false;
  }
  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void ParcelDescription::Swap(ParcelDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(registerid_, other->registerid_);
    std::swap(pc_, other->pc_);
    std::swap(acreage_, other->acreage_);
    std::swap(psiid_, other->psiid_);
    std::swap(psi_, other->psi_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParcelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParcelDescription_descriptor_;
  metadata.reflection = ParcelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostParcelDescription::kSeqnoFieldNumber;
const int PostParcelDescription::kPdFieldNumber;
#endif  // !_MSC_VER

PostParcelDescription::PostParcelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostParcelDescription::InitAsDefaultInstance() {
  pd_ = const_cast< ::das::proto::ParcelDescription*>(&::das::proto::ParcelDescription::default_instance());
}

PostParcelDescription::PostParcelDescription(const PostParcelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostParcelDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  pd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostParcelDescription::~PostParcelDescription() {
  SharedDtor();
}

void PostParcelDescription::SharedDtor() {
  if (this != default_instance_) {
    delete pd_;
  }
}

void PostParcelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostParcelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostParcelDescription_descriptor_;
}

const PostParcelDescription& PostParcelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostParcelDescription* PostParcelDescription::default_instance_ = NULL;

PostParcelDescription* PostParcelDescription::New() const {
  return new PostParcelDescription;
}

void PostParcelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_pd()) {
      if (pd_ != NULL) pd_->::das::proto::ParcelDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostParcelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pd;
        break;
      }

      // required .das.proto.ParcelDescription pd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostParcelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.ParcelDescription pd = 2;
  if (has_pd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostParcelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.ParcelDescription pd = 2;
  if (has_pd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostParcelDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.ParcelDescription pd = 2;
    if (has_pd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostParcelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostParcelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostParcelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostParcelDescription::MergeFrom(const PostParcelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_pd()) {
      mutable_pd()->::das::proto::ParcelDescription::MergeFrom(from.pd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostParcelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostParcelDescription::CopyFrom(const PostParcelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostParcelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pd()) {
    if (!this->pd().IsInitialized()) return false;
  }
  return true;
}

void PostParcelDescription::Swap(PostParcelDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(pd_, other->pd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostParcelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostParcelDescription_descriptor_;
  metadata.reflection = PostParcelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostParcelDescription::kSeqnoFieldNumber;
const int AckPostParcelDescription::kResultFieldNumber;
const int AckPostParcelDescription::kPcidFieldNumber;
const int AckPostParcelDescription::kPsiidFieldNumber;
const int AckPostParcelDescription::kPdidFieldNumber;
#endif  // !_MSC_VER

AckPostParcelDescription::AckPostParcelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostParcelDescription::InitAsDefaultInstance() {
}

AckPostParcelDescription::AckPostParcelDescription(const AckPostParcelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostParcelDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  pcid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostParcelDescription::~AckPostParcelDescription() {
  SharedDtor();
}

void AckPostParcelDescription::SharedDtor() {
  if (pcid_ != &::google::protobuf::internal::kEmptyString) {
    delete pcid_;
  }
  if (psiid_ != &::google::protobuf::internal::kEmptyString) {
    delete psiid_;
  }
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (this != default_instance_) {
  }
}

void AckPostParcelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostParcelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostParcelDescription_descriptor_;
}

const AckPostParcelDescription& AckPostParcelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostParcelDescription* AckPostParcelDescription::default_instance_ = NULL;

AckPostParcelDescription* AckPostParcelDescription::New() const {
  return new AckPostParcelDescription;
}

void AckPostParcelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_pcid()) {
      if (pcid_ != &::google::protobuf::internal::kEmptyString) {
        pcid_->clear();
      }
    }
    if (has_psiid()) {
      if (psiid_ != &::google::protobuf::internal::kEmptyString) {
        psiid_->clear();
      }
    }
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostParcelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pcid;
        break;
      }

      // optional string pcid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pcid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcid().data(), this->pcid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_psiid;
        break;
      }

      // optional string psiid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psiid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psiid().data(), this->psiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pdid;
        break;
      }

      // optional string pdid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostParcelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string pcid = 3;
  if (has_pcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcid().data(), this->pcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pcid(), output);
  }

  // optional string psiid = 4;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->psiid(), output);
  }

  // optional string pdid = 5;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostParcelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string pcid = 3;
  if (has_pcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcid().data(), this->pcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pcid(), target);
  }

  // optional string psiid = 4;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->psiid(), target);
  }

  // optional string pdid = 5;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostParcelDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string pcid = 3;
    if (has_pcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcid());
    }

    // optional string psiid = 4;
    if (has_psiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psiid());
    }

    // optional string pdid = 5;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostParcelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostParcelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostParcelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostParcelDescription::MergeFrom(const AckPostParcelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pcid()) {
      set_pcid(from.pcid());
    }
    if (from.has_psiid()) {
      set_psiid(from.psiid());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostParcelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostParcelDescription::CopyFrom(const AckPostParcelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostParcelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostParcelDescription::Swap(AckPostParcelDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(pcid_, other->pcid_);
    std::swap(psiid_, other->psiid_);
    std::swap(pdid_, other->pdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostParcelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostParcelDescription_descriptor_;
  metadata.reflection = AckPostParcelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestParcelDescriptions::kSeqnoFieldNumber;
const int RequestParcelDescriptions::kPdidFieldNumber;
const int RequestParcelDescriptions::kCoordinateFieldNumber;
const int RequestParcelDescriptions::kSurveryornameFieldNumber;
const int RequestParcelDescriptions::kSurveryoridFieldNumber;
const int RequestParcelDescriptions::kRegisternameFieldNumber;
const int RequestParcelDescriptions::kRegisteridFieldNumber;
const int RequestParcelDescriptions::kParcelnameFieldNumber;
const int RequestParcelDescriptions::kContracterFieldNumber;
const int RequestParcelDescriptions::kMobilenoFieldNumber;
const int RequestParcelDescriptions::kZonesFieldNumber;
#endif  // !_MSC_VER

RequestParcelDescriptions::RequestParcelDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestParcelDescriptions::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::das::proto::Coordinate*>(&::das::proto::Coordinate::default_instance());
}

RequestParcelDescriptions::RequestParcelDescriptions(const RequestParcelDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestParcelDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinate_ = NULL;
  surveryorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  surveryorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parcelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contracter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobileno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestParcelDescriptions::~RequestParcelDescriptions() {
  SharedDtor();
}

void RequestParcelDescriptions::SharedDtor() {
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (surveryorname_ != &::google::protobuf::internal::kEmptyString) {
    delete surveryorname_;
  }
  if (surveryorid_ != &::google::protobuf::internal::kEmptyString) {
    delete surveryorid_;
  }
  if (registername_ != &::google::protobuf::internal::kEmptyString) {
    delete registername_;
  }
  if (registerid_ != &::google::protobuf::internal::kEmptyString) {
    delete registerid_;
  }
  if (parcelname_ != &::google::protobuf::internal::kEmptyString) {
    delete parcelname_;
  }
  if (contracter_ != &::google::protobuf::internal::kEmptyString) {
    delete contracter_;
  }
  if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
    delete mobileno_;
  }
  if (this != default_instance_) {
    delete coordinate_;
  }
}

void RequestParcelDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestParcelDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestParcelDescriptions_descriptor_;
}

const RequestParcelDescriptions& RequestParcelDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestParcelDescriptions* RequestParcelDescriptions::default_instance_ = NULL;

RequestParcelDescriptions* RequestParcelDescriptions::New() const {
  return new RequestParcelDescriptions;
}

void RequestParcelDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::das::proto::Coordinate::Clear();
    }
    if (has_surveryorname()) {
      if (surveryorname_ != &::google::protobuf::internal::kEmptyString) {
        surveryorname_->clear();
      }
    }
    if (has_surveryorid()) {
      if (surveryorid_ != &::google::protobuf::internal::kEmptyString) {
        surveryorid_->clear();
      }
    }
    if (has_registername()) {
      if (registername_ != &::google::protobuf::internal::kEmptyString) {
        registername_->clear();
      }
    }
    if (has_registerid()) {
      if (registerid_ != &::google::protobuf::internal::kEmptyString) {
        registerid_->clear();
      }
    }
    if (has_parcelname()) {
      if (parcelname_ != &::google::protobuf::internal::kEmptyString) {
        parcelname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_contracter()) {
      if (contracter_ != &::google::protobuf::internal::kEmptyString) {
        contracter_->clear();
      }
    }
    if (has_mobileno()) {
      if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
        mobileno_->clear();
      }
    }
  }
  zones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestParcelDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdid;
        break;
      }

      // optional string pdid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coordinate;
        break;
      }

      // optional .das.proto.Coordinate coordinate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_surveryorname;
        break;
      }

      // optional string surveryorname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surveryorname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surveryorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->surveryorname().data(), this->surveryorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_surveryorid;
        break;
      }

      // optional string surveryorid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surveryorid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surveryorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->surveryorid().data(), this->surveryorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_registername;
        break;
      }

      // optional string registername = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registername().data(), this->registername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_registerid;
        break;
      }

      // optional string registerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parcelname;
        break;
      }

      // optional string parcelname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parcelname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parcelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parcelname().data(), this->parcelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_contracter;
        break;
      }

      // optional string contracter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contracter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contracter().data(), this->contracter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mobileno;
        break;
      }

      // optional string mobileno = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobileno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobileno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobileno().data(), this->mobileno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_zones;
        break;
      }

      // repeated .das.proto.Coordinate zones = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_zones;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestParcelDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pdid(), output);
  }

  // optional .das.proto.Coordinate coordinate = 3;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coordinate(), output);
  }

  // optional string surveryorname = 4;
  if (has_surveryorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorname().data(), this->surveryorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->surveryorname(), output);
  }

  // optional string surveryorid = 5;
  if (has_surveryorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorid().data(), this->surveryorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->surveryorid(), output);
  }

  // optional string registername = 6;
  if (has_registername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registername().data(), this->registername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->registername(), output);
  }

  // optional string registerid = 7;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->registerid(), output);
  }

  // optional string parcelname = 8;
  if (has_parcelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parcelname().data(), this->parcelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->parcelname(), output);
  }

  // optional string contracter = 9;
  if (has_contracter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contracter().data(), this->contracter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->contracter(), output);
  }

  // optional string mobileno = 10;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mobileno(), output);
  }

  // repeated .das.proto.Coordinate zones = 11;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->zones(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestParcelDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pdid(), target);
  }

  // optional .das.proto.Coordinate coordinate = 3;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coordinate(), target);
  }

  // optional string surveryorname = 4;
  if (has_surveryorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorname().data(), this->surveryorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->surveryorname(), target);
  }

  // optional string surveryorid = 5;
  if (has_surveryorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surveryorid().data(), this->surveryorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->surveryorid(), target);
  }

  // optional string registername = 6;
  if (has_registername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registername().data(), this->registername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->registername(), target);
  }

  // optional string registerid = 7;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->registerid(), target);
  }

  // optional string parcelname = 8;
  if (has_parcelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parcelname().data(), this->parcelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parcelname(), target);
  }

  // optional string contracter = 9;
  if (has_contracter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contracter().data(), this->contracter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->contracter(), target);
  }

  // optional string mobileno = 10;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mobileno(), target);
  }

  // repeated .das.proto.Coordinate zones = 11;
  for (int i = 0; i < this->zones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->zones(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestParcelDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string pdid = 2;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

    // optional .das.proto.Coordinate coordinate = 3;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

    // optional string surveryorname = 4;
    if (has_surveryorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surveryorname());
    }

    // optional string surveryorid = 5;
    if (has_surveryorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surveryorid());
    }

    // optional string registername = 6;
    if (has_registername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registername());
    }

    // optional string registerid = 7;
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // optional string parcelname = 8;
    if (has_parcelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parcelname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string contracter = 9;
    if (has_contracter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracter());
    }

    // optional string mobileno = 10;
    if (has_mobileno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobileno());
    }

  }
  // repeated .das.proto.Coordinate zones = 11;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestParcelDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestParcelDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestParcelDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestParcelDescriptions::MergeFrom(const RequestParcelDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  zones_.MergeFrom(from.zones_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::das::proto::Coordinate::MergeFrom(from.coordinate());
    }
    if (from.has_surveryorname()) {
      set_surveryorname(from.surveryorname());
    }
    if (from.has_surveryorid()) {
      set_surveryorid(from.surveryorid());
    }
    if (from.has_registername()) {
      set_registername(from.registername());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_parcelname()) {
      set_parcelname(from.parcelname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contracter()) {
      set_contracter(from.contracter());
    }
    if (from.has_mobileno()) {
      set_mobileno(from.mobileno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestParcelDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestParcelDescriptions::CopyFrom(const RequestParcelDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestParcelDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  for (int i = 0; i < zones_size(); i++) {
    if (!this->zones(i).IsInitialized()) return false;
  }
  return true;
}

void RequestParcelDescriptions::Swap(RequestParcelDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(pdid_, other->pdid_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(surveryorname_, other->surveryorname_);
    std::swap(surveryorid_, other->surveryorid_);
    std::swap(registername_, other->registername_);
    std::swap(registerid_, other->registerid_);
    std::swap(parcelname_, other->parcelname_);
    std::swap(contracter_, other->contracter_);
    std::swap(mobileno_, other->mobileno_);
    zones_.Swap(&other->zones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestParcelDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestParcelDescriptions_descriptor_;
  metadata.reflection = RequestParcelDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestParcelDescriptions::kSeqnoFieldNumber;
const int AckRequestParcelDescriptions::kResultFieldNumber;
const int AckRequestParcelDescriptions::kPdsFieldNumber;
#endif  // !_MSC_VER

AckRequestParcelDescriptions::AckRequestParcelDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestParcelDescriptions::InitAsDefaultInstance() {
}

AckRequestParcelDescriptions::AckRequestParcelDescriptions(const AckRequestParcelDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestParcelDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestParcelDescriptions::~AckRequestParcelDescriptions() {
  SharedDtor();
}

void AckRequestParcelDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestParcelDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestParcelDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestParcelDescriptions_descriptor_;
}

const AckRequestParcelDescriptions& AckRequestParcelDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestParcelDescriptions* AckRequestParcelDescriptions::default_instance_ = NULL;

AckRequestParcelDescriptions* AckRequestParcelDescriptions::New() const {
  return new AckRequestParcelDescriptions;
}

void AckRequestParcelDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  pds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestParcelDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pds;
        break;
      }

      // repeated .das.proto.ParcelDescription pds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestParcelDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .das.proto.ParcelDescription pds = 3;
  for (int i = 0; i < this->pds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestParcelDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .das.proto.ParcelDescription pds = 3;
  for (int i = 0; i < this->pds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestParcelDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.ParcelDescription pds = 3;
  total_size += 1 * this->pds_size();
  for (int i = 0; i < this->pds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestParcelDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestParcelDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestParcelDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestParcelDescriptions::MergeFrom(const AckRequestParcelDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  pds_.MergeFrom(from.pds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestParcelDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestParcelDescriptions::CopyFrom(const AckRequestParcelDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestParcelDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < pds_size(); i++) {
    if (!this->pds(i).IsInitialized()) return false;
  }
  return true;
}

void AckRequestParcelDescriptions::Swap(AckRequestParcelDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    pds_.Swap(&other->pds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestParcelDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestParcelDescriptions_descriptor_;
  metadata.reflection = AckRequestParcelDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteParcelDescription::kSeqnoFieldNumber;
const int DeleteParcelDescription::kPdidFieldNumber;
const int DeleteParcelDescription::kDelpsiFieldNumber;
const int DeleteParcelDescription::kDelpcFieldNumber;
#endif  // !_MSC_VER

DeleteParcelDescription::DeleteParcelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteParcelDescription::InitAsDefaultInstance() {
}

DeleteParcelDescription::DeleteParcelDescription(const DeleteParcelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteParcelDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delpsi_ = false;
  delpc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteParcelDescription::~DeleteParcelDescription() {
  SharedDtor();
}

void DeleteParcelDescription::SharedDtor() {
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (this != default_instance_) {
  }
}

void DeleteParcelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteParcelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteParcelDescription_descriptor_;
}

const DeleteParcelDescription& DeleteParcelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

DeleteParcelDescription* DeleteParcelDescription::default_instance_ = NULL;

DeleteParcelDescription* DeleteParcelDescription::New() const {
  return new DeleteParcelDescription;
}

void DeleteParcelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
    delpsi_ = false;
    delpc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteParcelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdid;
        break;
      }

      // required string pdid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delpsi;
        break;
      }

      // optional bool delpsi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delpsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delpsi_)));
          set_has_delpsi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delpc;
        break;
      }

      // optional bool delpc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delpc_)));
          set_has_delpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteParcelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pdid(), output);
  }

  // optional bool delpsi = 3;
  if (has_delpsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->delpsi(), output);
  }

  // optional bool delpc = 4;
  if (has_delpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->delpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteParcelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pdid(), target);
  }

  // optional bool delpsi = 3;
  if (has_delpsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->delpsi(), target);
  }

  // optional bool delpc = 4;
  if (has_delpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->delpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteParcelDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string pdid = 2;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

    // optional bool delpsi = 3;
    if (has_delpsi()) {
      total_size += 1 + 1;
    }

    // optional bool delpc = 4;
    if (has_delpc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteParcelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteParcelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteParcelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteParcelDescription::MergeFrom(const DeleteParcelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
    if (from.has_delpsi()) {
      set_delpsi(from.delpsi());
    }
    if (from.has_delpc()) {
      set_delpc(from.delpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteParcelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteParcelDescription::CopyFrom(const DeleteParcelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteParcelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteParcelDescription::Swap(DeleteParcelDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(pdid_, other->pdid_);
    std::swap(delpsi_, other->delpsi_);
    std::swap(delpc_, other->delpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteParcelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteParcelDescription_descriptor_;
  metadata.reflection = DeleteParcelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDeleteParcelDescription::kSeqnoFieldNumber;
const int AckDeleteParcelDescription::kResultFieldNumber;
#endif  // !_MSC_VER

AckDeleteParcelDescription::AckDeleteParcelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDeleteParcelDescription::InitAsDefaultInstance() {
}

AckDeleteParcelDescription::AckDeleteParcelDescription(const AckDeleteParcelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDeleteParcelDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDeleteParcelDescription::~AckDeleteParcelDescription() {
  SharedDtor();
}

void AckDeleteParcelDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDeleteParcelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDeleteParcelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDeleteParcelDescription_descriptor_;
}

const AckDeleteParcelDescription& AckDeleteParcelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckDeleteParcelDescription* AckDeleteParcelDescription::default_instance_ = NULL;

AckDeleteParcelDescription* AckDeleteParcelDescription::New() const {
  return new AckDeleteParcelDescription;
}

void AckDeleteParcelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDeleteParcelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDeleteParcelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDeleteParcelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDeleteParcelDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDeleteParcelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDeleteParcelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDeleteParcelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDeleteParcelDescription::MergeFrom(const AckDeleteParcelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDeleteParcelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteParcelDescription::CopyFrom(const AckDeleteParcelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteParcelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckDeleteParcelDescription::Swap(AckDeleteParcelDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDeleteParcelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDeleteParcelDescription_descriptor_;
  metadata.reflection = AckDeleteParcelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncParcelDescriptions::kSeqnoFieldNumber;
#endif  // !_MSC_VER

SyncParcelDescriptions::SyncParcelDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncParcelDescriptions::InitAsDefaultInstance() {
}

SyncParcelDescriptions::SyncParcelDescriptions(const SyncParcelDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncParcelDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncParcelDescriptions::~SyncParcelDescriptions() {
  SharedDtor();
}

void SyncParcelDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncParcelDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncParcelDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncParcelDescriptions_descriptor_;
}

const SyncParcelDescriptions& SyncParcelDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SyncParcelDescriptions* SyncParcelDescriptions::default_instance_ = NULL;

SyncParcelDescriptions* SyncParcelDescriptions::New() const {
  return new SyncParcelDescriptions;
}

void SyncParcelDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncParcelDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncParcelDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncParcelDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncParcelDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncParcelDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncParcelDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncParcelDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncParcelDescriptions::MergeFrom(const SyncParcelDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncParcelDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncParcelDescriptions::CopyFrom(const SyncParcelDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncParcelDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncParcelDescriptions::Swap(SyncParcelDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncParcelDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncParcelDescriptions_descriptor_;
  metadata.reflection = SyncParcelDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSyncParcelDescriptions::kSeqnoFieldNumber;
const int AckSyncParcelDescriptions::kResultFieldNumber;
#endif  // !_MSC_VER

AckSyncParcelDescriptions::AckSyncParcelDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSyncParcelDescriptions::InitAsDefaultInstance() {
}

AckSyncParcelDescriptions::AckSyncParcelDescriptions(const AckSyncParcelDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSyncParcelDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSyncParcelDescriptions::~AckSyncParcelDescriptions() {
  SharedDtor();
}

void AckSyncParcelDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSyncParcelDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSyncParcelDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSyncParcelDescriptions_descriptor_;
}

const AckSyncParcelDescriptions& AckSyncParcelDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSyncParcelDescriptions* AckSyncParcelDescriptions::default_instance_ = NULL;

AckSyncParcelDescriptions* AckSyncParcelDescriptions::New() const {
  return new AckSyncParcelDescriptions;
}

void AckSyncParcelDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSyncParcelDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSyncParcelDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSyncParcelDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSyncParcelDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSyncParcelDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSyncParcelDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSyncParcelDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSyncParcelDescriptions::MergeFrom(const AckSyncParcelDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSyncParcelDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSyncParcelDescriptions::CopyFrom(const AckSyncParcelDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSyncParcelDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckSyncParcelDescriptions::Swap(AckSyncParcelDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSyncParcelDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSyncParcelDescriptions_descriptor_;
  metadata.reflection = AckSyncParcelDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CropInformation::kNameFieldNumber;
const int CropInformation::kCdidFieldNumber;
#endif  // !_MSC_VER

CropInformation::CropInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CropInformation::InitAsDefaultInstance() {
}

CropInformation::CropInformation(const CropInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CropInformation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropInformation::~CropInformation() {
  SharedDtor();
}

void CropInformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cdid_ != &::google::protobuf::internal::kEmptyString) {
    delete cdid_;
  }
  if (this != default_instance_) {
  }
}

void CropInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropInformation_descriptor_;
}

const CropInformation& CropInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

CropInformation* CropInformation::default_instance_ = NULL;

CropInformation* CropInformation::New() const {
  return new CropInformation;
}

void CropInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cdid()) {
      if (cdid_ != &::google::protobuf::internal::kEmptyString) {
        cdid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cdid;
        break;
      }

      // optional string cdid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cdid().data(), this->cdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CropInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string cdid = 2;
  if (has_cdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cdid().data(), this->cdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CropInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string cdid = 2;
  if (has_cdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cdid().data(), this->cdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CropInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cdid = 2;
    if (has_cdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropInformation::MergeFrom(const CropInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cdid()) {
      set_cdid(from.cdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropInformation::CopyFrom(const CropInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CropInformation::Swap(CropInformation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(cdid_, other->cdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropInformation_descriptor_;
  metadata.reflection = CropInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PesticideInformation::kNameFieldNumber;
const int PesticideInformation::kPdidFieldNumber;
#endif  // !_MSC_VER

PesticideInformation::PesticideInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PesticideInformation::InitAsDefaultInstance() {
}

PesticideInformation::PesticideInformation(const PesticideInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PesticideInformation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PesticideInformation::~PesticideInformation() {
  SharedDtor();
}

void PesticideInformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (this != default_instance_) {
  }
}

void PesticideInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PesticideInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PesticideInformation_descriptor_;
}

const PesticideInformation& PesticideInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PesticideInformation* PesticideInformation::default_instance_ = NULL;

PesticideInformation* PesticideInformation::New() const {
  return new PesticideInformation;
}

void PesticideInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PesticideInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdid;
        break;
      }

      // optional string pdid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PesticideInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PesticideInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string pdid = 2;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PesticideInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string pdid = 2;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PesticideInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PesticideInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PesticideInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PesticideInformation::MergeFrom(const PesticideInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PesticideInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PesticideInformation::CopyFrom(const PesticideInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PesticideInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PesticideInformation::Swap(PesticideInformation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pdid_, other->pdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PesticideInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PesticideInformation_descriptor_;
  metadata.reflection = PesticideInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillInformation::kServicechargeFieldNumber;
const int BillInformation::kPesticidechargeFieldNumber;
const int BillInformation::kOtherchargeFieldNumber;
const int BillInformation::kSumchargeFieldNumber;
#endif  // !_MSC_VER

BillInformation::BillInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillInformation::InitAsDefaultInstance() {
}

BillInformation::BillInformation(const BillInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillInformation::SharedCtor() {
  _cached_size_ = 0;
  servicecharge_ = 0;
  pesticidecharge_ = 0;
  othercharge_ = 0;
  sumcharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillInformation::~BillInformation() {
  SharedDtor();
}

void BillInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BillInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillInformation_descriptor_;
}

const BillInformation& BillInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

BillInformation* BillInformation::default_instance_ = NULL;

BillInformation* BillInformation::New() const {
  return new BillInformation;
}

void BillInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servicecharge_ = 0;
    pesticidecharge_ = 0;
    othercharge_ = 0;
    sumcharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float servicecharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &servicecharge_)));
          set_has_servicecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pesticidecharge;
        break;
      }

      // optional float pesticidecharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pesticidecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pesticidecharge_)));
          set_has_pesticidecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_othercharge;
        break;
      }

      // optional float othercharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_othercharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &othercharge_)));
          set_has_othercharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sumcharge;
        break;
      }

      // required float sumcharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumcharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumcharge_)));
          set_has_sumcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float servicecharge = 1;
  if (has_servicecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->servicecharge(), output);
  }

  // optional float pesticidecharge = 2;
  if (has_pesticidecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pesticidecharge(), output);
  }

  // optional float othercharge = 3;
  if (has_othercharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->othercharge(), output);
  }

  // required float sumcharge = 4;
  if (has_sumcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sumcharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float servicecharge = 1;
  if (has_servicecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->servicecharge(), target);
  }

  // optional float pesticidecharge = 2;
  if (has_pesticidecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pesticidecharge(), target);
  }

  // optional float othercharge = 3;
  if (has_othercharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->othercharge(), target);
  }

  // required float sumcharge = 4;
  if (has_sumcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sumcharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float servicecharge = 1;
    if (has_servicecharge()) {
      total_size += 1 + 4;
    }

    // optional float pesticidecharge = 2;
    if (has_pesticidecharge()) {
      total_size += 1 + 4;
    }

    // optional float othercharge = 3;
    if (has_othercharge()) {
      total_size += 1 + 4;
    }

    // required float sumcharge = 4;
    if (has_sumcharge()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillInformation::MergeFrom(const BillInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servicecharge()) {
      set_servicecharge(from.servicecharge());
    }
    if (from.has_pesticidecharge()) {
      set_pesticidecharge(from.pesticidecharge());
    }
    if (from.has_othercharge()) {
      set_othercharge(from.othercharge());
    }
    if (from.has_sumcharge()) {
      set_sumcharge(from.sumcharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillInformation::CopyFrom(const BillInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void BillInformation::Swap(BillInformation* other) {
  if (other != this) {
    std::swap(servicecharge_, other->servicecharge_);
    std::swap(pesticidecharge_, other->pesticidecharge_);
    std::swap(othercharge_, other->othercharge_);
    std::swap(sumcharge_, other->sumcharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillInformation_descriptor_;
  metadata.reflection = BillInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInformation::kNameFieldNumber;
const int DeviceInformation::kDiidFieldNumber;
#endif  // !_MSC_VER

DeviceInformation::DeviceInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceInformation::InitAsDefaultInstance() {
}

DeviceInformation::DeviceInformation(const DeviceInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceInformation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInformation::~DeviceInformation() {
  SharedDtor();
}

void DeviceInformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (diid_ != &::google::protobuf::internal::kEmptyString) {
    delete diid_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInformation_descriptor_;
}

const DeviceInformation& DeviceInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

DeviceInformation* DeviceInformation::default_instance_ = NULL;

DeviceInformation* DeviceInformation::New() const {
  return new DeviceInformation;
}

void DeviceInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_diid()) {
      if (diid_ != &::google::protobuf::internal::kEmptyString) {
        diid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diid;
        break;
      }

      // optional string diid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diid().data(), this->diid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string diid = 2;
  if (has_diid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diid().data(), this->diid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->diid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string diid = 2;
  if (has_diid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diid().data(), this->diid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->diid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string diid = 2;
    if (has_diid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInformation::MergeFrom(const DeviceInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_diid()) {
      set_diid(from.diid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInformation::CopyFrom(const DeviceInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInformation::IsInitialized() const {

  return true;
}

void DeviceInformation::Swap(DeviceInformation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(diid_, other->diid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInformation_descriptor_;
  metadata.reflection = DeviceInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationDescription::kChargeridFieldNumber;
const int OperationDescription::kRegisteridFieldNumber;
const int OperationDescription::kOperatoridFieldNumber;
const int OperationDescription::kBegintimeFieldNumber;
const int OperationDescription::kEndtimeFieldNumber;
const int OperationDescription::kOperationtypeFieldNumber;
const int OperationDescription::kCiFieldNumber;
const int OperationDescription::kPiFieldNumber;
const int OperationDescription::kBiFieldNumber;
const int OperationDescription::kDiFieldNumber;
const int OperationDescription::kNotesFieldNumber;
const int OperationDescription::kPdidFieldNumber;
const int OperationDescription::kOdidFieldNumber;
#endif  // !_MSC_VER

OperationDescription::OperationDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationDescription::InitAsDefaultInstance() {
  ci_ = const_cast< ::das::proto::CropInformation*>(&::das::proto::CropInformation::default_instance());
  bi_ = const_cast< ::das::proto::BillInformation*>(&::das::proto::BillInformation::default_instance());
}

OperationDescription::OperationDescription(const OperationDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationDescription::SharedCtor() {
  _cached_size_ = 0;
  chargerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  operationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ci_ = NULL;
  bi_ = NULL;
  notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationDescription::~OperationDescription() {
  SharedDtor();
}

void OperationDescription::SharedDtor() {
  if (chargerid_ != &::google::protobuf::internal::kEmptyString) {
    delete chargerid_;
  }
  if (registerid_ != &::google::protobuf::internal::kEmptyString) {
    delete registerid_;
  }
  if (operationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete operationtype_;
  }
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_;
  }
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (this != default_instance_) {
    delete ci_;
    delete bi_;
  }
}

void OperationDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationDescription_descriptor_;
}

const OperationDescription& OperationDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationDescription* OperationDescription::default_instance_ = NULL;

OperationDescription* OperationDescription::New() const {
  return new OperationDescription;
}

void OperationDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chargerid()) {
      if (chargerid_ != &::google::protobuf::internal::kEmptyString) {
        chargerid_->clear();
      }
    }
    if (has_registerid()) {
      if (registerid_ != &::google::protobuf::internal::kEmptyString) {
        registerid_->clear();
      }
    }
    begintime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    if (has_operationtype()) {
      if (operationtype_ != &::google::protobuf::internal::kEmptyString) {
        operationtype_->clear();
      }
    }
    if (has_ci()) {
      if (ci_ != NULL) ci_->::das::proto::CropInformation::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bi()) {
      if (bi_ != NULL) bi_->::das::proto::BillInformation::Clear();
    }
    if (has_notes()) {
      if (notes_ != &::google::protobuf::internal::kEmptyString) {
        notes_->clear();
      }
    }
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
  }
  operatorid_.Clear();
  pi_.Clear();
  di_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chargerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chargerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chargerid().data(), this->chargerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_registerid;
        break;
      }

      // required string registerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operatorid;
        break;
      }

      // repeated string operatorid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatorid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operatorid(this->operatorid_size() - 1).data(),
            this->operatorid(this->operatorid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operatorid;
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // optional uint64 begintime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_operationtype;
        break;
      }

      // required string operationtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operationtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operationtype().data(), this->operationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ci;
        break;
      }

      // optional .das.proto.CropInformation ci = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pi;
        break;
      }

      // repeated .das.proto.PesticideInformation pi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pi;
        if (input->ExpectTag(74)) goto parse_bi;
        break;
      }

      // required .das.proto.BillInformation bi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_di;
        break;
      }

      // repeated .das.proto.DeviceInformation di = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_di()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_di;
        if (input->ExpectTag(90)) goto parse_notes;
        break;
      }

      // optional string notes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pdid;
        break;
      }

      // required string pdid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_odid;
        break;
      }

      // optional string odid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chargerid = 1;
  if (has_chargerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chargerid().data(), this->chargerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chargerid(), output);
  }

  // required string registerid = 2;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->registerid(), output);
  }

  // repeated string operatorid = 3;
  for (int i = 0; i < this->operatorid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->operatorid(i).data(), this->operatorid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->operatorid(i), output);
  }

  // optional uint64 begintime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->begintime(), output);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  // required string operationtype = 6;
  if (has_operationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operationtype().data(), this->operationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->operationtype(), output);
  }

  // optional .das.proto.CropInformation ci = 7;
  if (has_ci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ci(), output);
  }

  // repeated .das.proto.PesticideInformation pi = 8;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pi(i), output);
  }

  // required .das.proto.BillInformation bi = 9;
  if (has_bi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bi(), output);
  }

  // repeated .das.proto.DeviceInformation di = 10;
  for (int i = 0; i < this->di_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->di(i), output);
  }

  // optional string notes = 11;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->notes(), output);
  }

  // required string pdid = 12;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pdid(), output);
  }

  // optional string odid = 13;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->odid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chargerid = 1;
  if (has_chargerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chargerid().data(), this->chargerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chargerid(), target);
  }

  // required string registerid = 2;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->registerid(), target);
  }

  // repeated string operatorid = 3;
  for (int i = 0; i < this->operatorid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatorid(i).data(), this->operatorid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->operatorid(i), target);
  }

  // optional uint64 begintime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->begintime(), target);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  // required string operationtype = 6;
  if (has_operationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operationtype().data(), this->operationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->operationtype(), target);
  }

  // optional .das.proto.CropInformation ci = 7;
  if (has_ci()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ci(), target);
  }

  // repeated .das.proto.PesticideInformation pi = 8;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pi(i), target);
  }

  // required .das.proto.BillInformation bi = 9;
  if (has_bi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bi(), target);
  }

  // repeated .das.proto.DeviceInformation di = 10;
  for (int i = 0; i < this->di_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->di(i), target);
  }

  // optional string notes = 11;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->notes(), target);
  }

  // required string pdid = 12;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pdid(), target);
  }

  // optional string odid = 13;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->odid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chargerid = 1;
    if (has_chargerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chargerid());
    }

    // required string registerid = 2;
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // optional uint64 begintime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional uint64 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // required string operationtype = 6;
    if (has_operationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operationtype());
    }

    // optional .das.proto.CropInformation ci = 7;
    if (has_ci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ci());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .das.proto.BillInformation bi = 9;
    if (has_bi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bi());
    }

    // optional string notes = 11;
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }

    // required string pdid = 12;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

    // optional string odid = 13;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

  }
  // repeated string operatorid = 3;
  total_size += 1 * this->operatorid_size();
  for (int i = 0; i < this->operatorid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->operatorid(i));
  }

  // repeated .das.proto.PesticideInformation pi = 8;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  // repeated .das.proto.DeviceInformation di = 10;
  total_size += 1 * this->di_size();
  for (int i = 0; i < this->di_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->di(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationDescription::MergeFrom(const OperationDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatorid_.MergeFrom(from.operatorid_);
  pi_.MergeFrom(from.pi_);
  di_.MergeFrom(from.di_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chargerid()) {
      set_chargerid(from.chargerid());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_operationtype()) {
      set_operationtype(from.operationtype());
    }
    if (from.has_ci()) {
      mutable_ci()->::das::proto::CropInformation::MergeFrom(from.ci());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bi()) {
      mutable_bi()->::das::proto::BillInformation::MergeFrom(from.bi());
    }
    if (from.has_notes()) {
      set_notes(from.notes());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationDescription::CopyFrom(const OperationDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000923) != 0x00000923) return false;

  if (has_ci()) {
    if (!this->ci().IsInitialized()) return false;
  }
  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  if (has_bi()) {
    if (!this->bi().IsInitialized()) return false;
  }
  return true;
}

void OperationDescription::Swap(OperationDescription* other) {
  if (other != this) {
    std::swap(chargerid_, other->chargerid_);
    std::swap(registerid_, other->registerid_);
    operatorid_.Swap(&other->operatorid_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(operationtype_, other->operationtype_);
    std::swap(ci_, other->ci_);
    pi_.Swap(&other->pi_);
    std::swap(bi_, other->bi_);
    di_.Swap(&other->di_);
    std::swap(notes_, other->notes_);
    std::swap(pdid_, other->pdid_);
    std::swap(odid_, other->odid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationDescription_descriptor_;
  metadata.reflection = OperationDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostOperationDescription::kSeqnoFieldNumber;
const int PostOperationDescription::kOdFieldNumber;
#endif  // !_MSC_VER

PostOperationDescription::PostOperationDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostOperationDescription::InitAsDefaultInstance() {
  od_ = const_cast< ::das::proto::OperationDescription*>(&::das::proto::OperationDescription::default_instance());
}

PostOperationDescription::PostOperationDescription(const PostOperationDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostOperationDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  od_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostOperationDescription::~PostOperationDescription() {
  SharedDtor();
}

void PostOperationDescription::SharedDtor() {
  if (this != default_instance_) {
    delete od_;
  }
}

void PostOperationDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostOperationDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostOperationDescription_descriptor_;
}

const PostOperationDescription& PostOperationDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostOperationDescription* PostOperationDescription::default_instance_ = NULL;

PostOperationDescription* PostOperationDescription::New() const {
  return new PostOperationDescription;
}

void PostOperationDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_od()) {
      if (od_ != NULL) od_->::das::proto::OperationDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostOperationDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_od;
        break;
      }

      // required .das.proto.OperationDescription od = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_od:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_od()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostOperationDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.OperationDescription od = 2;
  if (has_od()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->od(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostOperationDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.OperationDescription od = 2;
  if (has_od()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->od(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostOperationDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.OperationDescription od = 2;
    if (has_od()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->od());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostOperationDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostOperationDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostOperationDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostOperationDescription::MergeFrom(const PostOperationDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_od()) {
      mutable_od()->::das::proto::OperationDescription::MergeFrom(from.od());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostOperationDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOperationDescription::CopyFrom(const PostOperationDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOperationDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_od()) {
    if (!this->od().IsInitialized()) return false;
  }
  return true;
}

void PostOperationDescription::Swap(PostOperationDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(od_, other->od_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostOperationDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostOperationDescription_descriptor_;
  metadata.reflection = PostOperationDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostOperationDescription::kSeqnoFieldNumber;
const int AckPostOperationDescription::kResultFieldNumber;
const int AckPostOperationDescription::kOdidFieldNumber;
#endif  // !_MSC_VER

AckPostOperationDescription::AckPostOperationDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostOperationDescription::InitAsDefaultInstance() {
}

AckPostOperationDescription::AckPostOperationDescription(const AckPostOperationDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostOperationDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostOperationDescription::~AckPostOperationDescription() {
  SharedDtor();
}

void AckPostOperationDescription::SharedDtor() {
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (this != default_instance_) {
  }
}

void AckPostOperationDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostOperationDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostOperationDescription_descriptor_;
}

const AckPostOperationDescription& AckPostOperationDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostOperationDescription* AckPostOperationDescription::default_instance_ = NULL;

AckPostOperationDescription* AckPostOperationDescription::New() const {
  return new AckPostOperationDescription;
}

void AckPostOperationDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostOperationDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_odid;
        break;
      }

      // optional string odid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostOperationDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->odid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostOperationDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->odid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostOperationDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string odid = 3;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostOperationDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostOperationDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostOperationDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostOperationDescription::MergeFrom(const AckPostOperationDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostOperationDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostOperationDescription::CopyFrom(const AckPostOperationDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostOperationDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostOperationDescription::Swap(AckPostOperationDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(odid_, other->odid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostOperationDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostOperationDescription_descriptor_;
  metadata.reflection = AckPostOperationDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOperationDescriptions::kSeqnoFieldNumber;
const int RequestOperationDescriptions::kOdidFieldNumber;
const int RequestOperationDescriptions::kPdidFieldNumber;
const int RequestOperationDescriptions::kChargemanidFieldNumber;
const int RequestOperationDescriptions::kRegisteridFieldNumber;
const int RequestOperationDescriptions::kOperatoridFieldNumber;
#endif  // !_MSC_VER

RequestOperationDescriptions::RequestOperationDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestOperationDescriptions::InitAsDefaultInstance() {
}

RequestOperationDescriptions::RequestOperationDescriptions(const RequestOperationDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestOperationDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chargemanid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operatorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOperationDescriptions::~RequestOperationDescriptions() {
  SharedDtor();
}

void RequestOperationDescriptions::SharedDtor() {
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (chargemanid_ != &::google::protobuf::internal::kEmptyString) {
    delete chargemanid_;
  }
  if (registerid_ != &::google::protobuf::internal::kEmptyString) {
    delete registerid_;
  }
  if (operatorid_ != &::google::protobuf::internal::kEmptyString) {
    delete operatorid_;
  }
  if (this != default_instance_) {
  }
}

void RequestOperationDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOperationDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOperationDescriptions_descriptor_;
}

const RequestOperationDescriptions& RequestOperationDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestOperationDescriptions* RequestOperationDescriptions::default_instance_ = NULL;

RequestOperationDescriptions* RequestOperationDescriptions::New() const {
  return new RequestOperationDescriptions;
}

void RequestOperationDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
    if (has_chargemanid()) {
      if (chargemanid_ != &::google::protobuf::internal::kEmptyString) {
        chargemanid_->clear();
      }
    }
    if (has_registerid()) {
      if (registerid_ != &::google::protobuf::internal::kEmptyString) {
        registerid_->clear();
      }
    }
    if (has_operatorid()) {
      if (operatorid_ != &::google::protobuf::internal::kEmptyString) {
        operatorid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOperationDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_odid;
        break;
      }

      // optional string odid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pdid;
        break;
      }

      // optional string pdid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chargemanid;
        break;
      }

      // optional string chargemanid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chargemanid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chargemanid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chargemanid().data(), this->chargemanid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_registerid;
        break;
      }

      // optional string registerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registerid().data(), this->registerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_operatorid;
        break;
      }

      // optional string operatorid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatorid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operatorid().data(), this->operatorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestOperationDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string odid = 2;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->odid(), output);
  }

  // optional string pdid = 3;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pdid(), output);
  }

  // optional string chargemanid = 4;
  if (has_chargemanid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chargemanid().data(), this->chargemanid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chargemanid(), output);
  }

  // optional string registerid = 5;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->registerid(), output);
  }

  // optional string operatorid = 6;
  if (has_operatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatorid().data(), this->operatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->operatorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestOperationDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string odid = 2;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->odid(), target);
  }

  // optional string pdid = 3;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pdid(), target);
  }

  // optional string chargemanid = 4;
  if (has_chargemanid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chargemanid().data(), this->chargemanid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chargemanid(), target);
  }

  // optional string registerid = 5;
  if (has_registerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerid().data(), this->registerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->registerid(), target);
  }

  // optional string operatorid = 6;
  if (has_operatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatorid().data(), this->operatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->operatorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestOperationDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string odid = 2;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

    // optional string pdid = 3;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

    // optional string chargemanid = 4;
    if (has_chargemanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chargemanid());
    }

    // optional string registerid = 5;
    if (has_registerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerid());
    }

    // optional string operatorid = 6;
    if (has_operatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operatorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOperationDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOperationDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOperationDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOperationDescriptions::MergeFrom(const RequestOperationDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
    if (from.has_chargemanid()) {
      set_chargemanid(from.chargemanid());
    }
    if (from.has_registerid()) {
      set_registerid(from.registerid());
    }
    if (from.has_operatorid()) {
      set_operatorid(from.operatorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOperationDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOperationDescriptions::CopyFrom(const RequestOperationDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOperationDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestOperationDescriptions::Swap(RequestOperationDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(odid_, other->odid_);
    std::swap(pdid_, other->pdid_);
    std::swap(chargemanid_, other->chargemanid_);
    std::swap(registerid_, other->registerid_);
    std::swap(operatorid_, other->operatorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOperationDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOperationDescriptions_descriptor_;
  metadata.reflection = RequestOperationDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestOperationDescriptions::kSeqnoFieldNumber;
const int AckRequestOperationDescriptions::kResultFieldNumber;
const int AckRequestOperationDescriptions::kOdsFieldNumber;
#endif  // !_MSC_VER

AckRequestOperationDescriptions::AckRequestOperationDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestOperationDescriptions::InitAsDefaultInstance() {
}

AckRequestOperationDescriptions::AckRequestOperationDescriptions(const AckRequestOperationDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestOperationDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestOperationDescriptions::~AckRequestOperationDescriptions() {
  SharedDtor();
}

void AckRequestOperationDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestOperationDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestOperationDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestOperationDescriptions_descriptor_;
}

const AckRequestOperationDescriptions& AckRequestOperationDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestOperationDescriptions* AckRequestOperationDescriptions::default_instance_ = NULL;

AckRequestOperationDescriptions* AckRequestOperationDescriptions::New() const {
  return new AckRequestOperationDescriptions;
}

void AckRequestOperationDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestOperationDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ods;
        break;
      }

      // repeated .das.proto.OperationDescription ods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestOperationDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .das.proto.OperationDescription ods = 3;
  for (int i = 0; i < this->ods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestOperationDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .das.proto.OperationDescription ods = 3;
  for (int i = 0; i < this->ods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestOperationDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.OperationDescription ods = 3;
  total_size += 1 * this->ods_size();
  for (int i = 0; i < this->ods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestOperationDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestOperationDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestOperationDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestOperationDescriptions::MergeFrom(const AckRequestOperationDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  ods_.MergeFrom(from.ods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestOperationDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestOperationDescriptions::CopyFrom(const AckRequestOperationDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestOperationDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ods_size(); i++) {
    if (!this->ods(i).IsInitialized()) return false;
  }
  return true;
}

void AckRequestOperationDescriptions::Swap(AckRequestOperationDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    ods_.Swap(&other->ods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestOperationDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestOperationDescriptions_descriptor_;
  metadata.reflection = AckRequestOperationDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteOperationDescription::kSeqnoFieldNumber;
const int DeleteOperationDescription::kOdidFieldNumber;
#endif  // !_MSC_VER

DeleteOperationDescription::DeleteOperationDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteOperationDescription::InitAsDefaultInstance() {
}

DeleteOperationDescription::DeleteOperationDescription(const DeleteOperationDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteOperationDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteOperationDescription::~DeleteOperationDescription() {
  SharedDtor();
}

void DeleteOperationDescription::SharedDtor() {
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (this != default_instance_) {
  }
}

void DeleteOperationDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteOperationDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteOperationDescription_descriptor_;
}

const DeleteOperationDescription& DeleteOperationDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

DeleteOperationDescription* DeleteOperationDescription::default_instance_ = NULL;

DeleteOperationDescription* DeleteOperationDescription::New() const {
  return new DeleteOperationDescription;
}

void DeleteOperationDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteOperationDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_odid;
        break;
      }

      // required string odid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteOperationDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string odid = 2;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->odid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteOperationDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string odid = 2;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->odid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteOperationDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string odid = 2;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteOperationDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteOperationDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteOperationDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteOperationDescription::MergeFrom(const DeleteOperationDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteOperationDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOperationDescription::CopyFrom(const DeleteOperationDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOperationDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteOperationDescription::Swap(DeleteOperationDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(odid_, other->odid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteOperationDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteOperationDescription_descriptor_;
  metadata.reflection = DeleteOperationDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDeleteOperationDescription::kSeqnoFieldNumber;
const int AckDeleteOperationDescription::kResultFieldNumber;
#endif  // !_MSC_VER

AckDeleteOperationDescription::AckDeleteOperationDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDeleteOperationDescription::InitAsDefaultInstance() {
}

AckDeleteOperationDescription::AckDeleteOperationDescription(const AckDeleteOperationDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDeleteOperationDescription::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDeleteOperationDescription::~AckDeleteOperationDescription() {
  SharedDtor();
}

void AckDeleteOperationDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDeleteOperationDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDeleteOperationDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDeleteOperationDescription_descriptor_;
}

const AckDeleteOperationDescription& AckDeleteOperationDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckDeleteOperationDescription* AckDeleteOperationDescription::default_instance_ = NULL;

AckDeleteOperationDescription* AckDeleteOperationDescription::New() const {
  return new AckDeleteOperationDescription;
}

void AckDeleteOperationDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDeleteOperationDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDeleteOperationDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDeleteOperationDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDeleteOperationDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDeleteOperationDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDeleteOperationDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDeleteOperationDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDeleteOperationDescription::MergeFrom(const AckDeleteOperationDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDeleteOperationDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteOperationDescription::CopyFrom(const AckDeleteOperationDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteOperationDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckDeleteOperationDescription::Swap(AckDeleteOperationDescription* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDeleteOperationDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDeleteOperationDescription_descriptor_;
  metadata.reflection = AckDeleteOperationDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncOperationDescriptions::kSeqnoFieldNumber;
#endif  // !_MSC_VER

SyncOperationDescriptions::SyncOperationDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncOperationDescriptions::InitAsDefaultInstance() {
}

SyncOperationDescriptions::SyncOperationDescriptions(const SyncOperationDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncOperationDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncOperationDescriptions::~SyncOperationDescriptions() {
  SharedDtor();
}

void SyncOperationDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncOperationDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncOperationDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncOperationDescriptions_descriptor_;
}

const SyncOperationDescriptions& SyncOperationDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SyncOperationDescriptions* SyncOperationDescriptions::default_instance_ = NULL;

SyncOperationDescriptions* SyncOperationDescriptions::New() const {
  return new SyncOperationDescriptions;
}

void SyncOperationDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncOperationDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncOperationDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncOperationDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncOperationDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncOperationDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncOperationDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncOperationDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncOperationDescriptions::MergeFrom(const SyncOperationDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncOperationDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncOperationDescriptions::CopyFrom(const SyncOperationDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncOperationDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncOperationDescriptions::Swap(SyncOperationDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncOperationDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncOperationDescriptions_descriptor_;
  metadata.reflection = SyncOperationDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSyncOperationDescriptions::kSeqnoFieldNumber;
const int AckSyncOperationDescriptions::kResultFieldNumber;
#endif  // !_MSC_VER

AckSyncOperationDescriptions::AckSyncOperationDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSyncOperationDescriptions::InitAsDefaultInstance() {
}

AckSyncOperationDescriptions::AckSyncOperationDescriptions(const AckSyncOperationDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSyncOperationDescriptions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSyncOperationDescriptions::~AckSyncOperationDescriptions() {
  SharedDtor();
}

void AckSyncOperationDescriptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSyncOperationDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSyncOperationDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSyncOperationDescriptions_descriptor_;
}

const AckSyncOperationDescriptions& AckSyncOperationDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSyncOperationDescriptions* AckSyncOperationDescriptions::default_instance_ = NULL;

AckSyncOperationDescriptions* AckSyncOperationDescriptions::New() const {
  return new AckSyncOperationDescriptions;
}

void AckSyncOperationDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSyncOperationDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSyncOperationDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSyncOperationDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSyncOperationDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSyncOperationDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSyncOperationDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSyncOperationDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSyncOperationDescriptions::MergeFrom(const AckSyncOperationDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSyncOperationDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSyncOperationDescriptions::CopyFrom(const AckSyncOperationDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSyncOperationDescriptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckSyncOperationDescriptions::Swap(AckSyncOperationDescriptions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSyncOperationDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSyncOperationDescriptions_descriptor_;
  metadata.reflection = AckSyncOperationDescriptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationRoute::kCreatoridFieldNumber;
const int OperationRoute::kCreatetimeFieldNumber;
const int OperationRoute::kOdidFieldNumber;
const int OperationRoute::kFszFieldNumber;
const int OperationRoute::kPsiFieldNumber;
const int OperationRoute::kSprinklingwidthFieldNumber;
const int OperationRoute::kMaxvoyageFieldNumber;
const int OperationRoute::kSupplypointsFieldNumber;
const int OperationRoute::kMissionsFieldNumber;
const int OperationRoute::kOridFieldNumber;
#endif  // !_MSC_VER

OperationRoute::OperationRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationRoute::InitAsDefaultInstance() {
  fsz_ = const_cast< ::das::proto::ParcelSurveyInformation*>(&::das::proto::ParcelSurveyInformation::default_instance());
  psi_ = const_cast< ::das::proto::ParcelSurveyInformation*>(&::das::proto::ParcelSurveyInformation::default_instance());
}

OperationRoute::OperationRoute(const OperationRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationRoute::SharedCtor() {
  _cached_size_ = 0;
  creatorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_ULONGLONG(0);
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fsz_ = NULL;
  psi_ = NULL;
  sprinklingwidth_ = 0;
  maxvoyage_ = 0;
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationRoute::~OperationRoute() {
  SharedDtor();
}

void OperationRoute::SharedDtor() {
  if (creatorid_ != &::google::protobuf::internal::kEmptyString) {
    delete creatorid_;
  }
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (this != default_instance_) {
    delete fsz_;
    delete psi_;
  }
}

void OperationRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationRoute_descriptor_;
}

const OperationRoute& OperationRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

OperationRoute* OperationRoute::default_instance_ = NULL;

OperationRoute* OperationRoute::New() const {
  return new OperationRoute;
}

void OperationRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creatorid()) {
      if (creatorid_ != &::google::protobuf::internal::kEmptyString) {
        creatorid_->clear();
      }
    }
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
    if (has_fsz()) {
      if (fsz_ != NULL) fsz_->::das::proto::ParcelSurveyInformation::Clear();
    }
    if (has_psi()) {
      if (psi_ != NULL) psi_->::das::proto::ParcelSurveyInformation::Clear();
    }
    sprinklingwidth_ = 0;
    maxvoyage_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
  }
  supplypoints_.Clear();
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string creatorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creatorid().data(), this->creatorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createtime;
        break;
      }

      // required uint64 createtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_odid;
        break;
      }

      // optional string odid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fsz;
        break;
      }

      // optional .das.proto.ParcelSurveyInformation fsz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsz:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fsz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_psi;
        break;
      }

      // required .das.proto.ParcelSurveyInformation psi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sprinklingwidth;
        break;
      }

      // required float sprinklingwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sprinklingwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sprinklingwidth_)));
          set_has_sprinklingwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxvoyage;
        break;
      }

      // required float maxvoyage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxvoyage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvoyage_)));
          set_has_maxvoyage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_supplypoints;
        break;
      }

      // repeated .das.proto.Coordinate supplypoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_supplypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_supplypoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_supplypoints;
        if (input->ExpectTag(74)) goto parse_missions;
        break;
      }

      // repeated bytes missions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_missions;
        if (input->ExpectTag(82)) goto parse_orid;
        break;
      }

      // optional string orid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string creatorid = 1;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->creatorid(), output);
  }

  // required uint64 createtime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->createtime(), output);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->odid(), output);
  }

  // optional .das.proto.ParcelSurveyInformation fsz = 4;
  if (has_fsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fsz(), output);
  }

  // required .das.proto.ParcelSurveyInformation psi = 5;
  if (has_psi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->psi(), output);
  }

  // required float sprinklingwidth = 6;
  if (has_sprinklingwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sprinklingwidth(), output);
  }

  // required float maxvoyage = 7;
  if (has_maxvoyage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxvoyage(), output);
  }

  // repeated .das.proto.Coordinate supplypoints = 8;
  for (int i = 0; i < this->supplypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->supplypoints(i), output);
  }

  // repeated bytes missions = 9;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->missions(i), output);
  }

  // optional string orid = 10;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->orid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string creatorid = 1;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creatorid(), target);
  }

  // required uint64 createtime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->createtime(), target);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->odid(), target);
  }

  // optional .das.proto.ParcelSurveyInformation fsz = 4;
  if (has_fsz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fsz(), target);
  }

  // required .das.proto.ParcelSurveyInformation psi = 5;
  if (has_psi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->psi(), target);
  }

  // required float sprinklingwidth = 6;
  if (has_sprinklingwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sprinklingwidth(), target);
  }

  // required float maxvoyage = 7;
  if (has_maxvoyage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxvoyage(), target);
  }

  // repeated .das.proto.Coordinate supplypoints = 8;
  for (int i = 0; i < this->supplypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->supplypoints(i), target);
  }

  // repeated bytes missions = 9;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->missions(i), target);
  }

  // optional string orid = 10;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->orid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationRoute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string creatorid = 1;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creatorid());
    }

    // required uint64 createtime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional string odid = 3;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

    // optional .das.proto.ParcelSurveyInformation fsz = 4;
    if (has_fsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fsz());
    }

    // required .das.proto.ParcelSurveyInformation psi = 5;
    if (has_psi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psi());
    }

    // required float sprinklingwidth = 6;
    if (has_sprinklingwidth()) {
      total_size += 1 + 4;
    }

    // required float maxvoyage = 7;
    if (has_maxvoyage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string orid = 10;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

  }
  // repeated .das.proto.Coordinate supplypoints = 8;
  total_size += 1 * this->supplypoints_size();
  for (int i = 0; i < this->supplypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->supplypoints(i));
  }

  // repeated bytes missions = 9;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationRoute::MergeFrom(const OperationRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  supplypoints_.MergeFrom(from.supplypoints_);
  missions_.MergeFrom(from.missions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
    if (from.has_fsz()) {
      mutable_fsz()->::das::proto::ParcelSurveyInformation::MergeFrom(from.fsz());
    }
    if (from.has_psi()) {
      mutable_psi()->::das::proto::ParcelSurveyInformation::MergeFrom(from.psi());
    }
    if (from.has_sprinklingwidth()) {
      set_sprinklingwidth(from.sprinklingwidth());
    }
    if (from.has_maxvoyage()) {
      set_maxvoyage(from.maxvoyage());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_orid()) {
      set_orid(from.orid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationRoute::CopyFrom(const OperationRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000073) != 0x00000073) return false;

  if (has_fsz()) {
    if (!this->fsz().IsInitialized()) return false;
  }
  if (has_psi()) {
    if (!this->psi().IsInitialized()) return false;
  }
  for (int i = 0; i < supplypoints_size(); i++) {
    if (!this->supplypoints(i).IsInitialized()) return false;
  }
  return true;
}

void OperationRoute::Swap(OperationRoute* other) {
  if (other != this) {
    std::swap(creatorid_, other->creatorid_);
    std::swap(createtime_, other->createtime_);
    std::swap(odid_, other->odid_);
    std::swap(fsz_, other->fsz_);
    std::swap(psi_, other->psi_);
    std::swap(sprinklingwidth_, other->sprinklingwidth_);
    std::swap(maxvoyage_, other->maxvoyage_);
    supplypoints_.Swap(&other->supplypoints_);
    missions_.Swap(&other->missions_);
    std::swap(orid_, other->orid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationRoute_descriptor_;
  metadata.reflection = OperationRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostOperationRoute::kSeqnoFieldNumber;
const int PostOperationRoute::kOrFieldNumber;
#endif  // !_MSC_VER

PostOperationRoute::PostOperationRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostOperationRoute::InitAsDefaultInstance() {
  or__ = const_cast< ::das::proto::OperationRoute*>(&::das::proto::OperationRoute::default_instance());
}

PostOperationRoute::PostOperationRoute(const PostOperationRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostOperationRoute::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  or__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostOperationRoute::~PostOperationRoute() {
  SharedDtor();
}

void PostOperationRoute::SharedDtor() {
  if (this != default_instance_) {
    delete or__;
  }
}

void PostOperationRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostOperationRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostOperationRoute_descriptor_;
}

const PostOperationRoute& PostOperationRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostOperationRoute* PostOperationRoute::default_instance_ = NULL;

PostOperationRoute* PostOperationRoute::New() const {
  return new PostOperationRoute;
}

void PostOperationRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_or_()) {
      if (or__ != NULL) or__->::das::proto::OperationRoute::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostOperationRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_or;
        break;
      }

      // required .das.proto.OperationRoute or = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_or:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_or_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostOperationRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.OperationRoute or = 2;
  if (has_or_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->or_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostOperationRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.OperationRoute or = 2;
  if (has_or_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->or_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostOperationRoute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.OperationRoute or = 2;
    if (has_or_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->or_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostOperationRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostOperationRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostOperationRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostOperationRoute::MergeFrom(const PostOperationRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_or_()) {
      mutable_or_()->::das::proto::OperationRoute::MergeFrom(from.or_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostOperationRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOperationRoute::CopyFrom(const PostOperationRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOperationRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_or_()) {
    if (!this->or_().IsInitialized()) return false;
  }
  return true;
}

void PostOperationRoute::Swap(PostOperationRoute* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(or__, other->or__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostOperationRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostOperationRoute_descriptor_;
  metadata.reflection = PostOperationRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostOperationRoute::kSeqnoFieldNumber;
const int AckPostOperationRoute::kResultFieldNumber;
const int AckPostOperationRoute::kOridFieldNumber;
const int AckPostOperationRoute::kFszidFieldNumber;
const int AckPostOperationRoute::kPsiidFieldNumber;
#endif  // !_MSC_VER

AckPostOperationRoute::AckPostOperationRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostOperationRoute::InitAsDefaultInstance() {
}

AckPostOperationRoute::AckPostOperationRoute(const AckPostOperationRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostOperationRoute::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fszid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostOperationRoute::~AckPostOperationRoute() {
  SharedDtor();
}

void AckPostOperationRoute::SharedDtor() {
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (fszid_ != &::google::protobuf::internal::kEmptyString) {
    delete fszid_;
  }
  if (psiid_ != &::google::protobuf::internal::kEmptyString) {
    delete psiid_;
  }
  if (this != default_instance_) {
  }
}

void AckPostOperationRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostOperationRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostOperationRoute_descriptor_;
}

const AckPostOperationRoute& AckPostOperationRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostOperationRoute* AckPostOperationRoute::default_instance_ = NULL;

AckPostOperationRoute* AckPostOperationRoute::New() const {
  return new AckPostOperationRoute;
}

void AckPostOperationRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_fszid()) {
      if (fszid_ != &::google::protobuf::internal::kEmptyString) {
        fszid_->clear();
      }
    }
    if (has_psiid()) {
      if (psiid_ != &::google::protobuf::internal::kEmptyString) {
        psiid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostOperationRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orid;
        break;
      }

      // optional string orid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fszid;
        break;
      }

      // optional string fszid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fszid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fszid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fszid().data(), this->fszid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_psiid;
        break;
      }

      // optional string psiid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psiid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psiid().data(), this->psiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostOperationRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orid(), output);
  }

  // optional string fszid = 4;
  if (has_fszid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fszid().data(), this->fszid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fszid(), output);
  }

  // optional string psiid = 5;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->psiid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostOperationRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orid(), target);
  }

  // optional string fszid = 4;
  if (has_fszid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fszid().data(), this->fszid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fszid(), target);
  }

  // optional string psiid = 5;
  if (has_psiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psiid().data(), this->psiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->psiid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostOperationRoute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string orid = 3;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // optional string fszid = 4;
    if (has_fszid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fszid());
    }

    // optional string psiid = 5;
    if (has_psiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psiid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostOperationRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostOperationRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostOperationRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostOperationRoute::MergeFrom(const AckPostOperationRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_fszid()) {
      set_fszid(from.fszid());
    }
    if (from.has_psiid()) {
      set_psiid(from.psiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostOperationRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostOperationRoute::CopyFrom(const AckPostOperationRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostOperationRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostOperationRoute::Swap(AckPostOperationRoute* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(orid_, other->orid_);
    std::swap(fszid_, other->fszid_);
    std::swap(psiid_, other->psiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostOperationRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostOperationRoute_descriptor_;
  metadata.reflection = AckPostOperationRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOperationRoutes::kSeqnoFieldNumber;
const int RequestOperationRoutes::kOridFieldNumber;
const int RequestOperationRoutes::kOdidFieldNumber;
const int RequestOperationRoutes::kPdidFieldNumber;
const int RequestOperationRoutes::kCoordinateFieldNumber;
#endif  // !_MSC_VER

RequestOperationRoutes::RequestOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestOperationRoutes::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::das::proto::Coordinate*>(&::das::proto::Coordinate::default_instance());
}

RequestOperationRoutes::RequestOperationRoutes(const RequestOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  odid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOperationRoutes::~RequestOperationRoutes() {
  SharedDtor();
}

void RequestOperationRoutes::SharedDtor() {
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (odid_ != &::google::protobuf::internal::kEmptyString) {
    delete odid_;
  }
  if (pdid_ != &::google::protobuf::internal::kEmptyString) {
    delete pdid_;
  }
  if (this != default_instance_) {
    delete coordinate_;
  }
}

void RequestOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOperationRoutes_descriptor_;
}

const RequestOperationRoutes& RequestOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestOperationRoutes* RequestOperationRoutes::default_instance_ = NULL;

RequestOperationRoutes* RequestOperationRoutes::New() const {
  return new RequestOperationRoutes;
}

void RequestOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_odid()) {
      if (odid_ != &::google::protobuf::internal::kEmptyString) {
        odid_->clear();
      }
    }
    if (has_pdid()) {
      if (pdid_ != &::google::protobuf::internal::kEmptyString) {
        pdid_->clear();
      }
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::das::proto::Coordinate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orid;
        break;
      }

      // optional string orid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_odid;
        break;
      }

      // optional string odid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->odid().data(), this->odid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pdid;
        break;
      }

      // optional string pdid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdid().data(), this->pdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_coordinate;
        break;
      }

      // optional .das.proto.Coordinate coordinate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string orid = 2;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orid(), output);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->odid(), output);
  }

  // optional string pdid = 4;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pdid(), output);
  }

  // optional .das.proto.Coordinate coordinate = 5;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coordinate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string orid = 2;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orid(), target);
  }

  // optional string odid = 3;
  if (has_odid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->odid().data(), this->odid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->odid(), target);
  }

  // optional string pdid = 4;
  if (has_pdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdid().data(), this->pdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pdid(), target);
  }

  // optional .das.proto.Coordinate coordinate = 5;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->coordinate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string orid = 2;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // optional string odid = 3;
    if (has_odid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odid());
    }

    // optional string pdid = 4;
    if (has_pdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdid());
    }

    // optional .das.proto.Coordinate coordinate = 5;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOperationRoutes::MergeFrom(const RequestOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_odid()) {
      set_odid(from.odid());
    }
    if (from.has_pdid()) {
      set_pdid(from.pdid());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::das::proto::Coordinate::MergeFrom(from.coordinate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOperationRoutes::CopyFrom(const RequestOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void RequestOperationRoutes::Swap(RequestOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(orid_, other->orid_);
    std::swap(odid_, other->odid_);
    std::swap(pdid_, other->pdid_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOperationRoutes_descriptor_;
  metadata.reflection = RequestOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestOperationRoutes::kSeqnoFieldNumber;
const int AckRequestOperationRoutes::kResultFieldNumber;
const int AckRequestOperationRoutes::kOrsFieldNumber;
#endif  // !_MSC_VER

AckRequestOperationRoutes::AckRequestOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestOperationRoutes::InitAsDefaultInstance() {
}

AckRequestOperationRoutes::AckRequestOperationRoutes(const AckRequestOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestOperationRoutes::~AckRequestOperationRoutes() {
  SharedDtor();
}

void AckRequestOperationRoutes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestOperationRoutes_descriptor_;
}

const AckRequestOperationRoutes& AckRequestOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestOperationRoutes* AckRequestOperationRoutes::default_instance_ = NULL;

AckRequestOperationRoutes* AckRequestOperationRoutes::New() const {
  return new AckRequestOperationRoutes;
}

void AckRequestOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ors;
        break;
      }

      // repeated .das.proto.OperationRoute ors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .das.proto.OperationRoute ors = 3;
  for (int i = 0; i < this->ors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .das.proto.OperationRoute ors = 3;
  for (int i = 0; i < this->ors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.OperationRoute ors = 3;
  total_size += 1 * this->ors_size();
  for (int i = 0; i < this->ors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestOperationRoutes::MergeFrom(const AckRequestOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  ors_.MergeFrom(from.ors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestOperationRoutes::CopyFrom(const AckRequestOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ors_size(); i++) {
    if (!this->ors(i).IsInitialized()) return false;
  }
  return true;
}

void AckRequestOperationRoutes::Swap(AckRequestOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    ors_.Swap(&other->ors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestOperationRoutes_descriptor_;
  metadata.reflection = AckRequestOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUploadOperationRoutes::kSeqnoFieldNumber;
const int RequestUploadOperationRoutes::kUavidFieldNumber;
const int RequestUploadOperationRoutes::kOridFieldNumber;
#endif  // !_MSC_VER

RequestUploadOperationRoutes::RequestUploadOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUploadOperationRoutes::InitAsDefaultInstance() {
}

RequestUploadOperationRoutes::RequestUploadOperationRoutes(const RequestUploadOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUploadOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUploadOperationRoutes::~RequestUploadOperationRoutes() {
  SharedDtor();
}

void RequestUploadOperationRoutes::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (this != default_instance_) {
  }
}

void RequestUploadOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUploadOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUploadOperationRoutes_descriptor_;
}

const RequestUploadOperationRoutes& RequestUploadOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestUploadOperationRoutes* RequestUploadOperationRoutes::default_instance_ = NULL;

RequestUploadOperationRoutes* RequestUploadOperationRoutes::New() const {
  return new RequestUploadOperationRoutes;
}

void RequestUploadOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUploadOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orid;
        break;
      }

      // required string orid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUploadOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUploadOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUploadOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 3;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUploadOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUploadOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUploadOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUploadOperationRoutes::MergeFrom(const RequestUploadOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUploadOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUploadOperationRoutes::CopyFrom(const RequestUploadOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUploadOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestUploadOperationRoutes::Swap(RequestUploadOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUploadOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUploadOperationRoutes_descriptor_;
  metadata.reflection = RequestUploadOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestUploadOperationRoutes::kSeqnoFieldNumber;
const int AckRequestUploadOperationRoutes::kResultFieldNumber;
const int AckRequestUploadOperationRoutes::kUavidFieldNumber;
const int AckRequestUploadOperationRoutes::kOridFieldNumber;
const int AckRequestUploadOperationRoutes::kIndexFieldNumber;
const int AckRequestUploadOperationRoutes::kCountFieldNumber;
#endif  // !_MSC_VER

AckRequestUploadOperationRoutes::AckRequestUploadOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestUploadOperationRoutes::InitAsDefaultInstance() {
}

AckRequestUploadOperationRoutes::AckRequestUploadOperationRoutes(const AckRequestUploadOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestUploadOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestUploadOperationRoutes::~AckRequestUploadOperationRoutes() {
  SharedDtor();
}

void AckRequestUploadOperationRoutes::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (this != default_instance_) {
  }
}

void AckRequestUploadOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestUploadOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestUploadOperationRoutes_descriptor_;
}

const AckRequestUploadOperationRoutes& AckRequestUploadOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestUploadOperationRoutes* AckRequestUploadOperationRoutes::default_instance_ = NULL;

AckRequestUploadOperationRoutes* AckRequestUploadOperationRoutes::New() const {
  return new AckRequestUploadOperationRoutes;
}

void AckRequestUploadOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    index_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestUploadOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // required string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_orid;
        break;
      }

      // required string orid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestUploadOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(), output);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orid(), output);
  }

  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestUploadOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavid(), target);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orid(), target);
  }

  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestUploadOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string uavid = 3;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 4;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestUploadOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestUploadOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestUploadOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestUploadOperationRoutes::MergeFrom(const AckRequestUploadOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestUploadOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestUploadOperationRoutes::CopyFrom(const AckRequestUploadOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestUploadOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AckRequestUploadOperationRoutes::Swap(AckRequestUploadOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestUploadOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestUploadOperationRoutes_descriptor_;
  metadata.reflection = AckRequestUploadOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadOperationRoutes::kSeqnoFieldNumber;
const int UploadOperationRoutes::kUavidFieldNumber;
const int UploadOperationRoutes::kOridFieldNumber;
const int UploadOperationRoutes::kUseridFieldNumber;
const int UploadOperationRoutes::kTimestampFieldNumber;
const int UploadOperationRoutes::kCountFieldNumber;
#endif  // !_MSC_VER

UploadOperationRoutes::UploadOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadOperationRoutes::InitAsDefaultInstance() {
}

UploadOperationRoutes::UploadOperationRoutes(const UploadOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadOperationRoutes::~UploadOperationRoutes() {
  SharedDtor();
}

void UploadOperationRoutes::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void UploadOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadOperationRoutes_descriptor_;
}

const UploadOperationRoutes& UploadOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UploadOperationRoutes* UploadOperationRoutes::default_instance_ = NULL;

UploadOperationRoutes* UploadOperationRoutes::New() const {
  return new UploadOperationRoutes;
}

void UploadOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orid;
        break;
      }

      // required string orid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // required int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orid(), target);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 3;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // required string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadOperationRoutes::MergeFrom(const UploadOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadOperationRoutes::CopyFrom(const UploadOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UploadOperationRoutes::Swap(UploadOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(userid_, other->userid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadOperationRoutes_descriptor_;
  metadata.reflection = UploadOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUploadOperationRoutes::kSeqnoFieldNumber;
const int AckUploadOperationRoutes::kResultFieldNumber;
const int AckUploadOperationRoutes::kUavidFieldNumber;
const int AckUploadOperationRoutes::kOridFieldNumber;
const int AckUploadOperationRoutes::kUseridFieldNumber;
const int AckUploadOperationRoutes::kTimestampFieldNumber;
#endif  // !_MSC_VER

AckUploadOperationRoutes::AckUploadOperationRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUploadOperationRoutes::InitAsDefaultInstance() {
}

AckUploadOperationRoutes::AckUploadOperationRoutes(const AckUploadOperationRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUploadOperationRoutes::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUploadOperationRoutes::~AckUploadOperationRoutes() {
  SharedDtor();
}

void AckUploadOperationRoutes::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AckUploadOperationRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUploadOperationRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUploadOperationRoutes_descriptor_;
}

const AckUploadOperationRoutes& AckUploadOperationRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckUploadOperationRoutes* AckUploadOperationRoutes::default_instance_ = NULL;

AckUploadOperationRoutes* AckUploadOperationRoutes::New() const {
  return new AckUploadOperationRoutes;
}

void AckUploadOperationRoutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUploadOperationRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // required string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_orid;
        break;
      }

      // required string orid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }

      // required string userid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUploadOperationRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(), output);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orid(), output);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required uint64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUploadOperationRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavid(), target);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orid(), target);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required uint64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUploadOperationRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string uavid = 3;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 4;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // required string userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUploadOperationRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUploadOperationRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUploadOperationRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUploadOperationRoutes::MergeFrom(const AckUploadOperationRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUploadOperationRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUploadOperationRoutes::CopyFrom(const AckUploadOperationRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUploadOperationRoutes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AckUploadOperationRoutes::Swap(AckUploadOperationRoutes* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(userid_, other->userid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUploadOperationRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUploadOperationRoutes_descriptor_;
  metadata.reflection = AckUploadOperationRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRouteMissions::kSeqnoFieldNumber;
const int RequestRouteMissions::kUavidFieldNumber;
const int RequestRouteMissions::kOridFieldNumber;
const int RequestRouteMissions::kUseridFieldNumber;
const int RequestRouteMissions::kTimestampFieldNumber;
const int RequestRouteMissions::kOffsetFieldNumber;
const int RequestRouteMissions::kCountFieldNumber;
#endif  // !_MSC_VER

RequestRouteMissions::RequestRouteMissions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRouteMissions::InitAsDefaultInstance() {
}

RequestRouteMissions::RequestRouteMissions(const RequestRouteMissions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRouteMissions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  offset_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRouteMissions::~RequestRouteMissions() {
  SharedDtor();
}

void RequestRouteMissions::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RequestRouteMissions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRouteMissions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRouteMissions_descriptor_;
}

const RequestRouteMissions& RequestRouteMissions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestRouteMissions* RequestRouteMissions::default_instance_ = NULL;

RequestRouteMissions* RequestRouteMissions::New() const {
  return new RequestRouteMissions;
}

void RequestRouteMissions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    offset_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRouteMissions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orid;
        break;
      }

      // required string orid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // required int32 offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // required int32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRouteMissions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required int32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->offset(), output);
  }

  // required int32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRouteMissions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // required string orid = 3;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orid(), target);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required int32 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->offset(), target);
  }

  // required int32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRouteMissions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 3;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // required string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required int32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRouteMissions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRouteMissions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRouteMissions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRouteMissions::MergeFrom(const RequestRouteMissions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRouteMissions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRouteMissions::CopyFrom(const RequestRouteMissions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRouteMissions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void RequestRouteMissions::Swap(RequestRouteMissions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(userid_, other->userid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRouteMissions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRouteMissions_descriptor_;
  metadata.reflection = RequestRouteMissions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestRouteMissions::kSeqnoFieldNumber;
const int AckRequestRouteMissions::kResultFieldNumber;
const int AckRequestRouteMissions::kUavidFieldNumber;
const int AckRequestRouteMissions::kOridFieldNumber;
const int AckRequestRouteMissions::kUseridFieldNumber;
const int AckRequestRouteMissions::kTimestampFieldNumber;
const int AckRequestRouteMissions::kOffsetFieldNumber;
const int AckRequestRouteMissions::kMissionsFieldNumber;
#endif  // !_MSC_VER

AckRequestRouteMissions::AckRequestRouteMissions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestRouteMissions::InitAsDefaultInstance() {
}

AckRequestRouteMissions::AckRequestRouteMissions(const AckRequestRouteMissions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestRouteMissions::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestRouteMissions::~AckRequestRouteMissions() {
  SharedDtor();
}

void AckRequestRouteMissions::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (orid_ != &::google::protobuf::internal::kEmptyString) {
    delete orid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AckRequestRouteMissions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestRouteMissions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestRouteMissions_descriptor_;
}

const AckRequestRouteMissions& AckRequestRouteMissions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestRouteMissions* AckRequestRouteMissions::default_instance_ = NULL;

AckRequestRouteMissions* AckRequestRouteMissions::New() const {
  return new AckRequestRouteMissions;
}

void AckRequestRouteMissions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_orid()) {
      if (orid_ != &::google::protobuf::internal::kEmptyString) {
        orid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    offset_ = 0;
  }
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestRouteMissions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // required string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_orid;
        break;
      }

      // required string orid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orid().data(), this->orid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }

      // required string userid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_offset;
        break;
      }

      // required int32 offset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_missions;
        break;
      }

      // repeated bytes missions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestRouteMissions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(), output);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->orid(), output);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required uint64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  // required int32 offset = 7;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->offset(), output);
  }

  // repeated bytes missions = 8;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->missions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestRouteMissions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavid(), target);
  }

  // required string orid = 4;
  if (has_orid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orid().data(), this->orid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orid(), target);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required uint64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  // required int32 offset = 7;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->offset(), target);
  }

  // repeated bytes missions = 8;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->missions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestRouteMissions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string uavid = 3;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string orid = 4;
    if (has_orid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orid());
    }

    // required string userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required int32 offset = 7;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated bytes missions = 8;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestRouteMissions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestRouteMissions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestRouteMissions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestRouteMissions::MergeFrom(const AckRequestRouteMissions& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_orid()) {
      set_orid(from.orid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestRouteMissions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestRouteMissions::CopyFrom(const AckRequestRouteMissions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestRouteMissions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AckRequestRouteMissions::Swap(AckRequestRouteMissions* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(uavid_, other->uavid_);
    std::swap(orid_, other->orid_);
    std::swap(userid_, other->userid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(offset_, other->offset_);
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestRouteMissions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestRouteMissions_descriptor_;
  metadata.reflection = AckRequestRouteMissions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UavStatus::kUavidFieldNumber;
const int UavStatus::kResultFieldNumber;
const int UavStatus::kOnlineFieldNumber;
const int UavStatus::kLandedFieldNumber;
const int UavStatus::kDeadlineFieldNumber;
const int UavStatus::kBindedFieldNumber;
const int UavStatus::kBinderFieldNumber;
const int UavStatus::kBindtimeFieldNumber;
const int UavStatus::kUnbindtimeFieldNumber;
const int UavStatus::kPosFieldNumber;
const int UavStatus::kTimestampFieldNumber;
#endif  // !_MSC_VER

UavStatus::UavStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UavStatus::InitAsDefaultInstance() {
  pos_ = const_cast< ::das::proto::GpsInformation*>(&::das::proto::GpsInformation::default_instance());
}

UavStatus::UavStatus(const UavStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UavStatus::SharedCtor() {
  _cached_size_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  online_ = false;
  landed_ = false;
  deadline_ = GOOGLE_ULONGLONG(0);
  binded_ = false;
  binder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bindtime_ = GOOGLE_ULONGLONG(0);
  unbindtime_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UavStatus::~UavStatus() {
  SharedDtor();
}

void UavStatus::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (binder_ != &::google::protobuf::internal::kEmptyString) {
    delete binder_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void UavStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UavStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UavStatus_descriptor_;
}

const UavStatus& UavStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UavStatus* UavStatus::default_instance_ = NULL;

UavStatus* UavStatus::New() const {
  return new UavStatus;
}

void UavStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    result_ = 0;
    online_ = false;
    landed_ = false;
    deadline_ = GOOGLE_ULONGLONG(0);
    binded_ = false;
    if (has_binder()) {
      if (binder_ != &::google::protobuf::internal::kEmptyString) {
        binder_->clear();
      }
    }
    bindtime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unbindtime_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::das::proto::GpsInformation::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UavStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uavid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_landed;
        break;
      }

      // optional bool landed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &landed_)));
          set_has_landed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deadline;
        break;
      }

      // optional uint64 deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_binded;
        break;
      }

      // optional bool binded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_binder;
        break;
      }

      // optional string binder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binder().data(), this->binder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bindtime;
        break;
      }

      // optional uint64 bindtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bindtime_)));
          set_has_bindtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unbindtime;
        break;
      }

      // optional uint64 unbindtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unbindtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unbindtime_)));
          set_has_unbindtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pos;
        break;
      }

      // optional .das.proto.GpsInformation pos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UavStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uavid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // optional bool landed = 4;
  if (has_landed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->landed(), output);
  }

  // optional uint64 deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->deadline(), output);
  }

  // optional bool binded = 6;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->binded(), output);
  }

  // optional string binder = 7;
  if (has_binder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binder().data(), this->binder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->binder(), output);
  }

  // optional uint64 bindtime = 8;
  if (has_bindtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->bindtime(), output);
  }

  // optional uint64 unbindtime = 9;
  if (has_unbindtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->unbindtime(), output);
  }

  // optional .das.proto.GpsInformation pos = 10;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pos(), output);
  }

  // optional uint64 timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UavStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uavid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  // optional bool landed = 4;
  if (has_landed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->landed(), target);
  }

  // optional uint64 deadline = 5;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->deadline(), target);
  }

  // optional bool binded = 6;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->binded(), target);
  }

  // optional string binder = 7;
  if (has_binder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binder().data(), this->binder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->binder(), target);
  }

  // optional uint64 bindtime = 8;
  if (has_bindtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->bindtime(), target);
  }

  // optional uint64 unbindtime = 9;
  if (has_unbindtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->unbindtime(), target);
  }

  // optional .das.proto.GpsInformation pos = 10;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pos(), target);
  }

  // optional uint64 timestamp = 11;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UavStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uavid = 1;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional bool landed = 4;
    if (has_landed()) {
      total_size += 1 + 1;
    }

    // optional uint64 deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deadline());
    }

    // optional bool binded = 6;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional string binder = 7;
    if (has_binder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binder());
    }

    // optional uint64 bindtime = 8;
    if (has_bindtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bindtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 unbindtime = 9;
    if (has_unbindtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unbindtime());
    }

    // optional .das.proto.GpsInformation pos = 10;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UavStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UavStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UavStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UavStatus::MergeFrom(const UavStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_landed()) {
      set_landed(from.landed());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_binder()) {
      set_binder(from.binder());
    }
    if (from.has_bindtime()) {
      set_bindtime(from.bindtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unbindtime()) {
      set_unbindtime(from.unbindtime());
    }
    if (from.has_pos()) {
      mutable_pos()->::das::proto::GpsInformation::MergeFrom(from.pos());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UavStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavStatus::CopyFrom(const UavStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void UavStatus::Swap(UavStatus* other) {
  if (other != this) {
    std::swap(uavid_, other->uavid_);
    std::swap(result_, other->result_);
    std::swap(online_, other->online_);
    std::swap(landed_, other->landed_);
    std::swap(deadline_, other->deadline_);
    std::swap(binded_, other->binded_);
    std::swap(binder_, other->binder_);
    std::swap(bindtime_, other->bindtime_);
    std::swap(unbindtime_, other->unbindtime_);
    std::swap(pos_, other->pos_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UavStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UavStatus_descriptor_;
  metadata.reflection = UavStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUavStatus::kSeqnoFieldNumber;
const int RequestUavStatus::kUavidFieldNumber;
#endif  // !_MSC_VER

RequestUavStatus::RequestUavStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUavStatus::InitAsDefaultInstance() {
}

RequestUavStatus::RequestUavStatus(const RequestUavStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUavStatus::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUavStatus::~RequestUavStatus() {
  SharedDtor();
}

void RequestUavStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUavStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUavStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUavStatus_descriptor_;
}

const RequestUavStatus& RequestUavStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestUavStatus* RequestUavStatus::default_instance_ = NULL;

RequestUavStatus* RequestUavStatus::New() const {
  return new RequestUavStatus;
}

void RequestUavStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  uavid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUavStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // repeated string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid(this->uavid_size() - 1).data(),
            this->uavid(this->uavid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUavStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated string uavid = 2;
  for (int i = 0; i < this->uavid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uavid(i).data(), this->uavid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUavStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated string uavid = 2;
  for (int i = 0; i < this->uavid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid(i).data(), this->uavid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->uavid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUavStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated string uavid = 2;
  total_size += 1 * this->uavid_size();
  for (int i = 0; i < this->uavid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uavid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUavStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUavStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUavStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUavStatus::MergeFrom(const RequestUavStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  uavid_.MergeFrom(from.uavid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUavStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUavStatus::CopyFrom(const RequestUavStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUavStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUavStatus::Swap(RequestUavStatus* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    uavid_.Swap(&other->uavid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUavStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUavStatus_descriptor_;
  metadata.reflection = RequestUavStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestUavStatus::kSeqnoFieldNumber;
const int AckRequestUavStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

AckRequestUavStatus::AckRequestUavStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestUavStatus::InitAsDefaultInstance() {
}

AckRequestUavStatus::AckRequestUavStatus(const AckRequestUavStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestUavStatus::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestUavStatus::~AckRequestUavStatus() {
  SharedDtor();
}

void AckRequestUavStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestUavStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestUavStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestUavStatus_descriptor_;
}

const AckRequestUavStatus& AckRequestUavStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestUavStatus* AckRequestUavStatus::default_instance_ = NULL;

AckRequestUavStatus* AckRequestUavStatus::New() const {
  return new AckRequestUavStatus;
}

void AckRequestUavStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestUavStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .das.proto.UavStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestUavStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated .das.proto.UavStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestUavStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated .das.proto.UavStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestUavStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated .das.proto.UavStatus status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestUavStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestUavStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestUavStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestUavStatus::MergeFrom(const AckRequestUavStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestUavStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestUavStatus::CopyFrom(const AckRequestUavStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestUavStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void AckRequestUavStatus::Swap(AckRequestUavStatus* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestUavStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestUavStatus_descriptor_;
  metadata.reflection = AckRequestUavStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindUav::kSeqnoFieldNumber;
const int RequestBindUav::kOpidFieldNumber;
const int RequestBindUav::kUavidFieldNumber;
const int RequestBindUav::kBinderFieldNumber;
#endif  // !_MSC_VER

RequestBindUav::RequestBindUav()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindUav::InitAsDefaultInstance() {
}

RequestBindUav::RequestBindUav(const RequestBindUav& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindUav::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  opid_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindUav::~RequestBindUav() {
  SharedDtor();
}

void RequestBindUav::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (binder_ != &::google::protobuf::internal::kEmptyString) {
    delete binder_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindUav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindUav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindUav_descriptor_;
}

const RequestBindUav& RequestBindUav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestBindUav* RequestBindUav::default_instance_ = NULL;

RequestBindUav* RequestBindUav::New() const {
  return new RequestBindUav;
}

void RequestBindUav::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    opid_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_binder()) {
      if (binder_ != &::google::protobuf::internal::kEmptyString) {
        binder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindUav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opid;
        break;
      }

      // required uint32 opid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // required string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_binder;
        break;
      }

      // required string binder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binder().data(), this->binder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindUav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required uint32 opid = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(), output);
  }

  // required string binder = 4;
  if (has_binder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binder().data(), this->binder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->binder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindUav::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required uint32 opid = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavid(), target);
  }

  // required string binder = 4;
  if (has_binder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binder().data(), this->binder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->binder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindUav::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required uint32 opid = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // required string uavid = 3;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string binder = 4;
    if (has_binder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindUav::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindUav* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindUav*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindUav::MergeFrom(const RequestBindUav& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_binder()) {
      set_binder(from.binder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindUav::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindUav::CopyFrom(const RequestBindUav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindUav::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestBindUav::Swap(RequestBindUav* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(opid_, other->opid_);
    std::swap(uavid_, other->uavid_);
    std::swap(binder_, other->binder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindUav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindUav_descriptor_;
  metadata.reflection = RequestBindUav_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestBindUav::kSeqnoFieldNumber;
const int AckRequestBindUav::kOpidFieldNumber;
const int AckRequestBindUav::kResultFieldNumber;
const int AckRequestBindUav::kStatusFieldNumber;
#endif  // !_MSC_VER

AckRequestBindUav::AckRequestBindUav()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestBindUav::InitAsDefaultInstance() {
  status_ = const_cast< ::das::proto::UavStatus*>(&::das::proto::UavStatus::default_instance());
}

AckRequestBindUav::AckRequestBindUav(const AckRequestBindUav& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestBindUav::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  opid_ = 0u;
  result_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestBindUav::~AckRequestBindUav() {
  SharedDtor();
}

void AckRequestBindUav::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void AckRequestBindUav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestBindUav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestBindUav_descriptor_;
}

const AckRequestBindUav& AckRequestBindUav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestBindUav* AckRequestBindUav::default_instance_ = NULL;

AckRequestBindUav* AckRequestBindUav::New() const {
  return new AckRequestBindUav;
}

void AckRequestBindUav::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    opid_ = 0u;
    result_ = 0;
    if (has_status()) {
      if (status_ != NULL) status_->::das::proto::UavStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestBindUav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opid;
        break;
      }

      // required uint32 opid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional .das.proto.UavStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestBindUav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required uint32 opid = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional .das.proto.UavStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestBindUav::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required uint32 opid = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional .das.proto.UavStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestBindUav::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required uint32 opid = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .das.proto.UavStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestBindUav::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestBindUav* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestBindUav*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestBindUav::MergeFrom(const AckRequestBindUav& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_status()) {
      mutable_status()->::das::proto::UavStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestBindUav::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestBindUav::CopyFrom(const AckRequestBindUav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestBindUav::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void AckRequestBindUav::Swap(AckRequestBindUav* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(opid_, other->opid_);
    std::swap(result_, other->result_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestBindUav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestBindUav_descriptor_;
  metadata.reflection = AckRequestBindUav_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UavProductInfo::kUavidFieldNumber;
const int UavProductInfo::kProducttypeFieldNumber;
const int UavProductInfo::kProductidFieldNumber;
const int UavProductInfo::kOrganizationFieldNumber;
const int UavProductInfo::kManagerFieldNumber;
const int UavProductInfo::kContactFieldNumber;
#endif  // !_MSC_VER

UavProductInfo::UavProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UavProductInfo::InitAsDefaultInstance() {
}

UavProductInfo::UavProductInfo(const UavProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UavProductInfo::SharedCtor() {
  _cached_size_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  organization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manager_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UavProductInfo::~UavProductInfo() {
  SharedDtor();
}

void UavProductInfo::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (producttype_ != &::google::protobuf::internal::kEmptyString) {
    delete producttype_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (organization_ != &::google::protobuf::internal::kEmptyString) {
    delete organization_;
  }
  if (manager_ != &::google::protobuf::internal::kEmptyString) {
    delete manager_;
  }
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (this != default_instance_) {
  }
}

void UavProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UavProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UavProductInfo_descriptor_;
}

const UavProductInfo& UavProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UavProductInfo* UavProductInfo::default_instance_ = NULL;

UavProductInfo* UavProductInfo::New() const {
  return new UavProductInfo;
}

void UavProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_producttype()) {
      if (producttype_ != &::google::protobuf::internal::kEmptyString) {
        producttype_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_organization()) {
      if (organization_ != &::google::protobuf::internal::kEmptyString) {
        organization_->clear();
      }
    }
    if (has_manager()) {
      if (manager_ != &::google::protobuf::internal::kEmptyString) {
        manager_->clear();
      }
    }
    if (has_contact()) {
      if (contact_ != &::google::protobuf::internal::kEmptyString) {
        contact_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UavProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uavid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_producttype;
        break;
      }

      // optional string producttype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_producttype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttype().data(), this->producttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_productid;
        break;
      }

      // optional string productid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_organization;
        break;
      }

      // optional string organization = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->organization().data(), this->organization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_manager;
        break;
      }

      // optional string manager = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manager().data(), this->manager().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_contact;
        break;
      }

      // optional string contact = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UavProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uavid(), output);
  }

  // optional string producttype = 2;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->producttype(), output);
  }

  // optional string productid = 3;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->productid(), output);
  }

  // optional string organization = 4;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->organization(), output);
  }

  // optional string manager = 5;
  if (has_manager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manager().data(), this->manager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->manager(), output);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->contact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UavProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uavid = 1;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uavid(), target);
  }

  // optional string producttype = 2;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producttype(), target);
  }

  // optional string productid = 3;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productid(), target);
  }

  // optional string organization = 4;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->organization(), target);
  }

  // optional string manager = 5;
  if (has_manager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manager().data(), this->manager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->manager(), target);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UavProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uavid = 1;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // optional string producttype = 2;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttype());
    }

    // optional string productid = 3;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string organization = 4;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->organization());
    }

    // optional string manager = 5;
    if (has_manager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager());
    }

    // optional string contact = 6;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UavProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UavProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UavProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UavProductInfo::MergeFrom(const UavProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_organization()) {
      set_organization(from.organization());
    }
    if (from.has_manager()) {
      set_manager(from.manager());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UavProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavProductInfo::CopyFrom(const UavProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavProductInfo::IsInitialized() const {

  return true;
}

void UavProductInfo::Swap(UavProductInfo* other) {
  if (other != this) {
    std::swap(uavid_, other->uavid_);
    std::swap(producttype_, other->producttype_);
    std::swap(productid_, other->productid_);
    std::swap(organization_, other->organization_);
    std::swap(manager_, other->manager_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UavProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UavProductInfo_descriptor_;
  metadata.reflection = UavProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUavProductInfos::kSeqnoFieldNumber;
const int RequestUavProductInfos::kProductidFieldNumber;
const int RequestUavProductInfos::kUavidFieldNumber;
#endif  // !_MSC_VER

RequestUavProductInfos::RequestUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUavProductInfos::InitAsDefaultInstance() {
}

RequestUavProductInfos::RequestUavProductInfos(const RequestUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUavProductInfos::~RequestUavProductInfos() {
  SharedDtor();
}

void RequestUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUavProductInfos_descriptor_;
}

const RequestUavProductInfos& RequestUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestUavProductInfos* RequestUavProductInfos::default_instance_ = NULL;

RequestUavProductInfos* RequestUavProductInfos::New() const {
  return new RequestUavProductInfos;
}

void RequestUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  productid_.Clear();
  uavid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productid;
        break;
      }

      // repeated string productid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid(this->productid_size() - 1).data(),
            this->productid(this->productid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productid;
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // repeated string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid(this->uavid_size() - 1).data(),
            this->uavid(this->uavid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated string productid = 2;
  for (int i = 0; i < this->productid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->productid(i).data(), this->productid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productid(i), output);
  }

  // repeated string uavid = 3;
  for (int i = 0; i < this->uavid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uavid(i).data(), this->uavid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated string productid = 2;
  for (int i = 0; i < this->productid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid(i).data(), this->productid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->productid(i), target);
  }

  // repeated string uavid = 3;
  for (int i = 0; i < this->uavid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid(i).data(), this->uavid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->uavid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated string productid = 2;
  total_size += 1 * this->productid_size();
  for (int i = 0; i < this->productid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productid(i));
  }

  // repeated string uavid = 3;
  total_size += 1 * this->uavid_size();
  for (int i = 0; i < this->uavid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uavid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUavProductInfos::MergeFrom(const RequestUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  productid_.MergeFrom(from.productid_);
  uavid_.MergeFrom(from.uavid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUavProductInfos::CopyFrom(const RequestUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUavProductInfos::Swap(RequestUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    productid_.Swap(&other->productid_);
    uavid_.Swap(&other->uavid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUavProductInfos_descriptor_;
  metadata.reflection = RequestUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequestUavProductInfos::kSeqnoFieldNumber;
const int AckRequestUavProductInfos::kResultFieldNumber;
const int AckRequestUavProductInfos::kUpiFieldNumber;
#endif  // !_MSC_VER

AckRequestUavProductInfos::AckRequestUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequestUavProductInfos::InitAsDefaultInstance() {
}

AckRequestUavProductInfos::AckRequestUavProductInfos(const AckRequestUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequestUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequestUavProductInfos::~AckRequestUavProductInfos() {
  SharedDtor();
}

void AckRequestUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequestUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequestUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequestUavProductInfos_descriptor_;
}

const AckRequestUavProductInfos& AckRequestUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckRequestUavProductInfos* AckRequestUavProductInfos::default_instance_ = NULL;

AckRequestUavProductInfos* AckRequestUavProductInfos::New() const {
  return new AckRequestUavProductInfos;
}

void AckRequestUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  upi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequestUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_upi;
        break;
      }

      // repeated .das.proto.UavProductInfo upi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_upi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequestUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .das.proto.UavProductInfo upi = 3;
  for (int i = 0; i < this->upi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequestUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .das.proto.UavProductInfo upi = 3;
  for (int i = 0; i < this->upi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequestUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .das.proto.UavProductInfo upi = 3;
  total_size += 1 * this->upi_size();
  for (int i = 0; i < this->upi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequestUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequestUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequestUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequestUavProductInfos::MergeFrom(const AckRequestUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  upi_.MergeFrom(from.upi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequestUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequestUavProductInfos::CopyFrom(const AckRequestUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequestUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckRequestUavProductInfos::Swap(AckRequestUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    upi_.Swap(&other->upi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequestUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequestUavProductInfos_descriptor_;
  metadata.reflection = AckRequestUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncUavProductInfos::kSeqnoFieldNumber;
#endif  // !_MSC_VER

SyncUavProductInfos::SyncUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncUavProductInfos::InitAsDefaultInstance() {
}

SyncUavProductInfos::SyncUavProductInfos(const SyncUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUavProductInfos::~SyncUavProductInfos() {
  SharedDtor();
}

void SyncUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncUavProductInfos_descriptor_;
}

const SyncUavProductInfos& SyncUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SyncUavProductInfos* SyncUavProductInfos::default_instance_ = NULL;

SyncUavProductInfos* SyncUavProductInfos::New() const {
  return new SyncUavProductInfos;
}

void SyncUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncUavProductInfos::MergeFrom(const SyncUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncUavProductInfos::CopyFrom(const SyncUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncUavProductInfos::Swap(SyncUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncUavProductInfos_descriptor_;
  metadata.reflection = SyncUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSyncUavProductInfos::kSeqnoFieldNumber;
const int AckSyncUavProductInfos::kResultFieldNumber;
#endif  // !_MSC_VER

AckSyncUavProductInfos::AckSyncUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSyncUavProductInfos::InitAsDefaultInstance() {
}

AckSyncUavProductInfos::AckSyncUavProductInfos(const AckSyncUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSyncUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSyncUavProductInfos::~AckSyncUavProductInfos() {
  SharedDtor();
}

void AckSyncUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSyncUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSyncUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSyncUavProductInfos_descriptor_;
}

const AckSyncUavProductInfos& AckSyncUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSyncUavProductInfos* AckSyncUavProductInfos::default_instance_ = NULL;

AckSyncUavProductInfos* AckSyncUavProductInfos::New() const {
  return new AckSyncUavProductInfos;
}

void AckSyncUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSyncUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSyncUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSyncUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSyncUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSyncUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSyncUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSyncUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSyncUavProductInfos::MergeFrom(const AckSyncUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSyncUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSyncUavProductInfos::CopyFrom(const AckSyncUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSyncUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckSyncUavProductInfos::Swap(AckSyncUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSyncUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSyncUavProductInfos_descriptor_;
  metadata.reflection = AckSyncUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostUavProductInfos::kSeqnoFieldNumber;
const int PostUavProductInfos::kUpiFieldNumber;
#endif  // !_MSC_VER

PostUavProductInfos::PostUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostUavProductInfos::InitAsDefaultInstance() {
}

PostUavProductInfos::PostUavProductInfos(const PostUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostUavProductInfos::~PostUavProductInfos() {
  SharedDtor();
}

void PostUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostUavProductInfos_descriptor_;
}

const PostUavProductInfos& PostUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostUavProductInfos* PostUavProductInfos::default_instance_ = NULL;

PostUavProductInfos* PostUavProductInfos::New() const {
  return new PostUavProductInfos;
}

void PostUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  upi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upi;
        break;
      }

      // repeated .das.proto.UavProductInfo upi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated .das.proto.UavProductInfo upi = 2;
  for (int i = 0; i < this->upi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->upi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated .das.proto.UavProductInfo upi = 2;
  for (int i = 0; i < this->upi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->upi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated .das.proto.UavProductInfo upi = 2;
  total_size += 1 * this->upi_size();
  for (int i = 0; i < this->upi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostUavProductInfos::MergeFrom(const PostUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  upi_.MergeFrom(from.upi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUavProductInfos::CopyFrom(const PostUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PostUavProductInfos::Swap(PostUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    upi_.Swap(&other->upi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostUavProductInfos_descriptor_;
  metadata.reflection = PostUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostUavProductInfos::kSeqnoFieldNumber;
const int AckPostUavProductInfos::kResultFieldNumber;
#endif  // !_MSC_VER

AckPostUavProductInfos::AckPostUavProductInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostUavProductInfos::InitAsDefaultInstance() {
}

AckPostUavProductInfos::AckPostUavProductInfos(const AckPostUavProductInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostUavProductInfos::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostUavProductInfos::~AckPostUavProductInfos() {
  SharedDtor();
}

void AckPostUavProductInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPostUavProductInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostUavProductInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostUavProductInfos_descriptor_;
}

const AckPostUavProductInfos& AckPostUavProductInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostUavProductInfos* AckPostUavProductInfos::default_instance_ = NULL;

AckPostUavProductInfos* AckPostUavProductInfos::New() const {
  return new AckPostUavProductInfos;
}

void AckPostUavProductInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostUavProductInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostUavProductInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostUavProductInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostUavProductInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostUavProductInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostUavProductInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostUavProductInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostUavProductInfos::MergeFrom(const AckPostUavProductInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostUavProductInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostUavProductInfos::CopyFrom(const AckPostUavProductInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostUavProductInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostUavProductInfos::Swap(AckPostUavProductInfos* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostUavProductInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostUavProductInfos_descriptor_;
  metadata.reflection = AckPostUavProductInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostControl2Uav::kSeqnoFieldNumber;
const int PostControl2Uav::kUavidFieldNumber;
const int PostControl2Uav::kUseridFieldNumber;
const int PostControl2Uav::kDataFieldNumber;
#endif  // !_MSC_VER

PostControl2Uav::PostControl2Uav()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostControl2Uav::InitAsDefaultInstance() {
}

PostControl2Uav::PostControl2Uav(const PostControl2Uav& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostControl2Uav::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostControl2Uav::~PostControl2Uav() {
  SharedDtor();
}

void PostControl2Uav::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void PostControl2Uav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostControl2Uav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostControl2Uav_descriptor_;
}

const PostControl2Uav& PostControl2Uav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostControl2Uav* PostControl2Uav::default_instance_ = NULL;

PostControl2Uav* PostControl2Uav::New() const {
  return new PostControl2Uav;
}

void PostControl2Uav::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostControl2Uav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostControl2Uav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostControl2Uav::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostControl2Uav::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated bytes data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostControl2Uav::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostControl2Uav* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostControl2Uav*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostControl2Uav::MergeFrom(const PostControl2Uav& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostControl2Uav::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostControl2Uav::CopyFrom(const PostControl2Uav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostControl2Uav::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PostControl2Uav::Swap(PostControl2Uav* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    std::swap(userid_, other->userid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostControl2Uav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostControl2Uav_descriptor_;
  metadata.reflection = PostControl2Uav_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostControl2Uav::kSeqnoFieldNumber;
const int AckPostControl2Uav::kResultFieldNumber;
const int AckPostControl2Uav::kUavidFieldNumber;
const int AckPostControl2Uav::kUseridFieldNumber;
#endif  // !_MSC_VER

AckPostControl2Uav::AckPostControl2Uav()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostControl2Uav::InitAsDefaultInstance() {
}

AckPostControl2Uav::AckPostControl2Uav(const AckPostControl2Uav& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostControl2Uav::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostControl2Uav::~AckPostControl2Uav() {
  SharedDtor();
}

void AckPostControl2Uav::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AckPostControl2Uav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostControl2Uav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostControl2Uav_descriptor_;
}

const AckPostControl2Uav& AckPostControl2Uav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostControl2Uav* AckPostControl2Uav::default_instance_ = NULL;

AckPostControl2Uav* AckPostControl2Uav::New() const {
  return new AckPostControl2Uav;
}

void AckPostControl2Uav::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostControl2Uav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uavid;
        break;
      }

      // required string uavid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostControl2Uav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uavid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostControl2Uav::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string uavid = 3;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavid(), target);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostControl2Uav::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string uavid = 3;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

    // required string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostControl2Uav::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostControl2Uav* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostControl2Uav*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostControl2Uav::MergeFrom(const AckPostControl2Uav& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostControl2Uav::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostControl2Uav::CopyFrom(const AckPostControl2Uav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostControl2Uav::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AckPostControl2Uav::Swap(AckPostControl2Uav* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(uavid_, other->uavid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostControl2Uav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostControl2Uav_descriptor_;
  metadata.reflection = AckPostControl2Uav_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostStatus2GroundStation::kSeqnoFieldNumber;
const int PostStatus2GroundStation::kUavidFieldNumber;
const int PostStatus2GroundStation::kDataFieldNumber;
#endif  // !_MSC_VER

PostStatus2GroundStation::PostStatus2GroundStation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostStatus2GroundStation::InitAsDefaultInstance() {
}

PostStatus2GroundStation::PostStatus2GroundStation(const PostStatus2GroundStation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostStatus2GroundStation::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  uavid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostStatus2GroundStation::~PostStatus2GroundStation() {
  SharedDtor();
}

void PostStatus2GroundStation::SharedDtor() {
  if (uavid_ != &::google::protobuf::internal::kEmptyString) {
    delete uavid_;
  }
  if (this != default_instance_) {
  }
}

void PostStatus2GroundStation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostStatus2GroundStation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostStatus2GroundStation_descriptor_;
}

const PostStatus2GroundStation& PostStatus2GroundStation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostStatus2GroundStation* PostStatus2GroundStation::default_instance_ = NULL;

PostStatus2GroundStation* PostStatus2GroundStation::New() const {
  return new PostStatus2GroundStation;
}

void PostStatus2GroundStation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_uavid()) {
      if (uavid_ != &::google::protobuf::internal::kEmptyString) {
        uavid_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostStatus2GroundStation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uavid;
        break;
      }

      // required string uavid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uavid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uavid().data(), this->uavid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostStatus2GroundStation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uavid(), output);
  }

  // repeated bytes data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostStatus2GroundStation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string uavid = 2;
  if (has_uavid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uavid().data(), this->uavid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavid(), target);
  }

  // repeated bytes data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostStatus2GroundStation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string uavid = 2;
    if (has_uavid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uavid());
    }

  }
  // repeated bytes data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostStatus2GroundStation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostStatus2GroundStation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostStatus2GroundStation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostStatus2GroundStation::MergeFrom(const PostStatus2GroundStation& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_uavid()) {
      set_uavid(from.uavid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostStatus2GroundStation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostStatus2GroundStation::CopyFrom(const PostStatus2GroundStation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatus2GroundStation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PostStatus2GroundStation::Swap(PostStatus2GroundStation* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(uavid_, other->uavid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostStatus2GroundStation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostStatus2GroundStation_descriptor_;
  metadata.reflection = PostStatus2GroundStation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace das

// @@protoc_insertion_point(global_scope)
