// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: das.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "das.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace das {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PostHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncFZUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncFZUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSyncFZUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSyncFZUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFZUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFZUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateFZUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateFZUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestNewFZUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNewFZUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckNewFZUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckNewFZUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFZUserIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFZUserIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFZUserIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFZUserIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostChangeFZPswd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostChangeFZPswd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeFZPswd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeFZPswd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFZUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFZUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSWKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSWKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateSWKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateSWKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSWKeyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSWKeyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSWKeyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSWKeyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSWRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSWRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostFZResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostFZResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostFZResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostFZResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFZResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFZResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFZResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFZResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostFZInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostFZInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPostFZInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPostFZInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFZInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFZInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFZInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFZInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostGetFZPswd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostGetFZPswd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetFZPswd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetFZPswd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FZMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_das_2eproto() {
  protobuf_AddDesc_das_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "das.proto");
  GOOGLE_CHECK(file != NULL);
  PostHeartBeat_descriptor_ = file->message_type(0);
  static const int PostHeartBeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, id_),
  };
  PostHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostHeartBeat_descriptor_,
      PostHeartBeat::default_instance_,
      PostHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostHeartBeat));
  AckHeartBeat_descriptor_ = file->message_type(1);
  static const int AckHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, seqno_),
  };
  AckHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHeartBeat_descriptor_,
      AckHeartBeat::default_instance_,
      AckHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHeartBeat));
  SyncFZUserList_descriptor_ = file->message_type(2);
  static const int SyncFZUserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFZUserList, seqno_),
  };
  SyncFZUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncFZUserList_descriptor_,
      SyncFZUserList::default_instance_,
      SyncFZUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFZUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFZUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncFZUserList));
  AckSyncFZUserList_descriptor_ = file->message_type(3);
  static const int AckSyncFZUserList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncFZUserList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncFZUserList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncFZUserList, id_),
  };
  AckSyncFZUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSyncFZUserList_descriptor_,
      AckSyncFZUserList::default_instance_,
      AckSyncFZUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncFZUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSyncFZUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSyncFZUserList));
  UpdateFZUserList_descriptor_ = file->message_type(4);
  static const int UpdateFZUserList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFZUserList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFZUserList, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFZUserList, id_),
  };
  UpdateFZUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFZUserList_descriptor_,
      UpdateFZUserList::default_instance_,
      UpdateFZUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFZUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFZUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFZUserList));
  AckUpdateFZUserList_descriptor_ = file->message_type(5);
  static const int AckUpdateFZUserList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateFZUserList, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateFZUserList, result_),
  };
  AckUpdateFZUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateFZUserList_descriptor_,
      AckUpdateFZUserList::default_instance_,
      AckUpdateFZUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateFZUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateFZUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateFZUserList));
  RequestNewFZUser_descriptor_ = file->message_type(6);
  static const int RequestNewFZUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, password_),
  };
  RequestNewFZUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestNewFZUser_descriptor_,
      RequestNewFZUser::default_instance_,
      RequestNewFZUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewFZUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestNewFZUser));
  AckNewFZUser_descriptor_ = file->message_type(7);
  static const int AckNewFZUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewFZUser, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewFZUser, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewFZUser, check_),
  };
  AckNewFZUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckNewFZUser_descriptor_,
      AckNewFZUser::default_instance_,
      AckNewFZUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewFZUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewFZUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckNewFZUser));
  RequestFZUserIdentity_descriptor_ = file->message_type(8);
  static const int RequestFZUserIdentity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, pswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, pcsn_),
  };
  RequestFZUserIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFZUserIdentity_descriptor_,
      RequestFZUserIdentity::default_instance_,
      RequestFZUserIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZUserIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFZUserIdentity));
  AckFZUserIdentity_descriptor_ = file->message_type(9);
  static const int AckFZUserIdentity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, extradata_),
  };
  AckFZUserIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFZUserIdentity_descriptor_,
      AckFZUserIdentity::default_instance_,
      AckFZUserIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFZUserIdentity));
  PostChangeFZPswd_descriptor_ = file->message_type(10);
  static const int PostChangeFZPswd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostChangeFZPswd, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostChangeFZPswd, old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostChangeFZPswd, pswd_),
  };
  PostChangeFZPswd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostChangeFZPswd_descriptor_,
      PostChangeFZPswd::default_instance_,
      PostChangeFZPswd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostChangeFZPswd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostChangeFZPswd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostChangeFZPswd));
  AckChangeFZPswd_descriptor_ = file->message_type(11);
  static const int AckChangeFZPswd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeFZPswd, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeFZPswd, result_),
  };
  AckChangeFZPswd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeFZPswd_descriptor_,
      AckChangeFZPswd::default_instance_,
      AckChangeFZPswd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeFZPswd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeFZPswd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeFZPswd));
  FZUserMessage_descriptor_ = file->message_type(12);
  static const int FZUserMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, content_),
  };
  FZUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZUserMessage_descriptor_,
      FZUserMessage::default_instance_,
      FZUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZUserMessage));
  AckFZUserMessage_descriptor_ = file->message_type(13);
  static const int AckFZUserMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserMessage, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserMessage, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserMessage, user_),
  };
  AckFZUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFZUserMessage_descriptor_,
      AckFZUserMessage::default_instance_,
      AckFZUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFZUserMessage));
  RequestFriends_descriptor_ = file->message_type(14);
  static const int RequestFriends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriends, seqno_),
  };
  RequestFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFriends_descriptor_,
      RequestFriends::default_instance_,
      RequestFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFriends));
  AckFriends_descriptor_ = file->message_type(15);
  static const int AckFriends_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFriends, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFriends, friends_),
  };
  AckFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFriends_descriptor_,
      AckFriends::default_instance_,
      AckFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFriends));
  UpdateSWKey_descriptor_ = file->message_type(16);
  static const int UpdateSWKey_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, swkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, dscr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, change_),
  };
  UpdateSWKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSWKey_descriptor_,
      UpdateSWKey::default_instance_,
      UpdateSWKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSWKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSWKey));
  AckUpdateSWKey_descriptor_ = file->message_type(17);
  static const int AckUpdateSWKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateSWKey, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateSWKey, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateSWKey, swkey_),
  };
  AckUpdateSWKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateSWKey_descriptor_,
      AckUpdateSWKey::default_instance_,
      AckUpdateSWKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateSWKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateSWKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateSWKey));
  ReqSWKeyInfo_descriptor_ = file->message_type(18);
  static const int ReqSWKeyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSWKeyInfo, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSWKeyInfo, swkey_),
  };
  ReqSWKeyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSWKeyInfo_descriptor_,
      ReqSWKeyInfo::default_instance_,
      ReqSWKeyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSWKeyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSWKeyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSWKeyInfo));
  AckSWKeyInfo_descriptor_ = file->message_type(19);
  static const int AckSWKeyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, swkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, dscr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, pcsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, regtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, used_),
  };
  AckSWKeyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSWKeyInfo_descriptor_,
      AckSWKeyInfo::default_instance_,
      AckSWKeyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWKeyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSWKeyInfo));
  SWRegist_descriptor_ = file->message_type(20);
  static const int SWRegist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWRegist, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWRegist, pcsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWRegist, swkey_),
  };
  SWRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWRegist_descriptor_,
      SWRegist::default_instance_,
      SWRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWRegist));
  AckSWRegist_descriptor_ = file->message_type(21);
  static const int AckSWRegist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWRegist, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWRegist, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWRegist, ver_),
  };
  AckSWRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSWRegist_descriptor_,
      AckSWRegist::default_instance_,
      AckSWRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSWRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSWRegist));
  FZResult_descriptor_ = file->message_type(22);
  static const int FZResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, begtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, usedtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, rslt_),
  };
  FZResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZResult_descriptor_,
      FZResult::default_instance_,
      FZResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZResult));
  PostFZResult_descriptor_ = file->message_type(23);
  static const int PostFZResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZResult, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZResult, rslt_),
  };
  PostFZResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostFZResult_descriptor_,
      PostFZResult::default_instance_,
      PostFZResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostFZResult));
  AckPostFZResult_descriptor_ = file->message_type(24);
  static const int AckPostFZResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZResult, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZResult, id_),
  };
  AckPostFZResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostFZResult_descriptor_,
      AckPostFZResult::default_instance_,
      AckPostFZResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostFZResult));
  RequestFZResults_descriptor_ = file->message_type(25);
  static const int RequestFZResults_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZResults, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZResults, tmbeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZResults, tmend_),
  };
  RequestFZResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFZResults_descriptor_,
      RequestFZResults::default_instance_,
      RequestFZResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFZResults));
  AckFZResults_descriptor_ = file->message_type(26);
  static const int AckFZResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZResults, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZResults, rslt_),
  };
  AckFZResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFZResults_descriptor_,
      AckFZResults::default_instance_,
      AckFZResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFZResults));
  FZInfo_descriptor_ = file->message_type(27);
  static const int FZInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, majr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, school_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, births_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, email_),
  };
  FZInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZInfo_descriptor_,
      FZInfo::default_instance_,
      FZInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZInfo));
  PostFZInfo_descriptor_ = file->message_type(28);
  static const int PostFZInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZInfo, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZInfo, info_),
  };
  PostFZInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostFZInfo_descriptor_,
      PostFZInfo::default_instance_,
      PostFZInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostFZInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostFZInfo));
  AckPostFZInfo_descriptor_ = file->message_type(29);
  static const int AckPostFZInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZInfo, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZInfo, rslt_),
  };
  AckPostFZInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPostFZInfo_descriptor_,
      AckPostFZInfo::default_instance_,
      AckPostFZInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPostFZInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPostFZInfo));
  RequestFZInfo_descriptor_ = file->message_type(30);
  static const int RequestFZInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZInfo, seqno_),
  };
  RequestFZInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFZInfo_descriptor_,
      RequestFZInfo::default_instance_,
      RequestFZInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFZInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFZInfo));
  AckFZInfo_descriptor_ = file->message_type(31);
  static const int AckFZInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZInfo, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZInfo, info_),
  };
  AckFZInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFZInfo_descriptor_,
      AckFZInfo::default_instance_,
      AckFZInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFZInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFZInfo));
  PostGetFZPswd_descriptor_ = file->message_type(32);
  static const int PostGetFZPswd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostGetFZPswd, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostGetFZPswd, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostGetFZPswd, user_),
  };
  PostGetFZPswd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostGetFZPswd_descriptor_,
      PostGetFZPswd::default_instance_,
      PostGetFZPswd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostGetFZPswd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostGetFZPswd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostGetFZPswd));
  AckGetFZPswd_descriptor_ = file->message_type(33);
  static const int AckGetFZPswd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetFZPswd, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetFZPswd, rslt_),
  };
  AckGetFZPswd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetFZPswd_descriptor_,
      AckGetFZPswd::default_instance_,
      AckGetFZPswd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetFZPswd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetFZPswd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetFZPswd));
  FZMsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_das_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostHeartBeat_descriptor_, &PostHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHeartBeat_descriptor_, &AckHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncFZUserList_descriptor_, &SyncFZUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSyncFZUserList_descriptor_, &AckSyncFZUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFZUserList_descriptor_, &UpdateFZUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateFZUserList_descriptor_, &AckUpdateFZUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestNewFZUser_descriptor_, &RequestNewFZUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckNewFZUser_descriptor_, &AckNewFZUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFZUserIdentity_descriptor_, &RequestFZUserIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFZUserIdentity_descriptor_, &AckFZUserIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostChangeFZPswd_descriptor_, &PostChangeFZPswd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeFZPswd_descriptor_, &AckChangeFZPswd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZUserMessage_descriptor_, &FZUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFZUserMessage_descriptor_, &AckFZUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFriends_descriptor_, &RequestFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFriends_descriptor_, &AckFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSWKey_descriptor_, &UpdateSWKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateSWKey_descriptor_, &AckUpdateSWKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSWKeyInfo_descriptor_, &ReqSWKeyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSWKeyInfo_descriptor_, &AckSWKeyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWRegist_descriptor_, &SWRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSWRegist_descriptor_, &AckSWRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZResult_descriptor_, &FZResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostFZResult_descriptor_, &PostFZResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostFZResult_descriptor_, &AckPostFZResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFZResults_descriptor_, &RequestFZResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFZResults_descriptor_, &AckFZResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZInfo_descriptor_, &FZInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostFZInfo_descriptor_, &PostFZInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPostFZInfo_descriptor_, &AckPostFZInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFZInfo_descriptor_, &RequestFZInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFZInfo_descriptor_, &AckFZInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostGetFZPswd_descriptor_, &PostGetFZPswd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetFZPswd_descriptor_, &AckGetFZPswd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_das_2eproto() {
  delete PostHeartBeat::default_instance_;
  delete PostHeartBeat_reflection_;
  delete AckHeartBeat::default_instance_;
  delete AckHeartBeat_reflection_;
  delete SyncFZUserList::default_instance_;
  delete SyncFZUserList_reflection_;
  delete AckSyncFZUserList::default_instance_;
  delete AckSyncFZUserList_reflection_;
  delete UpdateFZUserList::default_instance_;
  delete UpdateFZUserList_reflection_;
  delete AckUpdateFZUserList::default_instance_;
  delete AckUpdateFZUserList_reflection_;
  delete RequestNewFZUser::default_instance_;
  delete RequestNewFZUser_reflection_;
  delete AckNewFZUser::default_instance_;
  delete AckNewFZUser_reflection_;
  delete RequestFZUserIdentity::default_instance_;
  delete RequestFZUserIdentity_reflection_;
  delete AckFZUserIdentity::default_instance_;
  delete AckFZUserIdentity_reflection_;
  delete PostChangeFZPswd::default_instance_;
  delete PostChangeFZPswd_reflection_;
  delete AckChangeFZPswd::default_instance_;
  delete AckChangeFZPswd_reflection_;
  delete FZUserMessage::default_instance_;
  delete FZUserMessage_reflection_;
  delete AckFZUserMessage::default_instance_;
  delete AckFZUserMessage_reflection_;
  delete RequestFriends::default_instance_;
  delete RequestFriends_reflection_;
  delete AckFriends::default_instance_;
  delete AckFriends_reflection_;
  delete UpdateSWKey::default_instance_;
  delete UpdateSWKey_reflection_;
  delete AckUpdateSWKey::default_instance_;
  delete AckUpdateSWKey_reflection_;
  delete ReqSWKeyInfo::default_instance_;
  delete ReqSWKeyInfo_reflection_;
  delete AckSWKeyInfo::default_instance_;
  delete AckSWKeyInfo_reflection_;
  delete SWRegist::default_instance_;
  delete SWRegist_reflection_;
  delete AckSWRegist::default_instance_;
  delete AckSWRegist_reflection_;
  delete FZResult::default_instance_;
  delete FZResult_reflection_;
  delete PostFZResult::default_instance_;
  delete PostFZResult_reflection_;
  delete AckPostFZResult::default_instance_;
  delete AckPostFZResult_reflection_;
  delete RequestFZResults::default_instance_;
  delete RequestFZResults_reflection_;
  delete AckFZResults::default_instance_;
  delete AckFZResults_reflection_;
  delete FZInfo::default_instance_;
  delete FZInfo_reflection_;
  delete PostFZInfo::default_instance_;
  delete PostFZInfo_reflection_;
  delete AckPostFZInfo::default_instance_;
  delete AckPostFZInfo_reflection_;
  delete RequestFZInfo::default_instance_;
  delete RequestFZInfo_reflection_;
  delete AckFZInfo::default_instance_;
  delete AckFZInfo_reflection_;
  delete PostGetFZPswd::default_instance_;
  delete PostGetFZPswd_reflection_;
  delete AckGetFZPswd::default_instance_;
  delete AckGetFZPswd_reflection_;
}

void protobuf_AddDesc_das_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdas.proto\022\tdas.proto\"*\n\rPostHeartBeat\022"
    "\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \001(\t\"\035\n\014AckHeartBe"
    "at\022\r\n\005seqno\030\001 \002(\r\"\037\n\016SyncFZUserList\022\r\n\005s"
    "eqno\030\001 \002(\r\">\n\021AckSyncFZUserList\022\r\n\005seqno"
    "\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\022\n\n\002id\030\003 \003(\t\"@\n\020Up"
    "dateFZUserList\022\r\n\005seqno\030\001 \002(\r\022\021\n\toperati"
    "on\030\002 \002(\r\022\n\n\002id\030\003 \003(\t\"4\n\023AckUpdateFZUserL"
    "ist\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"_\n\020Re"
    "questNewFZUser\022\r\n\005seqno\030\001 \002(\r\022\014\n\004user\030\002 "
    "\002(\t\022\r\n\005phone\030\003 \001(\t\022\r\n\005check\030\004 \001(\t\022\020\n\010pas"
    "sword\030\005 \001(\t\"<\n\014AckNewFZUser\022\r\n\005seqno\030\001 \002"
    "(\r\022\016\n\006result\030\002 \002(\005\022\r\n\005check\030\003 \001(\t\"P\n\025Req"
    "uestFZUserIdentity\022\r\n\005seqno\030\001 \002(\r\022\014\n\004use"
    "r\030\002 \002(\t\022\014\n\004pswd\030\003 \002(\t\022\014\n\004pcsn\030\004 \002(\t\"R\n\021A"
    "ckFZUserIdentity\022\r\n\005seqno\030\001 \002(\r\022\016\n\006resul"
    "t\030\002 \002(\005\022\013\n\003ver\030\003 \002(\003\022\021\n\textradata\030\004 \001(\t\""
    "<\n\020PostChangeFZPswd\022\r\n\005seqno\030\001 \002(\r\022\013\n\003ol"
    "d\030\002 \002(\t\022\014\n\004pswd\030\003 \002(\t\"0\n\017AckChangeFZPswd"
    "\022\r\n\005seqno\030\001 \002(\r\022\016\n\006result\030\002 \002(\005\"m\n\rFZUse"
    "rMessage\022\r\n\005seqno\030\001 \002(\r\022\"\n\004type\030\002 \002(\0162\024."
    "das.proto.FZMsgType\022\014\n\004from\030\003 \002(\t\022\n\n\002to\030"
    "\004 \002(\t\022\017\n\007content\030\005 \001(\014\"<\n\020AckFZUserMessa"
    "ge\022\r\n\005seqno\030\001 \002(\r\022\013\n\003res\030\002 \002(\r\022\014\n\004user\030\003"
    " \002(\t\"\037\n\016RequestFriends\022\r\n\005seqno\030\001 \002(\r\",\n"
    "\nAckFriends\022\r\n\005seqno\030\001 \002(\r\022\017\n\007friends\030\002 "
    "\003(\t\"V\n\013UpdateSWKey\022\r\n\005seqno\030\001 \002(\r\022\r\n\005swk"
    "ey\030\002 \002(\t\022\014\n\004dscr\030\003 \001(\t\022\013\n\003ver\030\004 \001(\003\022\016\n\006c"
    "hange\030\005 \001(\005\">\n\016AckUpdateSWKey\022\r\n\005seqno\030\001"
    " \002(\r\022\016\n\006result\030\002 \002(\005\022\r\n\005swkey\030\003 \002(\t\",\n\014R"
    "eqSWKeyInfo\022\r\n\005seqno\030\001 \002(\r\022\r\n\005swkey\030\002 \002("
    "\t\"r\n\014AckSWKeyInfo\022\r\n\005seqno\030\001 \002(\r\022\r\n\005swke"
    "y\030\002 \002(\t\022\013\n\003ver\030\003 \002(\003\022\014\n\004dscr\030\004 \001(\t\022\014\n\004pc"
    "sn\030\005 \001(\t\022\r\n\005regTm\030\006 \001(\003\022\014\n\004used\030\007 \001(\005\"6\n"
    "\010SWRegist\022\r\n\005seqno\030\001 \002(\r\022\014\n\004pcsn\030\002 \002(\t\022\r"
    "\n\005swkey\030\003 \002(\t\"9\n\013AckSWRegist\022\r\n\005seqno\030\001 "
    "\002(\r\022\016\n\006result\030\002 \002(\005\022\013\n\003ver\030\003 \002(\003\"Q\n\010FZRe"
    "sult\022\n\n\002id\030\001 \001(\003\022\r\n\005begTm\030\002 \001(\003\022\016\n\006usedT"
    "m\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\022\014\n\004rslt\030\005 \002(\005\"@\n\014P"
    "ostFZResult\022\r\n\005seqno\030\001 \002(\r\022!\n\004rslt\030\002 \002(\013"
    "2\023.das.proto.FZResult\",\n\017AckPostFZResult"
    "\022\r\n\005seqno\030\001 \002(\r\022\n\n\002id\030\002 \002(\003\"\?\n\020RequestFZ"
    "Results\022\r\n\005seqno\030\001 \002(\r\022\r\n\005tmbeg\030\002 \001(\003\022\r\n"
    "\005tmend\030\003 \001(\003\"@\n\014AckFZResults\022\r\n\005seqno\030\001 "
    "\002(\r\022!\n\004rslt\030\002 \003(\0132\023.das.proto.FZResult\"n"
    "\n\006FZInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005grade\030\002 \001(\t\022\014\n"
    "\004majr\030\003 \001(\t\022\n\n\002id\030\004 \001(\t\022\016\n\006school\030\005 \001(\t\022"
    "\016\n\006births\030\006 \001(\t\022\r\n\005email\030\007 \002(\t\"<\n\nPostFZ"
    "Info\022\r\n\005seqno\030\001 \002(\r\022\037\n\004info\030\002 \002(\0132\021.das."
    "proto.FZInfo\",\n\rAckPostFZInfo\022\r\n\005seqno\030\001"
    " \002(\r\022\014\n\004rslt\030\002 \002(\005\"\036\n\rRequestFZInfo\022\r\n\005s"
    "eqno\030\001 \002(\r\";\n\tAckFZInfo\022\r\n\005seqno\030\001 \002(\r\022\037"
    "\n\004info\030\002 \001(\0132\021.das.proto.FZInfo\";\n\rPostG"
    "etFZPswd\022\r\n\005seqno\030\001 \002(\r\022\r\n\005email\030\002 \002(\t\022\014"
    "\n\004user\030\003 \002(\t\"+\n\014AckGetFZPswd\022\r\n\005seqno\030\001 "
    "\002(\r\022\014\n\004rslt\030\002 \002(\005*g\n\tFZMsgType\022\020\n\014Delete"
    "Friend\020\001\022\021\n\rRequestFriend\020\002\022\017\n\013AgreeFrie"
    "nd\020\003\022\020\n\014RejectFriend\020\004\022\010\n\004Text\020\005\022\010\n\004Land"
    "\020\006", 2282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "das.proto", &protobuf_RegisterTypes);
  PostHeartBeat::default_instance_ = new PostHeartBeat();
  AckHeartBeat::default_instance_ = new AckHeartBeat();
  SyncFZUserList::default_instance_ = new SyncFZUserList();
  AckSyncFZUserList::default_instance_ = new AckSyncFZUserList();
  UpdateFZUserList::default_instance_ = new UpdateFZUserList();
  AckUpdateFZUserList::default_instance_ = new AckUpdateFZUserList();
  RequestNewFZUser::default_instance_ = new RequestNewFZUser();
  AckNewFZUser::default_instance_ = new AckNewFZUser();
  RequestFZUserIdentity::default_instance_ = new RequestFZUserIdentity();
  AckFZUserIdentity::default_instance_ = new AckFZUserIdentity();
  PostChangeFZPswd::default_instance_ = new PostChangeFZPswd();
  AckChangeFZPswd::default_instance_ = new AckChangeFZPswd();
  FZUserMessage::default_instance_ = new FZUserMessage();
  AckFZUserMessage::default_instance_ = new AckFZUserMessage();
  RequestFriends::default_instance_ = new RequestFriends();
  AckFriends::default_instance_ = new AckFriends();
  UpdateSWKey::default_instance_ = new UpdateSWKey();
  AckUpdateSWKey::default_instance_ = new AckUpdateSWKey();
  ReqSWKeyInfo::default_instance_ = new ReqSWKeyInfo();
  AckSWKeyInfo::default_instance_ = new AckSWKeyInfo();
  SWRegist::default_instance_ = new SWRegist();
  AckSWRegist::default_instance_ = new AckSWRegist();
  FZResult::default_instance_ = new FZResult();
  PostFZResult::default_instance_ = new PostFZResult();
  AckPostFZResult::default_instance_ = new AckPostFZResult();
  RequestFZResults::default_instance_ = new RequestFZResults();
  AckFZResults::default_instance_ = new AckFZResults();
  FZInfo::default_instance_ = new FZInfo();
  PostFZInfo::default_instance_ = new PostFZInfo();
  AckPostFZInfo::default_instance_ = new AckPostFZInfo();
  RequestFZInfo::default_instance_ = new RequestFZInfo();
  AckFZInfo::default_instance_ = new AckFZInfo();
  PostGetFZPswd::default_instance_ = new PostGetFZPswd();
  AckGetFZPswd::default_instance_ = new AckGetFZPswd();
  PostHeartBeat::default_instance_->InitAsDefaultInstance();
  AckHeartBeat::default_instance_->InitAsDefaultInstance();
  SyncFZUserList::default_instance_->InitAsDefaultInstance();
  AckSyncFZUserList::default_instance_->InitAsDefaultInstance();
  UpdateFZUserList::default_instance_->InitAsDefaultInstance();
  AckUpdateFZUserList::default_instance_->InitAsDefaultInstance();
  RequestNewFZUser::default_instance_->InitAsDefaultInstance();
  AckNewFZUser::default_instance_->InitAsDefaultInstance();
  RequestFZUserIdentity::default_instance_->InitAsDefaultInstance();
  AckFZUserIdentity::default_instance_->InitAsDefaultInstance();
  PostChangeFZPswd::default_instance_->InitAsDefaultInstance();
  AckChangeFZPswd::default_instance_->InitAsDefaultInstance();
  FZUserMessage::default_instance_->InitAsDefaultInstance();
  AckFZUserMessage::default_instance_->InitAsDefaultInstance();
  RequestFriends::default_instance_->InitAsDefaultInstance();
  AckFriends::default_instance_->InitAsDefaultInstance();
  UpdateSWKey::default_instance_->InitAsDefaultInstance();
  AckUpdateSWKey::default_instance_->InitAsDefaultInstance();
  ReqSWKeyInfo::default_instance_->InitAsDefaultInstance();
  AckSWKeyInfo::default_instance_->InitAsDefaultInstance();
  SWRegist::default_instance_->InitAsDefaultInstance();
  AckSWRegist::default_instance_->InitAsDefaultInstance();
  FZResult::default_instance_->InitAsDefaultInstance();
  PostFZResult::default_instance_->InitAsDefaultInstance();
  AckPostFZResult::default_instance_->InitAsDefaultInstance();
  RequestFZResults::default_instance_->InitAsDefaultInstance();
  AckFZResults::default_instance_->InitAsDefaultInstance();
  FZInfo::default_instance_->InitAsDefaultInstance();
  PostFZInfo::default_instance_->InitAsDefaultInstance();
  AckPostFZInfo::default_instance_->InitAsDefaultInstance();
  RequestFZInfo::default_instance_->InitAsDefaultInstance();
  AckFZInfo::default_instance_->InitAsDefaultInstance();
  PostGetFZPswd::default_instance_->InitAsDefaultInstance();
  AckGetFZPswd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_das_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_das_2eproto {
  StaticDescriptorInitializer_das_2eproto() {
    protobuf_AddDesc_das_2eproto();
  }
} static_descriptor_initializer_das_2eproto_;
const ::google::protobuf::EnumDescriptor* FZMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZMsgType_descriptor_;
}
bool FZMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PostHeartBeat::kSeqnoFieldNumber;
const int PostHeartBeat::kIdFieldNumber;
#endif  // !_MSC_VER

PostHeartBeat::PostHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostHeartBeat::InitAsDefaultInstance() {
}

PostHeartBeat::PostHeartBeat(const PostHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostHeartBeat::~PostHeartBeat() {
  SharedDtor();
}

void PostHeartBeat::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void PostHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostHeartBeat_descriptor_;
}

const PostHeartBeat& PostHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostHeartBeat* PostHeartBeat::default_instance_ = NULL;

PostHeartBeat* PostHeartBeat::New() const {
  return new PostHeartBeat;
}

void PostHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostHeartBeat::MergeFrom(const PostHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostHeartBeat::CopyFrom(const PostHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PostHeartBeat::Swap(PostHeartBeat* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostHeartBeat_descriptor_;
  metadata.reflection = PostHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHeartBeat::kSeqnoFieldNumber;
#endif  // !_MSC_VER

AckHeartBeat::AckHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHeartBeat::InitAsDefaultInstance() {
}

AckHeartBeat::AckHeartBeat(const AckHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHeartBeat::~AckHeartBeat() {
  SharedDtor();
}

void AckHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHeartBeat_descriptor_;
}

const AckHeartBeat& AckHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckHeartBeat* AckHeartBeat::default_instance_ = NULL;

AckHeartBeat* AckHeartBeat::New() const {
  return new AckHeartBeat;
}

void AckHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHeartBeat::MergeFrom(const AckHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHeartBeat::CopyFrom(const AckHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckHeartBeat::Swap(AckHeartBeat* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHeartBeat_descriptor_;
  metadata.reflection = AckHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncFZUserList::kSeqnoFieldNumber;
#endif  // !_MSC_VER

SyncFZUserList::SyncFZUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncFZUserList::InitAsDefaultInstance() {
}

SyncFZUserList::SyncFZUserList(const SyncFZUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncFZUserList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncFZUserList::~SyncFZUserList() {
  SharedDtor();
}

void SyncFZUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncFZUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFZUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncFZUserList_descriptor_;
}

const SyncFZUserList& SyncFZUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SyncFZUserList* SyncFZUserList::default_instance_ = NULL;

SyncFZUserList* SyncFZUserList::New() const {
  return new SyncFZUserList;
}

void SyncFZUserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncFZUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncFZUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncFZUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncFZUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFZUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncFZUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncFZUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncFZUserList::MergeFrom(const SyncFZUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncFZUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFZUserList::CopyFrom(const SyncFZUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFZUserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncFZUserList::Swap(SyncFZUserList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncFZUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncFZUserList_descriptor_;
  metadata.reflection = SyncFZUserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSyncFZUserList::kSeqnoFieldNumber;
const int AckSyncFZUserList::kResultFieldNumber;
const int AckSyncFZUserList::kIdFieldNumber;
#endif  // !_MSC_VER

AckSyncFZUserList::AckSyncFZUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSyncFZUserList::InitAsDefaultInstance() {
}

AckSyncFZUserList::AckSyncFZUserList(const AckSyncFZUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSyncFZUserList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSyncFZUserList::~AckSyncFZUserList() {
  SharedDtor();
}

void AckSyncFZUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSyncFZUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSyncFZUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSyncFZUserList_descriptor_;
}

const AckSyncFZUserList& AckSyncFZUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSyncFZUserList* AckSyncFZUserList::default_instance_ = NULL;

AckSyncFZUserList* AckSyncFZUserList::New() const {
  return new AckSyncFZUserList;
}

void AckSyncFZUserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSyncFZUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // repeated string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSyncFZUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSyncFZUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSyncFZUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated string id = 3;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSyncFZUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSyncFZUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSyncFZUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSyncFZUserList::MergeFrom(const AckSyncFZUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSyncFZUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSyncFZUserList::CopyFrom(const AckSyncFZUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSyncFZUserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckSyncFZUserList::Swap(AckSyncFZUserList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSyncFZUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSyncFZUserList_descriptor_;
  metadata.reflection = AckSyncFZUserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFZUserList::kSeqnoFieldNumber;
const int UpdateFZUserList::kOperationFieldNumber;
const int UpdateFZUserList::kIdFieldNumber;
#endif  // !_MSC_VER

UpdateFZUserList::UpdateFZUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFZUserList::InitAsDefaultInstance() {
}

UpdateFZUserList::UpdateFZUserList(const UpdateFZUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFZUserList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFZUserList::~UpdateFZUserList() {
  SharedDtor();
}

void UpdateFZUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFZUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFZUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFZUserList_descriptor_;
}

const UpdateFZUserList& UpdateFZUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UpdateFZUserList* UpdateFZUserList::default_instance_ = NULL;

UpdateFZUserList* UpdateFZUserList::New() const {
  return new UpdateFZUserList;
}

void UpdateFZUserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    operation_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFZUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required uint32 operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // repeated string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFZUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFZUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operation(), target);
  }

  // repeated string id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFZUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required uint32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  // repeated string id = 3;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFZUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFZUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFZUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFZUserList::MergeFrom(const UpdateFZUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFZUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFZUserList::CopyFrom(const UpdateFZUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFZUserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateFZUserList::Swap(UpdateFZUserList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(operation_, other->operation_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFZUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFZUserList_descriptor_;
  metadata.reflection = UpdateFZUserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateFZUserList::kSeqnoFieldNumber;
const int AckUpdateFZUserList::kResultFieldNumber;
#endif  // !_MSC_VER

AckUpdateFZUserList::AckUpdateFZUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateFZUserList::InitAsDefaultInstance() {
}

AckUpdateFZUserList::AckUpdateFZUserList(const AckUpdateFZUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateFZUserList::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateFZUserList::~AckUpdateFZUserList() {
  SharedDtor();
}

void AckUpdateFZUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateFZUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateFZUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateFZUserList_descriptor_;
}

const AckUpdateFZUserList& AckUpdateFZUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckUpdateFZUserList* AckUpdateFZUserList::default_instance_ = NULL;

AckUpdateFZUserList* AckUpdateFZUserList::New() const {
  return new AckUpdateFZUserList;
}

void AckUpdateFZUserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateFZUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateFZUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateFZUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateFZUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateFZUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateFZUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateFZUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateFZUserList::MergeFrom(const AckUpdateFZUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateFZUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateFZUserList::CopyFrom(const AckUpdateFZUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateFZUserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckUpdateFZUserList::Swap(AckUpdateFZUserList* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateFZUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateFZUserList_descriptor_;
  metadata.reflection = AckUpdateFZUserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNewFZUser::kSeqnoFieldNumber;
const int RequestNewFZUser::kUserFieldNumber;
const int RequestNewFZUser::kPhoneFieldNumber;
const int RequestNewFZUser::kCheckFieldNumber;
const int RequestNewFZUser::kPasswordFieldNumber;
#endif  // !_MSC_VER

RequestNewFZUser::RequestNewFZUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestNewFZUser::InitAsDefaultInstance() {
}

RequestNewFZUser::RequestNewFZUser(const RequestNewFZUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestNewFZUser::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  check_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNewFZUser::~RequestNewFZUser() {
  SharedDtor();
}

void RequestNewFZUser::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (check_ != &::google::protobuf::internal::kEmptyString) {
    delete check_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void RequestNewFZUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNewFZUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNewFZUser_descriptor_;
}

const RequestNewFZUser& RequestNewFZUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestNewFZUser* RequestNewFZUser::default_instance_ = NULL;

RequestNewFZUser* RequestNewFZUser::New() const {
  return new RequestNewFZUser;
}

void RequestNewFZUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_check()) {
      if (check_ != &::google::protobuf::internal::kEmptyString) {
        check_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestNewFZUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_check;
        break;
      }

      // optional string check = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->check().data(), this->check().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // optional string password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestNewFZUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional string check = 4;
  if (has_check()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->check().data(), this->check().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->check(), output);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestNewFZUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string check = 4;
  if (has_check()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->check().data(), this->check().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->check(), target);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestNewFZUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string check = 4;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check());
    }

    // optional string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNewFZUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestNewFZUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestNewFZUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestNewFZUser::MergeFrom(const RequestNewFZUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestNewFZUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNewFZUser::CopyFrom(const RequestNewFZUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNewFZUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestNewFZUser::Swap(RequestNewFZUser* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(user_, other->user_);
    std::swap(phone_, other->phone_);
    std::swap(check_, other->check_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestNewFZUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNewFZUser_descriptor_;
  metadata.reflection = RequestNewFZUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckNewFZUser::kSeqnoFieldNumber;
const int AckNewFZUser::kResultFieldNumber;
const int AckNewFZUser::kCheckFieldNumber;
#endif  // !_MSC_VER

AckNewFZUser::AckNewFZUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckNewFZUser::InitAsDefaultInstance() {
}

AckNewFZUser::AckNewFZUser(const AckNewFZUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckNewFZUser::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  check_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckNewFZUser::~AckNewFZUser() {
  SharedDtor();
}

void AckNewFZUser::SharedDtor() {
  if (check_ != &::google::protobuf::internal::kEmptyString) {
    delete check_;
  }
  if (this != default_instance_) {
  }
}

void AckNewFZUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckNewFZUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckNewFZUser_descriptor_;
}

const AckNewFZUser& AckNewFZUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckNewFZUser* AckNewFZUser::default_instance_ = NULL;

AckNewFZUser* AckNewFZUser::New() const {
  return new AckNewFZUser;
}

void AckNewFZUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_check()) {
      if (check_ != &::google::protobuf::internal::kEmptyString) {
        check_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckNewFZUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_check;
        break;
      }

      // optional string check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->check().data(), this->check().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckNewFZUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string check = 3;
  if (has_check()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->check().data(), this->check().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckNewFZUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string check = 3;
  if (has_check()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->check().data(), this->check().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckNewFZUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string check = 3;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckNewFZUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckNewFZUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckNewFZUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckNewFZUser::MergeFrom(const AckNewFZUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckNewFZUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckNewFZUser::CopyFrom(const AckNewFZUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckNewFZUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckNewFZUser::Swap(AckNewFZUser* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckNewFZUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckNewFZUser_descriptor_;
  metadata.reflection = AckNewFZUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFZUserIdentity::kSeqnoFieldNumber;
const int RequestFZUserIdentity::kUserFieldNumber;
const int RequestFZUserIdentity::kPswdFieldNumber;
const int RequestFZUserIdentity::kPcsnFieldNumber;
#endif  // !_MSC_VER

RequestFZUserIdentity::RequestFZUserIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFZUserIdentity::InitAsDefaultInstance() {
}

RequestFZUserIdentity::RequestFZUserIdentity(const RequestFZUserIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFZUserIdentity::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pcsn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFZUserIdentity::~RequestFZUserIdentity() {
  SharedDtor();
}

void RequestFZUserIdentity::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
    delete pcsn_;
  }
  if (this != default_instance_) {
  }
}

void RequestFZUserIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFZUserIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFZUserIdentity_descriptor_;
}

const RequestFZUserIdentity& RequestFZUserIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestFZUserIdentity* RequestFZUserIdentity::default_instance_ = NULL;

RequestFZUserIdentity* RequestFZUserIdentity::New() const {
  return new RequestFZUserIdentity;
}

void RequestFZUserIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
    if (has_pcsn()) {
      if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
        pcsn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFZUserIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pswd;
        break;
      }

      // required string pswd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pcsn;
        break;
      }

      // required string pcsn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pcsn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcsn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcsn().data(), this->pcsn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFZUserIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  // required string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pswd(), output);
  }

  // required string pcsn = 4;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pcsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFZUserIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // required string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pswd(), target);
  }

  // required string pcsn = 4;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pcsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFZUserIdentity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string pswd = 3;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

    // required string pcsn = 4;
    if (has_pcsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFZUserIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFZUserIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFZUserIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFZUserIdentity::MergeFrom(const RequestFZUserIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
    if (from.has_pcsn()) {
      set_pcsn(from.pcsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFZUserIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFZUserIdentity::CopyFrom(const RequestFZUserIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFZUserIdentity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestFZUserIdentity::Swap(RequestFZUserIdentity* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(user_, other->user_);
    std::swap(pswd_, other->pswd_);
    std::swap(pcsn_, other->pcsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFZUserIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFZUserIdentity_descriptor_;
  metadata.reflection = RequestFZUserIdentity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFZUserIdentity::kSeqnoFieldNumber;
const int AckFZUserIdentity::kResultFieldNumber;
const int AckFZUserIdentity::kVerFieldNumber;
const int AckFZUserIdentity::kExtradataFieldNumber;
#endif  // !_MSC_VER

AckFZUserIdentity::AckFZUserIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFZUserIdentity::InitAsDefaultInstance() {
}

AckFZUserIdentity::AckFZUserIdentity(const AckFZUserIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFZUserIdentity::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ver_ = GOOGLE_LONGLONG(0);
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFZUserIdentity::~AckFZUserIdentity() {
  SharedDtor();
}

void AckFZUserIdentity::SharedDtor() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void AckFZUserIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFZUserIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFZUserIdentity_descriptor_;
}

const AckFZUserIdentity& AckFZUserIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckFZUserIdentity* AckFZUserIdentity::default_instance_ = NULL;

AckFZUserIdentity* AckFZUserIdentity::New() const {
  return new AckFZUserIdentity;
}

void AckFZUserIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    ver_ = GOOGLE_LONGLONG(0);
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFZUserIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // required int64 ver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extradata;
        break;
      }

      // optional string extradata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFZUserIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ver(), output);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFZUserIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ver(), target);
  }

  // optional string extradata = 4;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFZUserIdentity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int64 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ver());
    }

    // optional string extradata = 4;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFZUserIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFZUserIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFZUserIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFZUserIdentity::MergeFrom(const AckFZUserIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFZUserIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFZUserIdentity::CopyFrom(const AckFZUserIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFZUserIdentity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckFZUserIdentity::Swap(AckFZUserIdentity* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(ver_, other->ver_);
    std::swap(extradata_, other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFZUserIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFZUserIdentity_descriptor_;
  metadata.reflection = AckFZUserIdentity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostChangeFZPswd::kSeqnoFieldNumber;
const int PostChangeFZPswd::kOldFieldNumber;
const int PostChangeFZPswd::kPswdFieldNumber;
#endif  // !_MSC_VER

PostChangeFZPswd::PostChangeFZPswd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostChangeFZPswd::InitAsDefaultInstance() {
}

PostChangeFZPswd::PostChangeFZPswd(const PostChangeFZPswd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostChangeFZPswd::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  old_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostChangeFZPswd::~PostChangeFZPswd() {
  SharedDtor();
}

void PostChangeFZPswd::SharedDtor() {
  if (old_ != &::google::protobuf::internal::kEmptyString) {
    delete old_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void PostChangeFZPswd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostChangeFZPswd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostChangeFZPswd_descriptor_;
}

const PostChangeFZPswd& PostChangeFZPswd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostChangeFZPswd* PostChangeFZPswd::default_instance_ = NULL;

PostChangeFZPswd* PostChangeFZPswd::New() const {
  return new PostChangeFZPswd;
}

void PostChangeFZPswd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_old()) {
      if (old_ != &::google::protobuf::internal::kEmptyString) {
        old_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostChangeFZPswd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old;
        break;
      }

      // required string old = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old().data(), this->old().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pswd;
        break;
      }

      // required string pswd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostChangeFZPswd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string old = 2;
  if (has_old()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old().data(), this->old().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->old(), output);
  }

  // required string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostChangeFZPswd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string old = 2;
  if (has_old()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old().data(), this->old().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old(), target);
  }

  // required string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostChangeFZPswd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string old = 2;
    if (has_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old());
    }

    // required string pswd = 3;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostChangeFZPswd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostChangeFZPswd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostChangeFZPswd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostChangeFZPswd::MergeFrom(const PostChangeFZPswd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_old()) {
      set_old(from.old());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostChangeFZPswd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostChangeFZPswd::CopyFrom(const PostChangeFZPswd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostChangeFZPswd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PostChangeFZPswd::Swap(PostChangeFZPswd* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(old_, other->old_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostChangeFZPswd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostChangeFZPswd_descriptor_;
  metadata.reflection = PostChangeFZPswd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeFZPswd::kSeqnoFieldNumber;
const int AckChangeFZPswd::kResultFieldNumber;
#endif  // !_MSC_VER

AckChangeFZPswd::AckChangeFZPswd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChangeFZPswd::InitAsDefaultInstance() {
}

AckChangeFZPswd::AckChangeFZPswd(const AckChangeFZPswd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChangeFZPswd::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeFZPswd::~AckChangeFZPswd() {
  SharedDtor();
}

void AckChangeFZPswd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeFZPswd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeFZPswd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeFZPswd_descriptor_;
}

const AckChangeFZPswd& AckChangeFZPswd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckChangeFZPswd* AckChangeFZPswd::default_instance_ = NULL;

AckChangeFZPswd* AckChangeFZPswd::New() const {
  return new AckChangeFZPswd;
}

void AckChangeFZPswd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeFZPswd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChangeFZPswd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChangeFZPswd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChangeFZPswd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeFZPswd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeFZPswd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeFZPswd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeFZPswd::MergeFrom(const AckChangeFZPswd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeFZPswd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeFZPswd::CopyFrom(const AckChangeFZPswd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeFZPswd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckChangeFZPswd::Swap(AckChangeFZPswd* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeFZPswd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeFZPswd_descriptor_;
  metadata.reflection = AckChangeFZPswd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZUserMessage::kSeqnoFieldNumber;
const int FZUserMessage::kTypeFieldNumber;
const int FZUserMessage::kFromFieldNumber;
const int FZUserMessage::kToFieldNumber;
const int FZUserMessage::kContentFieldNumber;
#endif  // !_MSC_VER

FZUserMessage::FZUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZUserMessage::InitAsDefaultInstance() {
}

FZUserMessage::FZUserMessage(const FZUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZUserMessage::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  type_ = 1;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZUserMessage::~FZUserMessage() {
  SharedDtor();
}

void FZUserMessage::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void FZUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZUserMessage_descriptor_;
}

const FZUserMessage& FZUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

FZUserMessage* FZUserMessage::default_instance_ = NULL;

FZUserMessage* FZUserMessage::New() const {
  return new FZUserMessage;
}

void FZUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    type_ = 1;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .das.proto.FZMsgType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::das::proto::FZMsgType_IsValid(value)) {
            set_type(static_cast< ::das::proto::FZMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // required string from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // required string to = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.FZMsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from(), output);
  }

  // required string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to(), output);
  }

  // optional bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.FZMsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // required string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZUserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.FZMsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 4;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZUserMessage::MergeFrom(const FZUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZUserMessage::CopyFrom(const FZUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZUserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FZUserMessage::Swap(FZUserMessage* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZUserMessage_descriptor_;
  metadata.reflection = FZUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFZUserMessage::kSeqnoFieldNumber;
const int AckFZUserMessage::kResFieldNumber;
const int AckFZUserMessage::kUserFieldNumber;
#endif  // !_MSC_VER

AckFZUserMessage::AckFZUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFZUserMessage::InitAsDefaultInstance() {
}

AckFZUserMessage::AckFZUserMessage(const AckFZUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFZUserMessage::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  res_ = 0u;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFZUserMessage::~AckFZUserMessage() {
  SharedDtor();
}

void AckFZUserMessage::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void AckFZUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFZUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFZUserMessage_descriptor_;
}

const AckFZUserMessage& AckFZUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckFZUserMessage* AckFZUserMessage::default_instance_ = NULL;

AckFZUserMessage* AckFZUserMessage::New() const {
  return new AckFZUserMessage;
}

void AckFZUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    res_ = 0u;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFZUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // required uint32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFZUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required uint32 res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->res(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFZUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required uint32 res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->res(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFZUserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required uint32 res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFZUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFZUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFZUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFZUserMessage::MergeFrom(const AckFZUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFZUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFZUserMessage::CopyFrom(const AckFZUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFZUserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckFZUserMessage::Swap(AckFZUserMessage* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(res_, other->res_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFZUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFZUserMessage_descriptor_;
  metadata.reflection = AckFZUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFriends::kSeqnoFieldNumber;
#endif  // !_MSC_VER

RequestFriends::RequestFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFriends::InitAsDefaultInstance() {
}

RequestFriends::RequestFriends(const RequestFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFriends::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFriends::~RequestFriends() {
  SharedDtor();
}

void RequestFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFriends_descriptor_;
}

const RequestFriends& RequestFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestFriends* RequestFriends::default_instance_ = NULL;

RequestFriends* RequestFriends::New() const {
  return new RequestFriends;
}

void RequestFriends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFriends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFriends::MergeFrom(const RequestFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFriends::CopyFrom(const RequestFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFriends::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestFriends::Swap(RequestFriends* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFriends_descriptor_;
  metadata.reflection = RequestFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFriends::kSeqnoFieldNumber;
const int AckFriends::kFriendsFieldNumber;
#endif  // !_MSC_VER

AckFriends::AckFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFriends::InitAsDefaultInstance() {
}

AckFriends::AckFriends(const AckFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFriends::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFriends::~AckFriends() {
  SharedDtor();
}

void AckFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFriends_descriptor_;
}

const AckFriends& AckFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckFriends* AckFriends::default_instance_ = NULL;

AckFriends* AckFriends::New() const {
  return new AckFriends;
}

void AckFriends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated string friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friends(this->friends_size() - 1).data(),
            this->friends(this->friends_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated string friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends(i).data(), this->friends(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated string friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends(i).data(), this->friends(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFriends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated string friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFriends::MergeFrom(const AckFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFriends::CopyFrom(const AckFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFriends::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFriends::Swap(AckFriends* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFriends_descriptor_;
  metadata.reflection = AckFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSWKey::kSeqnoFieldNumber;
const int UpdateSWKey::kSwkeyFieldNumber;
const int UpdateSWKey::kDscrFieldNumber;
const int UpdateSWKey::kVerFieldNumber;
const int UpdateSWKey::kChangeFieldNumber;
#endif  // !_MSC_VER

UpdateSWKey::UpdateSWKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSWKey::InitAsDefaultInstance() {
}

UpdateSWKey::UpdateSWKey(const UpdateSWKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSWKey::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  swkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dscr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ver_ = GOOGLE_LONGLONG(0);
  change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSWKey::~UpdateSWKey() {
  SharedDtor();
}

void UpdateSWKey::SharedDtor() {
  if (swkey_ != &::google::protobuf::internal::kEmptyString) {
    delete swkey_;
  }
  if (dscr_ != &::google::protobuf::internal::kEmptyString) {
    delete dscr_;
  }
  if (this != default_instance_) {
  }
}

void UpdateSWKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSWKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSWKey_descriptor_;
}

const UpdateSWKey& UpdateSWKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

UpdateSWKey* UpdateSWKey::default_instance_ = NULL;

UpdateSWKey* UpdateSWKey::New() const {
  return new UpdateSWKey;
}

void UpdateSWKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_swkey()) {
      if (swkey_ != &::google::protobuf::internal::kEmptyString) {
        swkey_->clear();
      }
    }
    if (has_dscr()) {
      if (dscr_ != &::google::protobuf::internal::kEmptyString) {
        dscr_->clear();
      }
    }
    ver_ = GOOGLE_LONGLONG(0);
    change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSWKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swkey;
        break;
      }

      // required string swkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->swkey().data(), this->swkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dscr;
        break;
      }

      // optional string dscr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dscr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dscr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dscr().data(), this->dscr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ver;
        break;
      }

      // optional int64 ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_change;
        break;
      }

      // optional int32 change = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSWKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->swkey(), output);
  }

  // optional string dscr = 3;
  if (has_dscr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dscr().data(), this->dscr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dscr(), output);
  }

  // optional int64 ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ver(), output);
  }

  // optional int32 change = 5;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSWKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->swkey(), target);
  }

  // optional string dscr = 3;
  if (has_dscr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dscr().data(), this->dscr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dscr(), target);
  }

  // optional int64 ver = 4;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ver(), target);
  }

  // optional int32 change = 5;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSWKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string swkey = 2;
    if (has_swkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swkey());
    }

    // optional string dscr = 3;
    if (has_dscr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dscr());
    }

    // optional int64 ver = 4;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ver());
    }

    // optional int32 change = 5;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSWKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSWKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSWKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSWKey::MergeFrom(const UpdateSWKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_swkey()) {
      set_swkey(from.swkey());
    }
    if (from.has_dscr()) {
      set_dscr(from.dscr());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSWKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSWKey::CopyFrom(const UpdateSWKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSWKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateSWKey::Swap(UpdateSWKey* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(swkey_, other->swkey_);
    std::swap(dscr_, other->dscr_);
    std::swap(ver_, other->ver_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSWKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSWKey_descriptor_;
  metadata.reflection = UpdateSWKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateSWKey::kSeqnoFieldNumber;
const int AckUpdateSWKey::kResultFieldNumber;
const int AckUpdateSWKey::kSwkeyFieldNumber;
#endif  // !_MSC_VER

AckUpdateSWKey::AckUpdateSWKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateSWKey::InitAsDefaultInstance() {
}

AckUpdateSWKey::AckUpdateSWKey(const AckUpdateSWKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateSWKey::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  swkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateSWKey::~AckUpdateSWKey() {
  SharedDtor();
}

void AckUpdateSWKey::SharedDtor() {
  if (swkey_ != &::google::protobuf::internal::kEmptyString) {
    delete swkey_;
  }
  if (this != default_instance_) {
  }
}

void AckUpdateSWKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateSWKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateSWKey_descriptor_;
}

const AckUpdateSWKey& AckUpdateSWKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckUpdateSWKey* AckUpdateSWKey::default_instance_ = NULL;

AckUpdateSWKey* AckUpdateSWKey::New() const {
  return new AckUpdateSWKey;
}

void AckUpdateSWKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    if (has_swkey()) {
      if (swkey_ != &::google::protobuf::internal::kEmptyString) {
        swkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateSWKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_swkey;
        break;
      }

      // required string swkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->swkey().data(), this->swkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateSWKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required string swkey = 3;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->swkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateSWKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required string swkey = 3;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->swkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateSWKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string swkey = 3;
    if (has_swkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateSWKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateSWKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateSWKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateSWKey::MergeFrom(const AckUpdateSWKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_swkey()) {
      set_swkey(from.swkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateSWKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateSWKey::CopyFrom(const AckUpdateSWKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateSWKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckUpdateSWKey::Swap(AckUpdateSWKey* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(swkey_, other->swkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateSWKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateSWKey_descriptor_;
  metadata.reflection = AckUpdateSWKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSWKeyInfo::kSeqnoFieldNumber;
const int ReqSWKeyInfo::kSwkeyFieldNumber;
#endif  // !_MSC_VER

ReqSWKeyInfo::ReqSWKeyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSWKeyInfo::InitAsDefaultInstance() {
}

ReqSWKeyInfo::ReqSWKeyInfo(const ReqSWKeyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSWKeyInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  swkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSWKeyInfo::~ReqSWKeyInfo() {
  SharedDtor();
}

void ReqSWKeyInfo::SharedDtor() {
  if (swkey_ != &::google::protobuf::internal::kEmptyString) {
    delete swkey_;
  }
  if (this != default_instance_) {
  }
}

void ReqSWKeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSWKeyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSWKeyInfo_descriptor_;
}

const ReqSWKeyInfo& ReqSWKeyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

ReqSWKeyInfo* ReqSWKeyInfo::default_instance_ = NULL;

ReqSWKeyInfo* ReqSWKeyInfo::New() const {
  return new ReqSWKeyInfo;
}

void ReqSWKeyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_swkey()) {
      if (swkey_ != &::google::protobuf::internal::kEmptyString) {
        swkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSWKeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swkey;
        break;
      }

      // required string swkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->swkey().data(), this->swkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSWKeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->swkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSWKeyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->swkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSWKeyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string swkey = 2;
    if (has_swkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSWKeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSWKeyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSWKeyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSWKeyInfo::MergeFrom(const ReqSWKeyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_swkey()) {
      set_swkey(from.swkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSWKeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSWKeyInfo::CopyFrom(const ReqSWKeyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSWKeyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqSWKeyInfo::Swap(ReqSWKeyInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(swkey_, other->swkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSWKeyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSWKeyInfo_descriptor_;
  metadata.reflection = ReqSWKeyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSWKeyInfo::kSeqnoFieldNumber;
const int AckSWKeyInfo::kSwkeyFieldNumber;
const int AckSWKeyInfo::kVerFieldNumber;
const int AckSWKeyInfo::kDscrFieldNumber;
const int AckSWKeyInfo::kPcsnFieldNumber;
const int AckSWKeyInfo::kRegTmFieldNumber;
const int AckSWKeyInfo::kUsedFieldNumber;
#endif  // !_MSC_VER

AckSWKeyInfo::AckSWKeyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSWKeyInfo::InitAsDefaultInstance() {
}

AckSWKeyInfo::AckSWKeyInfo(const AckSWKeyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSWKeyInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  swkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ver_ = GOOGLE_LONGLONG(0);
  dscr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pcsn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regtm_ = GOOGLE_LONGLONG(0);
  used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSWKeyInfo::~AckSWKeyInfo() {
  SharedDtor();
}

void AckSWKeyInfo::SharedDtor() {
  if (swkey_ != &::google::protobuf::internal::kEmptyString) {
    delete swkey_;
  }
  if (dscr_ != &::google::protobuf::internal::kEmptyString) {
    delete dscr_;
  }
  if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
    delete pcsn_;
  }
  if (this != default_instance_) {
  }
}

void AckSWKeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSWKeyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSWKeyInfo_descriptor_;
}

const AckSWKeyInfo& AckSWKeyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSWKeyInfo* AckSWKeyInfo::default_instance_ = NULL;

AckSWKeyInfo* AckSWKeyInfo::New() const {
  return new AckSWKeyInfo;
}

void AckSWKeyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_swkey()) {
      if (swkey_ != &::google::protobuf::internal::kEmptyString) {
        swkey_->clear();
      }
    }
    ver_ = GOOGLE_LONGLONG(0);
    if (has_dscr()) {
      if (dscr_ != &::google::protobuf::internal::kEmptyString) {
        dscr_->clear();
      }
    }
    if (has_pcsn()) {
      if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
        pcsn_->clear();
      }
    }
    regtm_ = GOOGLE_LONGLONG(0);
    used_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSWKeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swkey;
        break;
      }

      // required string swkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->swkey().data(), this->swkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // required int64 ver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dscr;
        break;
      }

      // optional string dscr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dscr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dscr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dscr().data(), this->dscr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pcsn;
        break;
      }

      // optional string pcsn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pcsn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcsn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcsn().data(), this->pcsn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_regTm;
        break;
      }

      // optional int64 regTm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &regtm_)));
          set_has_regtm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_used;
        break;
      }

      // optional int32 used = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSWKeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->swkey(), output);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ver(), output);
  }

  // optional string dscr = 4;
  if (has_dscr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dscr().data(), this->dscr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dscr(), output);
  }

  // optional string pcsn = 5;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pcsn(), output);
  }

  // optional int64 regTm = 6;
  if (has_regtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->regtm(), output);
  }

  // optional int32 used = 7;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->used(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSWKeyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string swkey = 2;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->swkey(), target);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ver(), target);
  }

  // optional string dscr = 4;
  if (has_dscr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dscr().data(), this->dscr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dscr(), target);
  }

  // optional string pcsn = 5;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pcsn(), target);
  }

  // optional int64 regTm = 6;
  if (has_regtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->regtm(), target);
  }

  // optional int32 used = 7;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->used(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSWKeyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string swkey = 2;
    if (has_swkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swkey());
    }

    // required int64 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ver());
    }

    // optional string dscr = 4;
    if (has_dscr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dscr());
    }

    // optional string pcsn = 5;
    if (has_pcsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcsn());
    }

    // optional int64 regTm = 6;
    if (has_regtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regtm());
    }

    // optional int32 used = 7;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSWKeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSWKeyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSWKeyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSWKeyInfo::MergeFrom(const AckSWKeyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_swkey()) {
      set_swkey(from.swkey());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_dscr()) {
      set_dscr(from.dscr());
    }
    if (from.has_pcsn()) {
      set_pcsn(from.pcsn());
    }
    if (from.has_regtm()) {
      set_regtm(from.regtm());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSWKeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSWKeyInfo::CopyFrom(const AckSWKeyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSWKeyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckSWKeyInfo::Swap(AckSWKeyInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(swkey_, other->swkey_);
    std::swap(ver_, other->ver_);
    std::swap(dscr_, other->dscr_);
    std::swap(pcsn_, other->pcsn_);
    std::swap(regtm_, other->regtm_);
    std::swap(used_, other->used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSWKeyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSWKeyInfo_descriptor_;
  metadata.reflection = AckSWKeyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWRegist::kSeqnoFieldNumber;
const int SWRegist::kPcsnFieldNumber;
const int SWRegist::kSwkeyFieldNumber;
#endif  // !_MSC_VER

SWRegist::SWRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWRegist::InitAsDefaultInstance() {
}

SWRegist::SWRegist(const SWRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWRegist::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  pcsn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  swkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWRegist::~SWRegist() {
  SharedDtor();
}

void SWRegist::SharedDtor() {
  if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
    delete pcsn_;
  }
  if (swkey_ != &::google::protobuf::internal::kEmptyString) {
    delete swkey_;
  }
  if (this != default_instance_) {
  }
}

void SWRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWRegist_descriptor_;
}

const SWRegist& SWRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

SWRegist* SWRegist::default_instance_ = NULL;

SWRegist* SWRegist::New() const {
  return new SWRegist;
}

void SWRegist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_pcsn()) {
      if (pcsn_ != &::google::protobuf::internal::kEmptyString) {
        pcsn_->clear();
      }
    }
    if (has_swkey()) {
      if (swkey_ != &::google::protobuf::internal::kEmptyString) {
        swkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pcsn;
        break;
      }

      // required string pcsn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pcsn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcsn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcsn().data(), this->pcsn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_swkey;
        break;
      }

      // required string swkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->swkey().data(), this->swkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string pcsn = 2;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pcsn(), output);
  }

  // required string swkey = 3;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->swkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string pcsn = 2;
  if (has_pcsn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsn().data(), this->pcsn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pcsn(), target);
  }

  // required string swkey = 3;
  if (has_swkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->swkey().data(), this->swkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->swkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string pcsn = 2;
    if (has_pcsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcsn());
    }

    // required string swkey = 3;
    if (has_swkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWRegist::MergeFrom(const SWRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_pcsn()) {
      set_pcsn(from.pcsn());
    }
    if (from.has_swkey()) {
      set_swkey(from.swkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWRegist::CopyFrom(const SWRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWRegist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SWRegist::Swap(SWRegist* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(pcsn_, other->pcsn_);
    std::swap(swkey_, other->swkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWRegist_descriptor_;
  metadata.reflection = SWRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSWRegist::kSeqnoFieldNumber;
const int AckSWRegist::kResultFieldNumber;
const int AckSWRegist::kVerFieldNumber;
#endif  // !_MSC_VER

AckSWRegist::AckSWRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSWRegist::InitAsDefaultInstance() {
}

AckSWRegist::AckSWRegist(const AckSWRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSWRegist::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  result_ = 0;
  ver_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSWRegist::~AckSWRegist() {
  SharedDtor();
}

void AckSWRegist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSWRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSWRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSWRegist_descriptor_;
}

const AckSWRegist& AckSWRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckSWRegist* AckSWRegist::default_instance_ = NULL;

AckSWRegist* AckSWRegist::New() const {
  return new AckSWRegist;
}

void AckSWRegist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    result_ = 0;
    ver_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSWRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // required int64 ver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSWRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSWRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int64 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSWRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int64 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSWRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSWRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSWRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSWRegist::MergeFrom(const AckSWRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSWRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSWRegist::CopyFrom(const AckSWRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSWRegist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckSWRegist::Swap(AckSWRegist* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(result_, other->result_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSWRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSWRegist_descriptor_;
  metadata.reflection = AckSWRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZResult::kIdFieldNumber;
const int FZResult::kBegTmFieldNumber;
const int FZResult::kUsedTmFieldNumber;
const int FZResult::kTypeFieldNumber;
const int FZResult::kRsltFieldNumber;
#endif  // !_MSC_VER

FZResult::FZResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZResult::InitAsDefaultInstance() {
}

FZResult::FZResult(const FZResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  begtm_ = GOOGLE_LONGLONG(0);
  usedtm_ = 0;
  type_ = 0;
  rslt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZResult::~FZResult() {
  SharedDtor();
}

void FZResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZResult_descriptor_;
}

const FZResult& FZResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

FZResult* FZResult::default_instance_ = NULL;

FZResult* FZResult::New() const {
  return new FZResult;
}

void FZResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    begtm_ = GOOGLE_LONGLONG(0);
    usedtm_ = 0;
    type_ = 0;
    rslt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begTm;
        break;
      }

      // optional int64 begTm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begtm_)));
          set_has_begtm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usedTm;
        break;
      }

      // required int32 usedTm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usedtm_)));
          set_has_usedtm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rslt;
        break;
      }

      // required int32 rslt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rslt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rslt_)));
          set_has_rslt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 begTm = 2;
  if (has_begtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begtm(), output);
  }

  // required int32 usedTm = 3;
  if (has_usedtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usedtm(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 rslt = 5;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 begTm = 2;
  if (has_begtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begtm(), target);
  }

  // required int32 usedTm = 3;
  if (has_usedtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usedtm(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 rslt = 5;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 begTm = 2;
    if (has_begtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begtm());
    }

    // required int32 usedTm = 3;
    if (has_usedtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usedtm());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 rslt = 5;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZResult::MergeFrom(const FZResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begtm()) {
      set_begtm(from.begtm());
    }
    if (from.has_usedtm()) {
      set_usedtm(from.usedtm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rslt()) {
      set_rslt(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZResult::CopyFrom(const FZResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void FZResult::Swap(FZResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begtm_, other->begtm_);
    std::swap(usedtm_, other->usedtm_);
    std::swap(type_, other->type_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZResult_descriptor_;
  metadata.reflection = FZResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostFZResult::kSeqnoFieldNumber;
const int PostFZResult::kRsltFieldNumber;
#endif  // !_MSC_VER

PostFZResult::PostFZResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostFZResult::InitAsDefaultInstance() {
  rslt_ = const_cast< ::das::proto::FZResult*>(&::das::proto::FZResult::default_instance());
}

PostFZResult::PostFZResult(const PostFZResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostFZResult::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  rslt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostFZResult::~PostFZResult() {
  SharedDtor();
}

void PostFZResult::SharedDtor() {
  if (this != default_instance_) {
    delete rslt_;
  }
}

void PostFZResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostFZResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostFZResult_descriptor_;
}

const PostFZResult& PostFZResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostFZResult* PostFZResult::default_instance_ = NULL;

PostFZResult* PostFZResult::New() const {
  return new PostFZResult;
}

void PostFZResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_rslt()) {
      if (rslt_ != NULL) rslt_->::das::proto::FZResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostFZResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rslt;
        break;
      }

      // required .das.proto.FZResult rslt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rslt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rslt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostFZResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.FZResult rslt = 2;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostFZResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.FZResult rslt = 2;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostFZResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.FZResult rslt = 2;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostFZResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostFZResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostFZResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostFZResult::MergeFrom(const PostFZResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_rslt()) {
      mutable_rslt()->::das::proto::FZResult::MergeFrom(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostFZResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostFZResult::CopyFrom(const PostFZResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostFZResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rslt()) {
    if (!this->rslt().IsInitialized()) return false;
  }
  return true;
}

void PostFZResult::Swap(PostFZResult* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostFZResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostFZResult_descriptor_;
  metadata.reflection = PostFZResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostFZResult::kSeqnoFieldNumber;
const int AckPostFZResult::kIdFieldNumber;
#endif  // !_MSC_VER

AckPostFZResult::AckPostFZResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostFZResult::InitAsDefaultInstance() {
}

AckPostFZResult::AckPostFZResult(const AckPostFZResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostFZResult::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostFZResult::~AckPostFZResult() {
  SharedDtor();
}

void AckPostFZResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPostFZResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostFZResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostFZResult_descriptor_;
}

const AckPostFZResult& AckPostFZResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostFZResult* AckPostFZResult::default_instance_ = NULL;

AckPostFZResult* AckPostFZResult::New() const {
  return new AckPostFZResult;
}

void AckPostFZResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostFZResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostFZResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostFZResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostFZResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostFZResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostFZResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostFZResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostFZResult::MergeFrom(const AckPostFZResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostFZResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostFZResult::CopyFrom(const AckPostFZResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostFZResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostFZResult::Swap(AckPostFZResult* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostFZResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostFZResult_descriptor_;
  metadata.reflection = AckPostFZResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFZResults::kSeqnoFieldNumber;
const int RequestFZResults::kTmbegFieldNumber;
const int RequestFZResults::kTmendFieldNumber;
#endif  // !_MSC_VER

RequestFZResults::RequestFZResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFZResults::InitAsDefaultInstance() {
}

RequestFZResults::RequestFZResults(const RequestFZResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFZResults::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  tmbeg_ = GOOGLE_LONGLONG(0);
  tmend_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFZResults::~RequestFZResults() {
  SharedDtor();
}

void RequestFZResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFZResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFZResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFZResults_descriptor_;
}

const RequestFZResults& RequestFZResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestFZResults* RequestFZResults::default_instance_ = NULL;

RequestFZResults* RequestFZResults::New() const {
  return new RequestFZResults;
}

void RequestFZResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    tmbeg_ = GOOGLE_LONGLONG(0);
    tmend_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFZResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tmbeg;
        break;
      }

      // optional int64 tmbeg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmbeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmbeg_)));
          set_has_tmbeg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tmend;
        break;
      }

      // optional int64 tmend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmend_)));
          set_has_tmend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFZResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional int64 tmbeg = 2;
  if (has_tmbeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tmbeg(), output);
  }

  // optional int64 tmend = 3;
  if (has_tmend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tmend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFZResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional int64 tmbeg = 2;
  if (has_tmbeg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tmbeg(), target);
  }

  // optional int64 tmend = 3;
  if (has_tmend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tmend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFZResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional int64 tmbeg = 2;
    if (has_tmbeg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmbeg());
    }

    // optional int64 tmend = 3;
    if (has_tmend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFZResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFZResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFZResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFZResults::MergeFrom(const RequestFZResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_tmbeg()) {
      set_tmbeg(from.tmbeg());
    }
    if (from.has_tmend()) {
      set_tmend(from.tmend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFZResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFZResults::CopyFrom(const RequestFZResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFZResults::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestFZResults::Swap(RequestFZResults* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(tmbeg_, other->tmbeg_);
    std::swap(tmend_, other->tmend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFZResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFZResults_descriptor_;
  metadata.reflection = RequestFZResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFZResults::kSeqnoFieldNumber;
const int AckFZResults::kRsltFieldNumber;
#endif  // !_MSC_VER

AckFZResults::AckFZResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFZResults::InitAsDefaultInstance() {
}

AckFZResults::AckFZResults(const AckFZResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFZResults::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFZResults::~AckFZResults() {
  SharedDtor();
}

void AckFZResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFZResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFZResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFZResults_descriptor_;
}

const AckFZResults& AckFZResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckFZResults* AckFZResults::default_instance_ = NULL;

AckFZResults* AckFZResults::New() const {
  return new AckFZResults;
}

void AckFZResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  rslt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFZResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rslt;
        break;
      }

      // repeated .das.proto.FZResult rslt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rslt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rslt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rslt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFZResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // repeated .das.proto.FZResult rslt = 2;
  for (int i = 0; i < this->rslt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rslt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFZResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // repeated .das.proto.FZResult rslt = 2;
  for (int i = 0; i < this->rslt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rslt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFZResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  // repeated .das.proto.FZResult rslt = 2;
  total_size += 1 * this->rslt_size();
  for (int i = 0; i < this->rslt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rslt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFZResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFZResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFZResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFZResults::MergeFrom(const AckFZResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  rslt_.MergeFrom(from.rslt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFZResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFZResults::CopyFrom(const AckFZResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFZResults::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rslt_size(); i++) {
    if (!this->rslt(i).IsInitialized()) return false;
  }
  return true;
}

void AckFZResults::Swap(AckFZResults* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    rslt_.Swap(&other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFZResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFZResults_descriptor_;
  metadata.reflection = AckFZResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZInfo::kNameFieldNumber;
const int FZInfo::kGradeFieldNumber;
const int FZInfo::kMajrFieldNumber;
const int FZInfo::kIdFieldNumber;
const int FZInfo::kSchoolFieldNumber;
const int FZInfo::kBirthsFieldNumber;
const int FZInfo::kEmailFieldNumber;
#endif  // !_MSC_VER

FZInfo::FZInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZInfo::InitAsDefaultInstance() {
}

FZInfo::FZInfo(const FZInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  majr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  school_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  births_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZInfo::~FZInfo() {
  SharedDtor();
}

void FZInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (grade_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_;
  }
  if (majr_ != &::google::protobuf::internal::kEmptyString) {
    delete majr_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (school_ != &::google::protobuf::internal::kEmptyString) {
    delete school_;
  }
  if (births_ != &::google::protobuf::internal::kEmptyString) {
    delete births_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void FZInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZInfo_descriptor_;
}

const FZInfo& FZInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

FZInfo* FZInfo::default_instance_ = NULL;

FZInfo* FZInfo::New() const {
  return new FZInfo;
}

void FZInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_grade()) {
      if (grade_ != &::google::protobuf::internal::kEmptyString) {
        grade_->clear();
      }
    }
    if (has_majr()) {
      if (majr_ != &::google::protobuf::internal::kEmptyString) {
        majr_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_school()) {
      if (school_ != &::google::protobuf::internal::kEmptyString) {
        school_->clear();
      }
    }
    if (has_births()) {
      if (births_ != &::google::protobuf::internal::kEmptyString) {
        births_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grade;
        break;
      }

      // optional string grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grade().data(), this->grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_majr;
        break;
      }

      // optional string majr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_majr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_majr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->majr().data(), this->majr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // optional string id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_school;
        break;
      }

      // optional string school = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_school:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_school()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->school().data(), this->school().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_births;
        break;
      }

      // optional string births = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_births:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_births()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->births().data(), this->births().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // required string email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grade(), output);
  }

  // optional string majr = 3;
  if (has_majr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->majr().data(), this->majr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->majr(), output);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(), output);
  }

  // optional string school = 5;
  if (has_school()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->school().data(), this->school().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->school(), output);
  }

  // optional string births = 6;
  if (has_births()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->births().data(), this->births().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->births(), output);
  }

  // required string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grade(), target);
  }

  // optional string majr = 3;
  if (has_majr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->majr().data(), this->majr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->majr(), target);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // optional string school = 5;
  if (has_school()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->school().data(), this->school().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->school(), target);
  }

  // optional string births = 6;
  if (has_births()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->births().data(), this->births().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->births(), target);
  }

  // required string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade());
    }

    // optional string majr = 3;
    if (has_majr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->majr());
    }

    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string school = 5;
    if (has_school()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->school());
    }

    // optional string births = 6;
    if (has_births()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->births());
    }

    // required string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZInfo::MergeFrom(const FZInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_majr()) {
      set_majr(from.majr());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_school()) {
      set_school(from.school());
    }
    if (from.has_births()) {
      set_births(from.births());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZInfo::CopyFrom(const FZInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  return true;
}

void FZInfo::Swap(FZInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(grade_, other->grade_);
    std::swap(majr_, other->majr_);
    std::swap(id_, other->id_);
    std::swap(school_, other->school_);
    std::swap(births_, other->births_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZInfo_descriptor_;
  metadata.reflection = FZInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostFZInfo::kSeqnoFieldNumber;
const int PostFZInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

PostFZInfo::PostFZInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostFZInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::das::proto::FZInfo*>(&::das::proto::FZInfo::default_instance());
}

PostFZInfo::PostFZInfo(const PostFZInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostFZInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostFZInfo::~PostFZInfo() {
  SharedDtor();
}

void PostFZInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PostFZInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostFZInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostFZInfo_descriptor_;
}

const PostFZInfo& PostFZInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostFZInfo* PostFZInfo::default_instance_ = NULL;

PostFZInfo* PostFZInfo::New() const {
  return new PostFZInfo;
}

void PostFZInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::das::proto::FZInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostFZInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .das.proto.FZInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostFZInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required .das.proto.FZInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostFZInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required .das.proto.FZInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostFZInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required .das.proto.FZInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostFZInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostFZInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostFZInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostFZInfo::MergeFrom(const PostFZInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_info()) {
      mutable_info()->::das::proto::FZInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostFZInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostFZInfo::CopyFrom(const PostFZInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostFZInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void PostFZInfo::Swap(PostFZInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostFZInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostFZInfo_descriptor_;
  metadata.reflection = PostFZInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPostFZInfo::kSeqnoFieldNumber;
const int AckPostFZInfo::kRsltFieldNumber;
#endif  // !_MSC_VER

AckPostFZInfo::AckPostFZInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPostFZInfo::InitAsDefaultInstance() {
}

AckPostFZInfo::AckPostFZInfo(const AckPostFZInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPostFZInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  rslt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPostFZInfo::~AckPostFZInfo() {
  SharedDtor();
}

void AckPostFZInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPostFZInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPostFZInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPostFZInfo_descriptor_;
}

const AckPostFZInfo& AckPostFZInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckPostFZInfo* AckPostFZInfo::default_instance_ = NULL;

AckPostFZInfo* AckPostFZInfo::New() const {
  return new AckPostFZInfo;
}

void AckPostFZInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    rslt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPostFZInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rslt;
        break;
      }

      // required int32 rslt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rslt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rslt_)));
          set_has_rslt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPostFZInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 rslt = 2;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPostFZInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 rslt = 2;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPostFZInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 rslt = 2;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPostFZInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPostFZInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPostFZInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPostFZInfo::MergeFrom(const AckPostFZInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_rslt()) {
      set_rslt(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPostFZInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPostFZInfo::CopyFrom(const AckPostFZInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPostFZInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckPostFZInfo::Swap(AckPostFZInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPostFZInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPostFZInfo_descriptor_;
  metadata.reflection = AckPostFZInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFZInfo::kSeqnoFieldNumber;
#endif  // !_MSC_VER

RequestFZInfo::RequestFZInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFZInfo::InitAsDefaultInstance() {
}

RequestFZInfo::RequestFZInfo(const RequestFZInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFZInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFZInfo::~RequestFZInfo() {
  SharedDtor();
}

void RequestFZInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFZInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFZInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFZInfo_descriptor_;
}

const RequestFZInfo& RequestFZInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

RequestFZInfo* RequestFZInfo::default_instance_ = NULL;

RequestFZInfo* RequestFZInfo::New() const {
  return new RequestFZInfo;
}

void RequestFZInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFZInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFZInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFZInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFZInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFZInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFZInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFZInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFZInfo::MergeFrom(const RequestFZInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFZInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFZInfo::CopyFrom(const RequestFZInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFZInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestFZInfo::Swap(RequestFZInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFZInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFZInfo_descriptor_;
  metadata.reflection = RequestFZInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFZInfo::kSeqnoFieldNumber;
const int AckFZInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

AckFZInfo::AckFZInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFZInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::das::proto::FZInfo*>(&::das::proto::FZInfo::default_instance());
}

AckFZInfo::AckFZInfo(const AckFZInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFZInfo::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFZInfo::~AckFZInfo() {
  SharedDtor();
}

void AckFZInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void AckFZInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFZInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFZInfo_descriptor_;
}

const AckFZInfo& AckFZInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckFZInfo* AckFZInfo::default_instance_ = NULL;

AckFZInfo* AckFZInfo::New() const {
  return new AckFZInfo;
}

void AckFZInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::das::proto::FZInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFZInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .das.proto.FZInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFZInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional .das.proto.FZInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFZInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional .das.proto.FZInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFZInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional .das.proto.FZInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFZInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFZInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFZInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFZInfo::MergeFrom(const AckFZInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_info()) {
      mutable_info()->::das::proto::FZInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFZInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFZInfo::CopyFrom(const AckFZInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFZInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void AckFZInfo::Swap(AckFZInfo* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFZInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFZInfo_descriptor_;
  metadata.reflection = AckFZInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostGetFZPswd::kSeqnoFieldNumber;
const int PostGetFZPswd::kEmailFieldNumber;
const int PostGetFZPswd::kUserFieldNumber;
#endif  // !_MSC_VER

PostGetFZPswd::PostGetFZPswd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostGetFZPswd::InitAsDefaultInstance() {
}

PostGetFZPswd::PostGetFZPswd(const PostGetFZPswd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostGetFZPswd::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostGetFZPswd::~PostGetFZPswd() {
  SharedDtor();
}

void PostGetFZPswd::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void PostGetFZPswd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostGetFZPswd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostGetFZPswd_descriptor_;
}

const PostGetFZPswd& PostGetFZPswd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

PostGetFZPswd* PostGetFZPswd::default_instance_ = NULL;

PostGetFZPswd* PostGetFZPswd::New() const {
  return new PostGetFZPswd;
}

void PostGetFZPswd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostGetFZPswd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // required string email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostGetFZPswd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->email(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostGetFZPswd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostGetFZPswd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required string email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostGetFZPswd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostGetFZPswd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostGetFZPswd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostGetFZPswd::MergeFrom(const PostGetFZPswd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostGetFZPswd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostGetFZPswd::CopyFrom(const PostGetFZPswd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostGetFZPswd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PostGetFZPswd::Swap(PostGetFZPswd* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(email_, other->email_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostGetFZPswd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostGetFZPswd_descriptor_;
  metadata.reflection = PostGetFZPswd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGetFZPswd::kSeqnoFieldNumber;
const int AckGetFZPswd::kRsltFieldNumber;
#endif  // !_MSC_VER

AckGetFZPswd::AckGetFZPswd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetFZPswd::InitAsDefaultInstance() {
}

AckGetFZPswd::AckGetFZPswd(const AckGetFZPswd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetFZPswd::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0u;
  rslt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetFZPswd::~AckGetFZPswd() {
  SharedDtor();
}

void AckGetFZPswd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetFZPswd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetFZPswd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetFZPswd_descriptor_;
}

const AckGetFZPswd& AckGetFZPswd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_das_2eproto();
  return *default_instance_;
}

AckGetFZPswd* AckGetFZPswd::default_instance_ = NULL;

AckGetFZPswd* AckGetFZPswd::New() const {
  return new AckGetFZPswd;
}

void AckGetFZPswd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqno_ = 0u;
    rslt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetFZPswd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rslt;
        break;
      }

      // required int32 rslt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rslt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rslt_)));
          set_has_rslt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGetFZPswd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // required int32 rslt = 2;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetFZPswd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // required int32 rslt = 2;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetFZPswd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // required int32 rslt = 2;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetFZPswd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetFZPswd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetFZPswd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetFZPswd::MergeFrom(const AckGetFZPswd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_rslt()) {
      set_rslt(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetFZPswd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetFZPswd::CopyFrom(const AckGetFZPswd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetFZPswd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckGetFZPswd::Swap(AckGetFZPswd* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetFZPswd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetFZPswd_descriptor_;
  metadata.reflection = AckGetFZPswd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace das

// @@protoc_insertion_point(global_scope)
